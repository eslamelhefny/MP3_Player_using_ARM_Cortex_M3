
RTOS_PROG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066d4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  080067e4  080067e4  000167e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a34  08006a34  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08006a34  08006a34  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006a34  08006a34  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a34  08006a34  00016a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a38  08006a38  00016a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006a3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001aac  20000010  08006a4c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001abc  08006a4c  00021abc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019c48  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003512  00000000  00000000  00039c81  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001558  00000000  00000000  0003d198  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013d0  00000000  00000000  0003e6f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004182  00000000  00000000  0003fac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011f22  00000000  00000000  00043c42  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009966c  00000000  00000000  00055b64  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ef1d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005978  00000000  00000000  000ef24c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	080067cc 	.word	0x080067cc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	080067cc 	.word	0x080067cc

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000164:	b580      	push	{r7, lr}
 8000166:	b082      	sub	sp, #8
 8000168:	af02      	add	r7, sp, #8

	/*init preperals*/
	system_init();
 800016a:	f000 f8c3 	bl	80002f4 <system_init>

	HAL_ADCEx_Calibration_Start(&hadc1);
 800016e:	4842      	ldr	r0, [pc, #264]	; (8000278 <main+0x114>)
 8000170:	f001 fd22 	bl	8001bb8 <HAL_ADCEx_Calibration_Start>

	TAS.AS='E';   //ALRAM STATUS ENABLE
 8000174:	4b41      	ldr	r3, [pc, #260]	; (800027c <main+0x118>)
 8000176:	2245      	movs	r2, #69	; 0x45
 8000178:	711a      	strb	r2, [r3, #4]
	TAS.T=20;     //THRESHOLD 20
 800017a:	4b40      	ldr	r3, [pc, #256]	; (800027c <main+0x118>)
 800017c:	2214      	movs	r2, #20
 800017e:	709a      	strb	r2, [r3, #2]
	TAS.I=30;     //INTENSITY 30
 8000180:	4b3e      	ldr	r3, [pc, #248]	; (800027c <main+0x118>)
 8000182:	221e      	movs	r2, #30
 8000184:	70da      	strb	r2, [r3, #3]
	TAS.SystemState=SSMain;
 8000186:	4b3d      	ldr	r3, [pc, #244]	; (800027c <main+0x118>)
 8000188:	2200      	movs	r2, #0
 800018a:	715a      	strb	r2, [r3, #5]



	vSemaphoreCreateBinary(bsUartRes);
 800018c:	2203      	movs	r2, #3
 800018e:	2100      	movs	r1, #0
 8000190:	2001      	movs	r0, #1
 8000192:	f003 fddd 	bl	8003d50 <xQueueGenericCreate>
 8000196:	4602      	mov	r2, r0
 8000198:	4b39      	ldr	r3, [pc, #228]	; (8000280 <main+0x11c>)
 800019a:	601a      	str	r2, [r3, #0]
 800019c:	4b38      	ldr	r3, [pc, #224]	; (8000280 <main+0x11c>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d006      	beq.n	80001b2 <main+0x4e>
 80001a4:	4b36      	ldr	r3, [pc, #216]	; (8000280 <main+0x11c>)
 80001a6:	6818      	ldr	r0, [r3, #0]
 80001a8:	2300      	movs	r3, #0
 80001aa:	2200      	movs	r2, #0
 80001ac:	2100      	movs	r1, #0
 80001ae:	f003 fe2f 	bl	8003e10 <xQueueGenericSend>

	egSym=xEventGroupCreate();
 80001b2:	f003 fa7f 	bl	80036b4 <xEventGroupCreate>
 80001b6:	4602      	mov	r2, r0
 80001b8:	4b32      	ldr	r3, [pc, #200]	; (8000284 <main+0x120>)
 80001ba:	601a      	str	r2, [r3, #0]

	//HAL_UART_Transmit(&huart1, "Enter Password:", 14, 1000);
	LCD_vidWriteString("Enter Password");
 80001bc:	4832      	ldr	r0, [pc, #200]	; (8000288 <main+0x124>)
 80001be:	f001 f87c 	bl	80012ba <LCD_vidWriteString>

	while (i<1000000){
		HAL_UART_Receive( &huart1, buff3, 12, 200);
 80001c2:	23c8      	movs	r3, #200	; 0xc8
 80001c4:	220c      	movs	r2, #12
 80001c6:	4931      	ldr	r1, [pc, #196]	; (800028c <main+0x128>)
 80001c8:	4831      	ldr	r0, [pc, #196]	; (8000290 <main+0x12c>)
 80001ca:	f003 f8ca 	bl	8003362 <HAL_UART_Receive>
		i++;
 80001ce:	4b31      	ldr	r3, [pc, #196]	; (8000294 <main+0x130>)
 80001d0:	881b      	ldrh	r3, [r3, #0]
 80001d2:	3301      	adds	r3, #1
 80001d4:	b29a      	uxth	r2, r3
 80001d6:	4b2f      	ldr	r3, [pc, #188]	; (8000294 <main+0x130>)
 80001d8:	801a      	strh	r2, [r3, #0]

		if( strcmp( buff3, "Welcome 1234" ) == 0 ){
 80001da:	492f      	ldr	r1, [pc, #188]	; (8000298 <main+0x134>)
 80001dc:	482b      	ldr	r0, [pc, #172]	; (800028c <main+0x128>)
 80001de:	f7ff ffb7 	bl	8000150 <strcmp>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d1ec      	bne.n	80001c2 <main+0x5e>
			LCD_vidClear();
 80001e8:	f001 f83e 	bl	8001268 <LCD_vidClear>
			LCD_vidWriteString("Welcome to Home");
 80001ec:	482b      	ldr	r0, [pc, #172]	; (800029c <main+0x138>)
 80001ee:	f001 f864 	bl	80012ba <LCD_vidWriteString>
			HAL_Delay(3000);
 80001f2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80001f6:	f001 f8ad 	bl	8001354 <HAL_Delay>

			/* Create Tasks*/
			xTaskCreate(T_Alarm,"Alarm",100,(void*)"T_T1 Started ...\r\n",5,&t1_handle);
 80001fa:	4b29      	ldr	r3, [pc, #164]	; (80002a0 <main+0x13c>)
 80001fc:	9301      	str	r3, [sp, #4]
 80001fe:	2305      	movs	r3, #5
 8000200:	9300      	str	r3, [sp, #0]
 8000202:	4b28      	ldr	r3, [pc, #160]	; (80002a4 <main+0x140>)
 8000204:	2264      	movs	r2, #100	; 0x64
 8000206:	4928      	ldr	r1, [pc, #160]	; (80002a8 <main+0x144>)
 8000208:	4828      	ldr	r0, [pc, #160]	; (80002ac <main+0x148>)
 800020a:	f004 fb50 	bl	80048ae <xTaskCreate>
			xTaskCreate(T_TempSens,"TempSens",100,(void*)"T_T2 Started ...\r\n",2,&t2_handle);
 800020e:	4b28      	ldr	r3, [pc, #160]	; (80002b0 <main+0x14c>)
 8000210:	9301      	str	r3, [sp, #4]
 8000212:	2302      	movs	r3, #2
 8000214:	9300      	str	r3, [sp, #0]
 8000216:	4b27      	ldr	r3, [pc, #156]	; (80002b4 <main+0x150>)
 8000218:	2264      	movs	r2, #100	; 0x64
 800021a:	4927      	ldr	r1, [pc, #156]	; (80002b8 <main+0x154>)
 800021c:	4827      	ldr	r0, [pc, #156]	; (80002bc <main+0x158>)
 800021e:	f004 fb46 	bl	80048ae <xTaskCreate>
			xTaskCreate(T_Check_TEMP,"Check",100,(void*)"T_T3 Started ...\r\n",4,&t3_handle);
 8000222:	4b27      	ldr	r3, [pc, #156]	; (80002c0 <main+0x15c>)
 8000224:	9301      	str	r3, [sp, #4]
 8000226:	2304      	movs	r3, #4
 8000228:	9300      	str	r3, [sp, #0]
 800022a:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <main+0x160>)
 800022c:	2264      	movs	r2, #100	; 0x64
 800022e:	4926      	ldr	r1, [pc, #152]	; (80002c8 <main+0x164>)
 8000230:	4826      	ldr	r0, [pc, #152]	; (80002cc <main+0x168>)
 8000232:	f004 fb3c 	bl	80048ae <xTaskCreate>
			xTaskCreate(T_Display,"Display",100,(void*)"T_T4 Started ...\r\n",1,&t4_handle);
 8000236:	4b26      	ldr	r3, [pc, #152]	; (80002d0 <main+0x16c>)
 8000238:	9301      	str	r3, [sp, #4]
 800023a:	2301      	movs	r3, #1
 800023c:	9300      	str	r3, [sp, #0]
 800023e:	4b25      	ldr	r3, [pc, #148]	; (80002d4 <main+0x170>)
 8000240:	2264      	movs	r2, #100	; 0x64
 8000242:	4925      	ldr	r1, [pc, #148]	; (80002d8 <main+0x174>)
 8000244:	4825      	ldr	r0, [pc, #148]	; (80002dc <main+0x178>)
 8000246:	f004 fb32 	bl	80048ae <xTaskCreate>
			xTaskCreate(T_UserTerm,"UserTerm",100,(void*)"T_T5 Started ...\r\n",3,&t5_handle);
 800024a:	4b25      	ldr	r3, [pc, #148]	; (80002e0 <main+0x17c>)
 800024c:	9301      	str	r3, [sp, #4]
 800024e:	2303      	movs	r3, #3
 8000250:	9300      	str	r3, [sp, #0]
 8000252:	4b24      	ldr	r3, [pc, #144]	; (80002e4 <main+0x180>)
 8000254:	2264      	movs	r2, #100	; 0x64
 8000256:	4924      	ldr	r1, [pc, #144]	; (80002e8 <main+0x184>)
 8000258:	4824      	ldr	r0, [pc, #144]	; (80002ec <main+0x188>)
 800025a:	f004 fb28 	bl	80048ae <xTaskCreate>


			egBits=xEventGroupSetBits(egSym, E1);
 800025e:	4b09      	ldr	r3, [pc, #36]	; (8000284 <main+0x120>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	2101      	movs	r1, #1
 8000264:	4618      	mov	r0, r3
 8000266:	f003 fb3f 	bl	80038e8 <xEventGroupSetBits>
 800026a:	4602      	mov	r2, r0
 800026c:	4b20      	ldr	r3, [pc, #128]	; (80002f0 <main+0x18c>)
 800026e:	601a      	str	r2, [r3, #0]

			/* Start RTOS */
			vTaskStartScheduler();
 8000270:	f004 fc8c 	bl	8004b8c <vTaskStartScheduler>
		HAL_UART_Receive( &huart1, buff3, 12, 200);
 8000274:	e7a5      	b.n	80001c2 <main+0x5e>
 8000276:	bf00      	nop
 8000278:	200019a8 	.word	0x200019a8
 800027c:	20001a24 	.word	0x20001a24
 8000280:	20000040 	.word	0x20000040
 8000284:	200019a0 	.word	0x200019a0
 8000288:	080067e4 	.word	0x080067e4
 800028c:	20000050 	.word	0x20000050
 8000290:	200019dc 	.word	0x200019dc
 8000294:	20000064 	.word	0x20000064
 8000298:	080067f4 	.word	0x080067f4
 800029c:	08006804 	.word	0x08006804
 80002a0:	2000002c 	.word	0x2000002c
 80002a4:	08006814 	.word	0x08006814
 80002a8:	08006828 	.word	0x08006828
 80002ac:	08000331 	.word	0x08000331
 80002b0:	20000030 	.word	0x20000030
 80002b4:	08006830 	.word	0x08006830
 80002b8:	08006844 	.word	0x08006844
 80002bc:	080003ad 	.word	0x080003ad
 80002c0:	20000034 	.word	0x20000034
 80002c4:	08006850 	.word	0x08006850
 80002c8:	08006864 	.word	0x08006864
 80002cc:	08000485 	.word	0x08000485
 80002d0:	20000038 	.word	0x20000038
 80002d4:	0800686c 	.word	0x0800686c
 80002d8:	08006880 	.word	0x08006880
 80002dc:	08000639 	.word	0x08000639
 80002e0:	2000003c 	.word	0x2000003c
 80002e4:	08006888 	.word	0x08006888
 80002e8:	0800689c 	.word	0x0800689c
 80002ec:	08000895 	.word	0x08000895
 80002f0:	20001a2c 	.word	0x20001a2c

080002f4 <system_init>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void system_init(void){
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0

	HAL_Init();
 80002f8:	f000 fffa 	bl	80012f0 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 80002fc:	f000 fbc6 	bl	8000a8c <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000300:	f000 fcba 	bl	8000c78 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000304:	f000 fc8e 	bl	8000c24 <MX_USART1_UART_Init>
	MX_ADC1_Init();
 8000308:	f000 fc10 	bl	8000b2c <MX_ADC1_Init>
	MX_ADC2_Init();
 800030c:	f000 fc4c 	bl	8000ba8 <MX_ADC2_Init>
	LCD_vidInit ();
 8000310:	f000 feba 	bl	8001088 <LCD_vidInit>
	HAL_UART_Transmit(&huart1, "system Started.....\n", 20, 1000);
 8000314:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000318:	2214      	movs	r2, #20
 800031a:	4903      	ldr	r1, [pc, #12]	; (8000328 <system_init+0x34>)
 800031c:	4803      	ldr	r0, [pc, #12]	; (800032c <system_init+0x38>)
 800031e:	f002 ff8e 	bl	800323e <HAL_UART_Transmit>


}
 8000322:	bf00      	nop
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	080068a8 	.word	0x080068a8
 800032c:	200019dc 	.word	0x200019dc

08000330 <T_Alarm>:



void T_Alarm(void*pvParam){
 8000330:	b580      	push	{r7, lr}
 8000332:	b084      	sub	sp, #16
 8000334:	af02      	add	r7, sp, #8
 8000336:	6078      	str	r0, [r7, #4]
	//	HAL_UART_Transmit(&huart1, "Asystem Started.....\n", 21, 1000);

	while(1){
		egBits=xEventGroupWaitBits(egSym, (E_Alarm|E_LED), 1, 0, portMAX_DELAY);
 8000338:	4b19      	ldr	r3, [pc, #100]	; (80003a0 <T_Alarm+0x70>)
 800033a:	6818      	ldr	r0, [r3, #0]
 800033c:	f04f 33ff 	mov.w	r3, #4294967295
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	2300      	movs	r3, #0
 8000344:	2201      	movs	r2, #1
 8000346:	f44f 7140 	mov.w	r1, #768	; 0x300
 800034a:	f003 f9cd 	bl	80036e8 <xEventGroupWaitBits>
 800034e:	4602      	mov	r2, r0
 8000350:	4b14      	ldr	r3, [pc, #80]	; (80003a4 <T_Alarm+0x74>)
 8000352:	601a      	str	r2, [r3, #0]
		if(((egBits& E_Alarm) == E_Alarm)){
 8000354:	4b13      	ldr	r3, [pc, #76]	; (80003a4 <T_Alarm+0x74>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800035c:	2b00      	cmp	r3, #0
 800035e:	d011      	beq.n	8000384 <T_Alarm+0x54>
			//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
			HAL_GPIO_WritePin( GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000360:	2201      	movs	r2, #1
 8000362:	2140      	movs	r1, #64	; 0x40
 8000364:	4810      	ldr	r0, [pc, #64]	; (80003a8 <T_Alarm+0x78>)
 8000366:	f001 fefd 	bl	8002164 <HAL_GPIO_WritePin>
			vTaskDelay(500);
 800036a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800036e:	f004 fbd9 	bl	8004b24 <vTaskDelay>
			HAL_GPIO_WritePin( GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000372:	2200      	movs	r2, #0
 8000374:	2140      	movs	r1, #64	; 0x40
 8000376:	480c      	ldr	r0, [pc, #48]	; (80003a8 <T_Alarm+0x78>)
 8000378:	f001 fef4 	bl	8002164 <HAL_GPIO_WritePin>
			vTaskDelay(500);
 800037c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000380:	f004 fbd0 	bl	8004b24 <vTaskDelay>
		}
		if(((egBits& E_LED) == E_LED)){
 8000384:	4b07      	ldr	r3, [pc, #28]	; (80003a4 <T_Alarm+0x74>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800038c:	2b00      	cmp	r3, #0
 800038e:	d0d3      	beq.n	8000338 <T_Alarm+0x8>
			//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
			HAL_GPIO_WritePin( GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000390:	2201      	movs	r2, #1
 8000392:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000396:	4804      	ldr	r0, [pc, #16]	; (80003a8 <T_Alarm+0x78>)
 8000398:	f001 fee4 	bl	8002164 <HAL_GPIO_WritePin>
		egBits=xEventGroupWaitBits(egSym, (E_Alarm|E_LED), 1, 0, portMAX_DELAY);
 800039c:	e7cc      	b.n	8000338 <T_Alarm+0x8>
 800039e:	bf00      	nop
 80003a0:	200019a0 	.word	0x200019a0
 80003a4:	20001a2c 	.word	0x20001a2c
 80003a8:	40010c00 	.word	0x40010c00

080003ac <T_TempSens>:


}


void T_TempSens(void*pvParam){
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, "Tsystem Started.....\n", 21, 1000);
 80003b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003b8:	2215      	movs	r2, #21
 80003ba:	4928      	ldr	r1, [pc, #160]	; (800045c <T_TempSens+0xb0>)
 80003bc:	4828      	ldr	r0, [pc, #160]	; (8000460 <T_TempSens+0xb4>)
 80003be:	f002 ff3e 	bl	800323e <HAL_UART_Transmit>
	//	flag = 1;

	while(1){

		// Start ADC Conversion
		HAL_ADC_Start(&hadc1);
 80003c2:	4828      	ldr	r0, [pc, #160]	; (8000464 <T_TempSens+0xb8>)
 80003c4:	f001 f8c0 	bl	8001548 <HAL_ADC_Start>
		HAL_ADC_Start(&hadc2);
 80003c8:	4827      	ldr	r0, [pc, #156]	; (8000468 <T_TempSens+0xbc>)
 80003ca:	f001 f8bd 	bl	8001548 <HAL_ADC_Start>
		// Poll ADC1 Perihperal & TimeOut = 1mSec
		HAL_ADC_PollForConversion(&hadc1, 1);
 80003ce:	2101      	movs	r1, #1
 80003d0:	4824      	ldr	r0, [pc, #144]	; (8000464 <T_TempSens+0xb8>)
 80003d2:	f001 f967 	bl	80016a4 <HAL_ADC_PollForConversion>
		HAL_ADC_PollForConversion(&hadc2, 1);
 80003d6:	2101      	movs	r1, #1
 80003d8:	4823      	ldr	r0, [pc, #140]	; (8000468 <T_TempSens+0xbc>)
 80003da:	f001 f963 	bl	80016a4 <HAL_ADC_PollForConversion>
		// Read The ADC Conversion Result
		AD_RES[0] = ((HAL_ADC_GetValue(&hadc1))*33) / 4096;
 80003de:	4821      	ldr	r0, [pc, #132]	; (8000464 <T_TempSens+0xb8>)
 80003e0:	f001 fa5a 	bl	8001898 <HAL_ADC_GetValue>
 80003e4:	4602      	mov	r2, r0
 80003e6:	4613      	mov	r3, r2
 80003e8:	015b      	lsls	r3, r3, #5
 80003ea:	4413      	add	r3, r2
 80003ec:	0b1b      	lsrs	r3, r3, #12
 80003ee:	b2da      	uxtb	r2, r3
 80003f0:	4b1e      	ldr	r3, [pc, #120]	; (800046c <T_TempSens+0xc0>)
 80003f2:	701a      	strb	r2, [r3, #0]
		AD_RES_ldr[0] = ((HAL_ADC_GetValue(&hadc2))*33) / 4096;
 80003f4:	481c      	ldr	r0, [pc, #112]	; (8000468 <T_TempSens+0xbc>)
 80003f6:	f001 fa4f 	bl	8001898 <HAL_ADC_GetValue>
 80003fa:	4602      	mov	r2, r0
 80003fc:	4613      	mov	r3, r2
 80003fe:	015b      	lsls	r3, r3, #5
 8000400:	4413      	add	r3, r2
 8000402:	0b1b      	lsrs	r3, r3, #12
 8000404:	b2da      	uxtb	r2, r3
 8000406:	4b1a      	ldr	r3, [pc, #104]	; (8000470 <T_TempSens+0xc4>)
 8000408:	701a      	strb	r2, [r3, #0]
		TAS.C = AD_RES[0];
 800040a:	4b18      	ldr	r3, [pc, #96]	; (800046c <T_TempSens+0xc0>)
 800040c:	781a      	ldrb	r2, [r3, #0]
 800040e:	4b19      	ldr	r3, [pc, #100]	; (8000474 <T_TempSens+0xc8>)
 8000410:	701a      	strb	r2, [r3, #0]
		TAS.L = AD_RES_ldr[0];
 8000412:	4b17      	ldr	r3, [pc, #92]	; (8000470 <T_TempSens+0xc4>)
 8000414:	781a      	ldrb	r2, [r3, #0]
 8000416:	4b17      	ldr	r3, [pc, #92]	; (8000474 <T_TempSens+0xc8>)
 8000418:	705a      	strb	r2, [r3, #1]

		if(TAS.SystemState == SSMain){
 800041a:	4b16      	ldr	r3, [pc, #88]	; (8000474 <T_TempSens+0xc8>)
 800041c:	795b      	ldrb	r3, [r3, #5]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d118      	bne.n	8000454 <T_TempSens+0xa8>
			egBits=xEventGroupSetBits(egSym, E4);
 8000422:	4b15      	ldr	r3, [pc, #84]	; (8000478 <T_TempSens+0xcc>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	2108      	movs	r1, #8
 8000428:	4618      	mov	r0, r3
 800042a:	f003 fa5d 	bl	80038e8 <xEventGroupSetBits>
 800042e:	4602      	mov	r2, r0
 8000430:	4b12      	ldr	r3, [pc, #72]	; (800047c <T_TempSens+0xd0>)
 8000432:	601a      	str	r2, [r3, #0]
			egBits=xEventGroupSetBits(egSym, E7);
 8000434:	4b10      	ldr	r3, [pc, #64]	; (8000478 <T_TempSens+0xcc>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	2140      	movs	r1, #64	; 0x40
 800043a:	4618      	mov	r0, r3
 800043c:	f003 fa54 	bl	80038e8 <xEventGroupSetBits>
 8000440:	4602      	mov	r2, r0
 8000442:	4b0e      	ldr	r3, [pc, #56]	; (800047c <T_TempSens+0xd0>)
 8000444:	601a      	str	r2, [r3, #0]
			xSemaphoreGive(bsUartRes);
 8000446:	4b0e      	ldr	r3, [pc, #56]	; (8000480 <T_TempSens+0xd4>)
 8000448:	6818      	ldr	r0, [r3, #0]
 800044a:	2300      	movs	r3, #0
 800044c:	2200      	movs	r2, #0
 800044e:	2100      	movs	r1, #0
 8000450:	f003 fcde 	bl	8003e10 <xQueueGenericSend>
		}
		else{

			//timeout
		}
		vTaskDelay(100);
 8000454:	2064      	movs	r0, #100	; 0x64
 8000456:	f004 fb65 	bl	8004b24 <vTaskDelay>
		HAL_ADC_Start(&hadc1);
 800045a:	e7b2      	b.n	80003c2 <T_TempSens+0x16>
 800045c:	080068c0 	.word	0x080068c0
 8000460:	200019dc 	.word	0x200019dc
 8000464:	200019a8 	.word	0x200019a8
 8000468:	20001970 	.word	0x20001970
 800046c:	2000196c 	.word	0x2000196c
 8000470:	20001a1c 	.word	0x20001a1c
 8000474:	20001a24 	.word	0x20001a24
 8000478:	200019a0 	.word	0x200019a0
 800047c:	20001a2c 	.word	0x20001a2c
 8000480:	20000040 	.word	0x20000040

08000484 <T_Check_TEMP>:

}



void T_Check_TEMP(void*pvParam){
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, "Csystem Started.....\n", 21, 1000);
 800048c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000490:	2215      	movs	r2, #21
 8000492:	4962      	ldr	r1, [pc, #392]	; (800061c <T_Check_TEMP+0x198>)
 8000494:	4862      	ldr	r0, [pc, #392]	; (8000620 <T_Check_TEMP+0x19c>)
 8000496:	f002 fed2 	bl	800323e <HAL_UART_Transmit>


	while(1){
		if(xSemaphoreTake(bsUartRes,portMAX_DELAY)){
 800049a:	4b62      	ldr	r3, [pc, #392]	; (8000624 <T_Check_TEMP+0x1a0>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	f04f 31ff 	mov.w	r1, #4294967295
 80004a2:	4618      	mov	r0, r3
 80004a4:	f003 ff1e 	bl	80042e4 <xQueueSemaphoreTake>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f000 80b2 	beq.w	8000614 <T_Check_TEMP+0x190>

			if(((TAS.SystemState == SSMain)||(TAS.SystemState == SSAlarm)) && ((TAS.C) >= (TAS.T)) && (TAS.AS == 'E')){
 80004b0:	4b5d      	ldr	r3, [pc, #372]	; (8000628 <T_Check_TEMP+0x1a4>)
 80004b2:	795b      	ldrb	r3, [r3, #5]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d003      	beq.n	80004c0 <T_Check_TEMP+0x3c>
 80004b8:	4b5b      	ldr	r3, [pc, #364]	; (8000628 <T_Check_TEMP+0x1a4>)
 80004ba:	795b      	ldrb	r3, [r3, #5]
 80004bc:	2b02      	cmp	r3, #2
 80004be:	d126      	bne.n	800050e <T_Check_TEMP+0x8a>
 80004c0:	4b59      	ldr	r3, [pc, #356]	; (8000628 <T_Check_TEMP+0x1a4>)
 80004c2:	781a      	ldrb	r2, [r3, #0]
 80004c4:	4b58      	ldr	r3, [pc, #352]	; (8000628 <T_Check_TEMP+0x1a4>)
 80004c6:	789b      	ldrb	r3, [r3, #2]
 80004c8:	429a      	cmp	r2, r3
 80004ca:	d320      	bcc.n	800050e <T_Check_TEMP+0x8a>
 80004cc:	4b56      	ldr	r3, [pc, #344]	; (8000628 <T_Check_TEMP+0x1a4>)
 80004ce:	791b      	ldrb	r3, [r3, #4]
 80004d0:	2b45      	cmp	r3, #69	; 0x45
 80004d2:	d11c      	bne.n	800050e <T_Check_TEMP+0x8a>
				TAS.SystemState = SSAlarm;
 80004d4:	4b54      	ldr	r3, [pc, #336]	; (8000628 <T_Check_TEMP+0x1a4>)
 80004d6:	2202      	movs	r2, #2
 80004d8:	715a      	strb	r2, [r3, #5]
				egBits=xEventGroupSetBits(egSym, E3);
 80004da:	4b54      	ldr	r3, [pc, #336]	; (800062c <T_Check_TEMP+0x1a8>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	2104      	movs	r1, #4
 80004e0:	4618      	mov	r0, r3
 80004e2:	f003 fa01 	bl	80038e8 <xEventGroupSetBits>
 80004e6:	4602      	mov	r2, r0
 80004e8:	4b51      	ldr	r3, [pc, #324]	; (8000630 <T_Check_TEMP+0x1ac>)
 80004ea:	601a      	str	r2, [r3, #0]
				egBits=xEventGroupSetBits(egSym, E_Alarm);
 80004ec:	4b4f      	ldr	r3, [pc, #316]	; (800062c <T_Check_TEMP+0x1a8>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004f4:	4618      	mov	r0, r3
 80004f6:	f003 f9f7 	bl	80038e8 <xEventGroupSetBits>
 80004fa:	4602      	mov	r2, r0
 80004fc:	4b4c      	ldr	r3, [pc, #304]	; (8000630 <T_Check_TEMP+0x1ac>)
 80004fe:	601a      	str	r2, [r3, #0]
				xSemaphoreGive(bsUartRes);
 8000500:	4b48      	ldr	r3, [pc, #288]	; (8000624 <T_Check_TEMP+0x1a0>)
 8000502:	6818      	ldr	r0, [r3, #0]
 8000504:	2300      	movs	r3, #0
 8000506:	2200      	movs	r2, #0
 8000508:	2100      	movs	r1, #0
 800050a:	f003 fc81 	bl	8003e10 <xQueueGenericSend>

			}
			if(((TAS.SystemState == SSAlarm)) && (((TAS.C) < (TAS.T)) || (TAS.AS == 'D'))){
 800050e:	4b46      	ldr	r3, [pc, #280]	; (8000628 <T_Check_TEMP+0x1a4>)
 8000510:	795b      	ldrb	r3, [r3, #5]
 8000512:	2b02      	cmp	r3, #2
 8000514:	d126      	bne.n	8000564 <T_Check_TEMP+0xe0>
 8000516:	4b44      	ldr	r3, [pc, #272]	; (8000628 <T_Check_TEMP+0x1a4>)
 8000518:	781a      	ldrb	r2, [r3, #0]
 800051a:	4b43      	ldr	r3, [pc, #268]	; (8000628 <T_Check_TEMP+0x1a4>)
 800051c:	789b      	ldrb	r3, [r3, #2]
 800051e:	429a      	cmp	r2, r3
 8000520:	d303      	bcc.n	800052a <T_Check_TEMP+0xa6>
 8000522:	4b41      	ldr	r3, [pc, #260]	; (8000628 <T_Check_TEMP+0x1a4>)
 8000524:	791b      	ldrb	r3, [r3, #4]
 8000526:	2b44      	cmp	r3, #68	; 0x44
 8000528:	d11c      	bne.n	8000564 <T_Check_TEMP+0xe0>
				egBits=xEventGroupClearBits(egSym, E_Alarm);
 800052a:	4b40      	ldr	r3, [pc, #256]	; (800062c <T_Check_TEMP+0x1a8>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000532:	4618      	mov	r0, r3
 8000534:	f003 f9a2 	bl	800387c <xEventGroupClearBits>
 8000538:	4602      	mov	r2, r0
 800053a:	4b3d      	ldr	r3, [pc, #244]	; (8000630 <T_Check_TEMP+0x1ac>)
 800053c:	601a      	str	r2, [r3, #0]
				TAS.SystemState = SSMain;
 800053e:	4b3a      	ldr	r3, [pc, #232]	; (8000628 <T_Check_TEMP+0x1a4>)
 8000540:	2200      	movs	r2, #0
 8000542:	715a      	strb	r2, [r3, #5]
				egBits=xEventGroupSetBits(egSym, E1|E4|E5|E6|E7);
 8000544:	4b39      	ldr	r3, [pc, #228]	; (800062c <T_Check_TEMP+0x1a8>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	2179      	movs	r1, #121	; 0x79
 800054a:	4618      	mov	r0, r3
 800054c:	f003 f9cc 	bl	80038e8 <xEventGroupSetBits>
 8000550:	4602      	mov	r2, r0
 8000552:	4b37      	ldr	r3, [pc, #220]	; (8000630 <T_Check_TEMP+0x1ac>)
 8000554:	601a      	str	r2, [r3, #0]
				xSemaphoreGive(bsUartRes);
 8000556:	4b33      	ldr	r3, [pc, #204]	; (8000624 <T_Check_TEMP+0x1a0>)
 8000558:	6818      	ldr	r0, [r3, #0]
 800055a:	2300      	movs	r3, #0
 800055c:	2200      	movs	r2, #0
 800055e:	2100      	movs	r1, #0
 8000560:	f003 fc56 	bl	8003e10 <xQueueGenericSend>

			}
			if(((TAS.SystemState == SSMain)||(TAS.SystemState == SSLED_ON)) && ((TAS.L) >= (TAS.I))){
 8000564:	4b30      	ldr	r3, [pc, #192]	; (8000628 <T_Check_TEMP+0x1a4>)
 8000566:	795b      	ldrb	r3, [r3, #5]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d003      	beq.n	8000574 <T_Check_TEMP+0xf0>
 800056c:	4b2e      	ldr	r3, [pc, #184]	; (8000628 <T_Check_TEMP+0x1a4>)
 800056e:	795b      	ldrb	r3, [r3, #5]
 8000570:	2b03      	cmp	r3, #3
 8000572:	d122      	bne.n	80005ba <T_Check_TEMP+0x136>
 8000574:	4b2c      	ldr	r3, [pc, #176]	; (8000628 <T_Check_TEMP+0x1a4>)
 8000576:	785a      	ldrb	r2, [r3, #1]
 8000578:	4b2b      	ldr	r3, [pc, #172]	; (8000628 <T_Check_TEMP+0x1a4>)
 800057a:	78db      	ldrb	r3, [r3, #3]
 800057c:	429a      	cmp	r2, r3
 800057e:	d31c      	bcc.n	80005ba <T_Check_TEMP+0x136>
				TAS.SystemState = SSLED_ON;
 8000580:	4b29      	ldr	r3, [pc, #164]	; (8000628 <T_Check_TEMP+0x1a4>)
 8000582:	2203      	movs	r2, #3
 8000584:	715a      	strb	r2, [r3, #5]

				egBits=xEventGroupSetBits(egSym, E8);
 8000586:	4b29      	ldr	r3, [pc, #164]	; (800062c <T_Check_TEMP+0x1a8>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	2180      	movs	r1, #128	; 0x80
 800058c:	4618      	mov	r0, r3
 800058e:	f003 f9ab 	bl	80038e8 <xEventGroupSetBits>
 8000592:	4602      	mov	r2, r0
 8000594:	4b26      	ldr	r3, [pc, #152]	; (8000630 <T_Check_TEMP+0x1ac>)
 8000596:	601a      	str	r2, [r3, #0]
				egBits=xEventGroupSetBits(egSym, E_LED);
 8000598:	4b24      	ldr	r3, [pc, #144]	; (800062c <T_Check_TEMP+0x1a8>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005a0:	4618      	mov	r0, r3
 80005a2:	f003 f9a1 	bl	80038e8 <xEventGroupSetBits>
 80005a6:	4602      	mov	r2, r0
 80005a8:	4b21      	ldr	r3, [pc, #132]	; (8000630 <T_Check_TEMP+0x1ac>)
 80005aa:	601a      	str	r2, [r3, #0]
				xSemaphoreGive(bsUartRes);
 80005ac:	4b1d      	ldr	r3, [pc, #116]	; (8000624 <T_Check_TEMP+0x1a0>)
 80005ae:	6818      	ldr	r0, [r3, #0]
 80005b0:	2300      	movs	r3, #0
 80005b2:	2200      	movs	r2, #0
 80005b4:	2100      	movs	r1, #0
 80005b6:	f003 fc2b 	bl	8003e10 <xQueueGenericSend>
			}
			if(((TAS.SystemState == SSLED_ON)) && ((TAS.L) < (TAS.I))){
 80005ba:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <T_Check_TEMP+0x1a4>)
 80005bc:	795b      	ldrb	r3, [r3, #5]
 80005be:	2b03      	cmp	r3, #3
 80005c0:	d128      	bne.n	8000614 <T_Check_TEMP+0x190>
 80005c2:	4b19      	ldr	r3, [pc, #100]	; (8000628 <T_Check_TEMP+0x1a4>)
 80005c4:	785a      	ldrb	r2, [r3, #1]
 80005c6:	4b18      	ldr	r3, [pc, #96]	; (8000628 <T_Check_TEMP+0x1a4>)
 80005c8:	78db      	ldrb	r3, [r3, #3]
 80005ca:	429a      	cmp	r2, r3
 80005cc:	d222      	bcs.n	8000614 <T_Check_TEMP+0x190>
				HAL_GPIO_WritePin( GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005d4:	4817      	ldr	r0, [pc, #92]	; (8000634 <T_Check_TEMP+0x1b0>)
 80005d6:	f001 fdc5 	bl	8002164 <HAL_GPIO_WritePin>
				egBits=xEventGroupClearBits(egSym, E_LED);
 80005da:	4b14      	ldr	r3, [pc, #80]	; (800062c <T_Check_TEMP+0x1a8>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005e2:	4618      	mov	r0, r3
 80005e4:	f003 f94a 	bl	800387c <xEventGroupClearBits>
 80005e8:	4602      	mov	r2, r0
 80005ea:	4b11      	ldr	r3, [pc, #68]	; (8000630 <T_Check_TEMP+0x1ac>)
 80005ec:	601a      	str	r2, [r3, #0]
				//egBits=xEventGroupClearBits(egSym, E8);
				TAS.SystemState = SSMain;
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <T_Check_TEMP+0x1a4>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	715a      	strb	r2, [r3, #5]


				egBits=xEventGroupSetBits(egSym, E1|E4|E5|E6|E7);
 80005f4:	4b0d      	ldr	r3, [pc, #52]	; (800062c <T_Check_TEMP+0x1a8>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2179      	movs	r1, #121	; 0x79
 80005fa:	4618      	mov	r0, r3
 80005fc:	f003 f974 	bl	80038e8 <xEventGroupSetBits>
 8000600:	4602      	mov	r2, r0
 8000602:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <T_Check_TEMP+0x1ac>)
 8000604:	601a      	str	r2, [r3, #0]
				xSemaphoreGive(bsUartRes);
 8000606:	4b07      	ldr	r3, [pc, #28]	; (8000624 <T_Check_TEMP+0x1a0>)
 8000608:	6818      	ldr	r0, [r3, #0]
 800060a:	2300      	movs	r3, #0
 800060c:	2200      	movs	r2, #0
 800060e:	2100      	movs	r1, #0
 8000610:	f003 fbfe 	bl	8003e10 <xQueueGenericSend>
			}


		}
		vTaskDelay(100);
 8000614:	2064      	movs	r0, #100	; 0x64
 8000616:	f004 fa85 	bl	8004b24 <vTaskDelay>
		if(xSemaphoreTake(bsUartRes,portMAX_DELAY)){
 800061a:	e73e      	b.n	800049a <T_Check_TEMP+0x16>
 800061c:	080068d8 	.word	0x080068d8
 8000620:	200019dc 	.word	0x200019dc
 8000624:	20000040 	.word	0x20000040
 8000628:	20001a24 	.word	0x20001a24
 800062c:	200019a0 	.word	0x200019a0
 8000630:	20001a2c 	.word	0x20001a2c
 8000634:	40010c00 	.word	0x40010c00

08000638 <T_Display>:
	}

}


void T_Display(void*pvParam){
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af02      	add	r7, sp, #8
 800063e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, "Dsystem Started.....\n", 21, 1000);
 8000640:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000644:	2215      	movs	r2, #21
 8000646:	4983      	ldr	r1, [pc, #524]	; (8000854 <T_Display+0x21c>)
 8000648:	4883      	ldr	r0, [pc, #524]	; (8000858 <T_Display+0x220>)
 800064a:	f002 fdf8 	bl	800323e <HAL_UART_Transmit>

	while(1){
		egBits=xEventGroupWaitBits(egSym, (E1|E2|E3|E4|E5|E6|E7|E8), 1, 0, portMAX_DELAY);
 800064e:	4b83      	ldr	r3, [pc, #524]	; (800085c <T_Display+0x224>)
 8000650:	6818      	ldr	r0, [r3, #0]
 8000652:	f04f 33ff 	mov.w	r3, #4294967295
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	2300      	movs	r3, #0
 800065a:	2201      	movs	r2, #1
 800065c:	21ff      	movs	r1, #255	; 0xff
 800065e:	f003 f843 	bl	80036e8 <xEventGroupWaitBits>
 8000662:	4602      	mov	r2, r0
 8000664:	4b7e      	ldr	r3, [pc, #504]	; (8000860 <T_Display+0x228>)
 8000666:	601a      	str	r2, [r3, #0]
		if(((egBits& E1) == E1)){
 8000668:	4b7d      	ldr	r3, [pc, #500]	; (8000860 <T_Display+0x228>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f003 0301 	and.w	r3, r3, #1
 8000670:	2b00      	cmp	r3, #0
 8000672:	d012      	beq.n	800069a <T_Display+0x62>
			//	LCD_vidClear( );
			LCD_vidGotoXY( 1 , '\0' );
 8000674:	2100      	movs	r1, #0
 8000676:	2001      	movs	r0, #1
 8000678:	f000 fe00 	bl	800127c <LCD_vidGotoXY>
			LCD_vidWriteString("C:00  T:20  AS:E ");
 800067c:	4879      	ldr	r0, [pc, #484]	; (8000864 <T_Display+0x22c>)
 800067e:	f000 fe1c 	bl	80012ba <LCD_vidWriteString>
			LCD_vidGotoXY( 1 , 8 );
 8000682:	2108      	movs	r1, #8
 8000684:	2001      	movs	r0, #1
 8000686:	f000 fdf9 	bl	800127c <LCD_vidGotoXY>
			/*itoa((TAS.T)/10,SHOWTRSH,10);
			LCD_vidWriteString(SHOWTRSH);
			itoa((TAS.T)%10,SHOWTRSH,10);
			LCD_vidWriteString(TAS.T);*/
			LCD_vidGotoXY( 2 , '\0' );
 800068a:	2100      	movs	r1, #0
 800068c:	2002      	movs	r0, #2
 800068e:	f000 fdf5 	bl	800127c <LCD_vidGotoXY>
			LCD_vidWriteString("L:00 I:30 PR:C/T");
 8000692:	4875      	ldr	r0, [pc, #468]	; (8000868 <T_Display+0x230>)
 8000694:	f000 fe11 	bl	80012ba <LCD_vidWriteString>
 8000698:	e7d9      	b.n	800064e <T_Display+0x16>

		}

		else if(((egBits& E2) == E2)){
 800069a:	4b71      	ldr	r3, [pc, #452]	; (8000860 <T_Display+0x228>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	f003 0302 	and.w	r3, r3, #2
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d00e      	beq.n	80006c4 <T_Display+0x8c>
			//	LCD_vidClear( );
			LCD_vidGotoXY( 1 , '\0' );
 80006a6:	2100      	movs	r1, #0
 80006a8:	2001      	movs	r0, #1
 80006aa:	f000 fde7 	bl	800127c <LCD_vidGotoXY>
			LCD_vidWriteString("      T:00       ");
 80006ae:	486f      	ldr	r0, [pc, #444]	; (800086c <T_Display+0x234>)
 80006b0:	f000 fe03 	bl	80012ba <LCD_vidWriteString>
			LCD_vidGotoXY( 2 , '\0' );
 80006b4:	2100      	movs	r1, #0
 80006b6:	2002      	movs	r0, #2
 80006b8:	f000 fde0 	bl	800127c <LCD_vidGotoXY>
			LCD_vidWriteString("   OK:K     CN:N    ");
 80006bc:	486c      	ldr	r0, [pc, #432]	; (8000870 <T_Display+0x238>)
 80006be:	f000 fdfc 	bl	80012ba <LCD_vidWriteString>
 80006c2:	e7c4      	b.n	800064e <T_Display+0x16>
		}
		else if(((egBits& E3) == E3)){
 80006c4:	4b66      	ldr	r3, [pc, #408]	; (8000860 <T_Display+0x228>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f003 0304 	and.w	r3, r3, #4
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d00e      	beq.n	80006ee <T_Display+0xb6>
			LCD_vidGotoXY( 1 , '\0' );
 80006d0:	2100      	movs	r1, #0
 80006d2:	2001      	movs	r0, #1
 80006d4:	f000 fdd2 	bl	800127c <LCD_vidGotoXY>
			LCD_vidWriteString("  !!!!Alarm!!!!  ");
 80006d8:	4866      	ldr	r0, [pc, #408]	; (8000874 <T_Display+0x23c>)
 80006da:	f000 fdee 	bl	80012ba <LCD_vidWriteString>
			LCD_vidGotoXY( 2 , '\0' );
 80006de:	2100      	movs	r1, #0
 80006e0:	2002      	movs	r0, #2
 80006e2:	f000 fdcb 	bl	800127c <LCD_vidGotoXY>
			LCD_vidWriteString("      SA:S      ");
 80006e6:	4864      	ldr	r0, [pc, #400]	; (8000878 <T_Display+0x240>)
 80006e8:	f000 fde7 	bl	80012ba <LCD_vidWriteString>
 80006ec:	e7af      	b.n	800064e <T_Display+0x16>
		}
		else if(((egBits& E4) == E4)){
 80006ee:	4b5c      	ldr	r3, [pc, #368]	; (8000860 <T_Display+0x228>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d027      	beq.n	800074a <T_Display+0x112>
			LCD_vidGotoXY( 1 , 2 );
 80006fa:	2102      	movs	r1, #2
 80006fc:	2001      	movs	r0, #1
 80006fe:	f000 fdbd 	bl	800127c <LCD_vidGotoXY>
			itoa((TAS.C)/10,SHOWPOT,10);
 8000702:	4b5e      	ldr	r3, [pc, #376]	; (800087c <T_Display+0x244>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	4a5e      	ldr	r2, [pc, #376]	; (8000880 <T_Display+0x248>)
 8000708:	fba2 2303 	umull	r2, r3, r2, r3
 800070c:	08db      	lsrs	r3, r3, #3
 800070e:	b2db      	uxtb	r3, r3
 8000710:	220a      	movs	r2, #10
 8000712:	495c      	ldr	r1, [pc, #368]	; (8000884 <T_Display+0x24c>)
 8000714:	4618      	mov	r0, r3
 8000716:	f006 f805 	bl	8006724 <itoa>
			LCD_vidWriteString(SHOWPOT);
 800071a:	485a      	ldr	r0, [pc, #360]	; (8000884 <T_Display+0x24c>)
 800071c:	f000 fdcd 	bl	80012ba <LCD_vidWriteString>
			itoa((TAS.C)%10,SHOWPOT,10);
 8000720:	4b56      	ldr	r3, [pc, #344]	; (800087c <T_Display+0x244>)
 8000722:	781a      	ldrb	r2, [r3, #0]
 8000724:	4b56      	ldr	r3, [pc, #344]	; (8000880 <T_Display+0x248>)
 8000726:	fba3 1302 	umull	r1, r3, r3, r2
 800072a:	08d9      	lsrs	r1, r3, #3
 800072c:	460b      	mov	r3, r1
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	440b      	add	r3, r1
 8000732:	005b      	lsls	r3, r3, #1
 8000734:	1ad3      	subs	r3, r2, r3
 8000736:	b2db      	uxtb	r3, r3
 8000738:	220a      	movs	r2, #10
 800073a:	4952      	ldr	r1, [pc, #328]	; (8000884 <T_Display+0x24c>)
 800073c:	4618      	mov	r0, r3
 800073e:	f005 fff1 	bl	8006724 <itoa>
			LCD_vidWriteString(SHOWPOT);
 8000742:	4850      	ldr	r0, [pc, #320]	; (8000884 <T_Display+0x24c>)
 8000744:	f000 fdb9 	bl	80012ba <LCD_vidWriteString>
 8000748:	e781      	b.n	800064e <T_Display+0x16>

		}
		else if(((egBits& E5) == E5)){
 800074a:	4b45      	ldr	r3, [pc, #276]	; (8000860 <T_Display+0x228>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f003 0310 	and.w	r3, r3, #16
 8000752:	2b00      	cmp	r3, #0
 8000754:	d029      	beq.n	80007aa <T_Display+0x172>
			LCD_vidGotoXY( 1 , 8 );
 8000756:	2108      	movs	r1, #8
 8000758:	2001      	movs	r0, #1
 800075a:	f000 fd8f 	bl	800127c <LCD_vidGotoXY>
			itoa((TAS.T)/10,SHOWTRSH,10);
 800075e:	4b47      	ldr	r3, [pc, #284]	; (800087c <T_Display+0x244>)
 8000760:	789b      	ldrb	r3, [r3, #2]
 8000762:	4a47      	ldr	r2, [pc, #284]	; (8000880 <T_Display+0x248>)
 8000764:	fba2 2303 	umull	r2, r3, r2, r3
 8000768:	08db      	lsrs	r3, r3, #3
 800076a:	b2db      	uxtb	r3, r3
 800076c:	220a      	movs	r2, #10
 800076e:	4946      	ldr	r1, [pc, #280]	; (8000888 <T_Display+0x250>)
 8000770:	4618      	mov	r0, r3
 8000772:	f005 ffd7 	bl	8006724 <itoa>
			LCD_vidWriteString(SHOWTRSH);
 8000776:	4844      	ldr	r0, [pc, #272]	; (8000888 <T_Display+0x250>)
 8000778:	f000 fd9f 	bl	80012ba <LCD_vidWriteString>
			itoa((TAS.T)%10,SHOWTRSH,10);
 800077c:	4b3f      	ldr	r3, [pc, #252]	; (800087c <T_Display+0x244>)
 800077e:	789a      	ldrb	r2, [r3, #2]
 8000780:	4b3f      	ldr	r3, [pc, #252]	; (8000880 <T_Display+0x248>)
 8000782:	fba3 1302 	umull	r1, r3, r3, r2
 8000786:	08d9      	lsrs	r1, r3, #3
 8000788:	460b      	mov	r3, r1
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	440b      	add	r3, r1
 800078e:	005b      	lsls	r3, r3, #1
 8000790:	1ad3      	subs	r3, r2, r3
 8000792:	b2db      	uxtb	r3, r3
 8000794:	220a      	movs	r2, #10
 8000796:	493c      	ldr	r1, [pc, #240]	; (8000888 <T_Display+0x250>)
 8000798:	4618      	mov	r0, r3
 800079a:	f005 ffc3 	bl	8006724 <itoa>
			LCD_vidWriteString(TAS.T);
 800079e:	4b37      	ldr	r3, [pc, #220]	; (800087c <T_Display+0x244>)
 80007a0:	789b      	ldrb	r3, [r3, #2]
 80007a2:	4618      	mov	r0, r3
 80007a4:	f000 fd89 	bl	80012ba <LCD_vidWriteString>
 80007a8:	e751      	b.n	800064e <T_Display+0x16>

		}
		else if(((egBits& E6) == E6)){
 80007aa:	4b2d      	ldr	r3, [pc, #180]	; (8000860 <T_Display+0x228>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f003 0320 	and.w	r3, r3, #32
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d009      	beq.n	80007ca <T_Display+0x192>
			LCD_vidGotoXY( 1 , 15 );
 80007b6:	210f      	movs	r1, #15
 80007b8:	2001      	movs	r0, #1
 80007ba:	f000 fd5f 	bl	800127c <LCD_vidGotoXY>
			LCD_vidWriteChar(TAS.AS);
 80007be:	4b2f      	ldr	r3, [pc, #188]	; (800087c <T_Display+0x244>)
 80007c0:	791b      	ldrb	r3, [r3, #4]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 fc9c 	bl	8001100 <LCD_vidWriteChar>
 80007c8:	e741      	b.n	800064e <T_Display+0x16>

		}
		else if(((egBits& E7) == E7)){
 80007ca:	4b25      	ldr	r3, [pc, #148]	; (8000860 <T_Display+0x228>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d027      	beq.n	8000826 <T_Display+0x1ee>
			LCD_vidGotoXY( 2 , 2 );
 80007d6:	2102      	movs	r1, #2
 80007d8:	2002      	movs	r0, #2
 80007da:	f000 fd4f 	bl	800127c <LCD_vidGotoXY>
			itoa((TAS.L)/10,SHOWLDR,10);
 80007de:	4b27      	ldr	r3, [pc, #156]	; (800087c <T_Display+0x244>)
 80007e0:	785b      	ldrb	r3, [r3, #1]
 80007e2:	4a27      	ldr	r2, [pc, #156]	; (8000880 <T_Display+0x248>)
 80007e4:	fba2 2303 	umull	r2, r3, r2, r3
 80007e8:	08db      	lsrs	r3, r3, #3
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	220a      	movs	r2, #10
 80007ee:	4927      	ldr	r1, [pc, #156]	; (800088c <T_Display+0x254>)
 80007f0:	4618      	mov	r0, r3
 80007f2:	f005 ff97 	bl	8006724 <itoa>
			LCD_vidWriteString(SHOWLDR);
 80007f6:	4825      	ldr	r0, [pc, #148]	; (800088c <T_Display+0x254>)
 80007f8:	f000 fd5f 	bl	80012ba <LCD_vidWriteString>
			itoa((TAS.L)%10,SHOWPOT,10);
 80007fc:	4b1f      	ldr	r3, [pc, #124]	; (800087c <T_Display+0x244>)
 80007fe:	785a      	ldrb	r2, [r3, #1]
 8000800:	4b1f      	ldr	r3, [pc, #124]	; (8000880 <T_Display+0x248>)
 8000802:	fba3 1302 	umull	r1, r3, r3, r2
 8000806:	08d9      	lsrs	r1, r3, #3
 8000808:	460b      	mov	r3, r1
 800080a:	009b      	lsls	r3, r3, #2
 800080c:	440b      	add	r3, r1
 800080e:	005b      	lsls	r3, r3, #1
 8000810:	1ad3      	subs	r3, r2, r3
 8000812:	b2db      	uxtb	r3, r3
 8000814:	220a      	movs	r2, #10
 8000816:	491b      	ldr	r1, [pc, #108]	; (8000884 <T_Display+0x24c>)
 8000818:	4618      	mov	r0, r3
 800081a:	f005 ff83 	bl	8006724 <itoa>
			LCD_vidWriteString(SHOWLDR);
 800081e:	481b      	ldr	r0, [pc, #108]	; (800088c <T_Display+0x254>)
 8000820:	f000 fd4b 	bl	80012ba <LCD_vidWriteString>
 8000824:	e713      	b.n	800064e <T_Display+0x16>


		}
		else if(((egBits& E8) == E8)){
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <T_Display+0x228>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800082e:	2b00      	cmp	r3, #0
 8000830:	f43f af0d 	beq.w	800064e <T_Display+0x16>
			//

			LCD_vidGotoXY( 1 , '\0' );
 8000834:	2100      	movs	r1, #0
 8000836:	2001      	movs	r0, #1
 8000838:	f000 fd20 	bl	800127c <LCD_vidGotoXY>
			LCD_vidWriteString("   LIGHT ON !       ");
 800083c:	4814      	ldr	r0, [pc, #80]	; (8000890 <T_Display+0x258>)
 800083e:	f000 fd3c 	bl	80012ba <LCD_vidWriteString>
			LCD_vidGotoXY( 2 , '\0' );
 8000842:	2100      	movs	r1, #0
 8000844:	2002      	movs	r0, #2
 8000846:	f000 fd19 	bl	800127c <LCD_vidGotoXY>
			LCD_vidWriteString("   LIGHT ON !       ");
 800084a:	4811      	ldr	r0, [pc, #68]	; (8000890 <T_Display+0x258>)
 800084c:	f000 fd35 	bl	80012ba <LCD_vidWriteString>
		egBits=xEventGroupWaitBits(egSym, (E1|E2|E3|E4|E5|E6|E7|E8), 1, 0, portMAX_DELAY);
 8000850:	e6fd      	b.n	800064e <T_Display+0x16>
 8000852:	bf00      	nop
 8000854:	080068f0 	.word	0x080068f0
 8000858:	200019dc 	.word	0x200019dc
 800085c:	200019a0 	.word	0x200019a0
 8000860:	20001a2c 	.word	0x20001a2c
 8000864:	08006908 	.word	0x08006908
 8000868:	0800691c 	.word	0x0800691c
 800086c:	08006930 	.word	0x08006930
 8000870:	08006944 	.word	0x08006944
 8000874:	0800695c 	.word	0x0800695c
 8000878:	08006970 	.word	0x08006970
 800087c:	20001a24 	.word	0x20001a24
 8000880:	cccccccd 	.word	0xcccccccd
 8000884:	200019a4 	.word	0x200019a4
 8000888:	20001a20 	.word	0x20001a20
 800088c:	200019d8 	.word	0x200019d8
 8000890:	08006984 	.word	0x08006984

08000894 <T_UserTerm>:
		}
	}

}

void T_UserTerm(void*pvParam){
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart1, "Usystem Started.....\n", 21, 1000);
 800089c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008a0:	2215      	movs	r2, #21
 80008a2:	4971      	ldr	r1, [pc, #452]	; (8000a68 <T_UserTerm+0x1d4>)
 80008a4:	4871      	ldr	r0, [pc, #452]	; (8000a6c <T_UserTerm+0x1d8>)
 80008a6:	f002 fcca 	bl	800323e <HAL_UART_Transmit>
	//uint8_t count=0;

	while(1){
		HAL_UART_Receive( &huart1, buff, 2, 200);
 80008aa:	23c8      	movs	r3, #200	; 0xc8
 80008ac:	2202      	movs	r2, #2
 80008ae:	4970      	ldr	r1, [pc, #448]	; (8000a70 <T_UserTerm+0x1dc>)
 80008b0:	486e      	ldr	r0, [pc, #440]	; (8000a6c <T_UserTerm+0x1d8>)
 80008b2:	f002 fd56 	bl	8003362 <HAL_UART_Receive>

		if((TAS.SystemState==SSMain)){
 80008b6:	4b6f      	ldr	r3, [pc, #444]	; (8000a74 <T_UserTerm+0x1e0>)
 80008b8:	795b      	ldrb	r3, [r3, #5]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d152      	bne.n	8000964 <T_UserTerm+0xd0>
			switch(*buff){
 80008be:	4b6c      	ldr	r3, [pc, #432]	; (8000a70 <T_UserTerm+0x1dc>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	2b43      	cmp	r3, #67	; 0x43
 80008c4:	d002      	beq.n	80008cc <T_UserTerm+0x38>
 80008c6:	2b54      	cmp	r3, #84	; 0x54
 80008c8:	d012      	beq.n	80008f0 <T_UserTerm+0x5c>
 80008ca:	e04b      	b.n	8000964 <T_UserTerm+0xd0>
			case 'C': egBits=xEventGroupSetBits(egSym, E2);
 80008cc:	4b6a      	ldr	r3, [pc, #424]	; (8000a78 <T_UserTerm+0x1e4>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2102      	movs	r1, #2
 80008d2:	4618      	mov	r0, r3
 80008d4:	f003 f808 	bl	80038e8 <xEventGroupSetBits>
 80008d8:	4602      	mov	r2, r0
 80008da:	4b68      	ldr	r3, [pc, #416]	; (8000a7c <T_UserTerm+0x1e8>)
 80008dc:	601a      	str	r2, [r3, #0]
			TAS.SystemState=SSConfig;
 80008de:	4b65      	ldr	r3, [pc, #404]	; (8000a74 <T_UserTerm+0x1e0>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	715a      	strb	r2, [r3, #5]
			memset(buff, 0, sizeof buff);
 80008e4:	2204      	movs	r2, #4
 80008e6:	2100      	movs	r1, #0
 80008e8:	4861      	ldr	r0, [pc, #388]	; (8000a70 <T_UserTerm+0x1dc>)
 80008ea:	f005 ff28 	bl	800673e <memset>
			break;
 80008ee:	e039      	b.n	8000964 <T_UserTerm+0xd0>

			case 'T':if((TAS.AS=='E')){
 80008f0:	4b60      	ldr	r3, [pc, #384]	; (8000a74 <T_UserTerm+0x1e0>)
 80008f2:	791b      	ldrb	r3, [r3, #4]
 80008f4:	2b45      	cmp	r3, #69	; 0x45
 80008f6:	d118      	bne.n	800092a <T_UserTerm+0x96>
				TAS.AS='D';
 80008f8:	4b5e      	ldr	r3, [pc, #376]	; (8000a74 <T_UserTerm+0x1e0>)
 80008fa:	2244      	movs	r2, #68	; 0x44
 80008fc:	711a      	strb	r2, [r3, #4]
				egBits=xEventGroupSetBits(egSym, E6);
 80008fe:	4b5e      	ldr	r3, [pc, #376]	; (8000a78 <T_UserTerm+0x1e4>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	2120      	movs	r1, #32
 8000904:	4618      	mov	r0, r3
 8000906:	f002 ffef 	bl	80038e8 <xEventGroupSetBits>
 800090a:	4602      	mov	r2, r0
 800090c:	4b5b      	ldr	r3, [pc, #364]	; (8000a7c <T_UserTerm+0x1e8>)
 800090e:	601a      	str	r2, [r3, #0]
				xSemaphoreGive(bsUartRes);
 8000910:	4b5b      	ldr	r3, [pc, #364]	; (8000a80 <T_UserTerm+0x1ec>)
 8000912:	6818      	ldr	r0, [r3, #0]
 8000914:	2300      	movs	r3, #0
 8000916:	2200      	movs	r2, #0
 8000918:	2100      	movs	r1, #0
 800091a:	f003 fa79 	bl	8003e10 <xQueueGenericSend>
				memset(buff, 0, sizeof buff);
 800091e:	2204      	movs	r2, #4
 8000920:	2100      	movs	r1, #0
 8000922:	4853      	ldr	r0, [pc, #332]	; (8000a70 <T_UserTerm+0x1dc>)
 8000924:	f005 ff0b 	bl	800673e <memset>
				break;
 8000928:	e01c      	b.n	8000964 <T_UserTerm+0xd0>
			}else if((TAS.AS=='D')){
 800092a:	4b52      	ldr	r3, [pc, #328]	; (8000a74 <T_UserTerm+0x1e0>)
 800092c:	791b      	ldrb	r3, [r3, #4]
 800092e:	2b44      	cmp	r3, #68	; 0x44
 8000930:	d118      	bne.n	8000964 <T_UserTerm+0xd0>
				TAS.AS='E';
 8000932:	4b50      	ldr	r3, [pc, #320]	; (8000a74 <T_UserTerm+0x1e0>)
 8000934:	2245      	movs	r2, #69	; 0x45
 8000936:	711a      	strb	r2, [r3, #4]
				egBits=xEventGroupSetBits(egSym, E6);
 8000938:	4b4f      	ldr	r3, [pc, #316]	; (8000a78 <T_UserTerm+0x1e4>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2120      	movs	r1, #32
 800093e:	4618      	mov	r0, r3
 8000940:	f002 ffd2 	bl	80038e8 <xEventGroupSetBits>
 8000944:	4602      	mov	r2, r0
 8000946:	4b4d      	ldr	r3, [pc, #308]	; (8000a7c <T_UserTerm+0x1e8>)
 8000948:	601a      	str	r2, [r3, #0]
				xSemaphoreGive(bsUartRes);
 800094a:	4b4d      	ldr	r3, [pc, #308]	; (8000a80 <T_UserTerm+0x1ec>)
 800094c:	6818      	ldr	r0, [r3, #0]
 800094e:	2300      	movs	r3, #0
 8000950:	2200      	movs	r2, #0
 8000952:	2100      	movs	r1, #0
 8000954:	f003 fa5c 	bl	8003e10 <xQueueGenericSend>
				memset(buff, 0, sizeof buff);
 8000958:	2204      	movs	r2, #4
 800095a:	2100      	movs	r1, #0
 800095c:	4844      	ldr	r0, [pc, #272]	; (8000a70 <T_UserTerm+0x1dc>)
 800095e:	f005 feee 	bl	800673e <memset>
				break;
 8000962:	bf00      	nop

			default:;
			}
		}

		if((TAS.SystemState==SSConfig)){
 8000964:	4b43      	ldr	r3, [pc, #268]	; (8000a74 <T_UserTerm+0x1e0>)
 8000966:	795b      	ldrb	r3, [r3, #5]
 8000968:	2b01      	cmp	r3, #1
 800096a:	d161      	bne.n	8000a30 <T_UserTerm+0x19c>

			if((buff[count] >= '0' && buff[count] <= '9')&&count<3){
 800096c:	4b45      	ldr	r3, [pc, #276]	; (8000a84 <T_UserTerm+0x1f0>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	461a      	mov	r2, r3
 8000972:	4b3f      	ldr	r3, [pc, #252]	; (8000a70 <T_UserTerm+0x1dc>)
 8000974:	5c9b      	ldrb	r3, [r3, r2]
 8000976:	2b2f      	cmp	r3, #47	; 0x2f
 8000978:	d91a      	bls.n	80009b0 <T_UserTerm+0x11c>
 800097a:	4b42      	ldr	r3, [pc, #264]	; (8000a84 <T_UserTerm+0x1f0>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	461a      	mov	r2, r3
 8000980:	4b3b      	ldr	r3, [pc, #236]	; (8000a70 <T_UserTerm+0x1dc>)
 8000982:	5c9b      	ldrb	r3, [r3, r2]
 8000984:	2b39      	cmp	r3, #57	; 0x39
 8000986:	d813      	bhi.n	80009b0 <T_UserTerm+0x11c>
 8000988:	4b3e      	ldr	r3, [pc, #248]	; (8000a84 <T_UserTerm+0x1f0>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b02      	cmp	r3, #2
 800098e:	d80f      	bhi.n	80009b0 <T_UserTerm+0x11c>
				buff2[count]=buff[count];
 8000990:	4b3c      	ldr	r3, [pc, #240]	; (8000a84 <T_UserTerm+0x1f0>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	4619      	mov	r1, r3
 8000996:	4b3b      	ldr	r3, [pc, #236]	; (8000a84 <T_UserTerm+0x1f0>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	461a      	mov	r2, r3
 800099c:	4b34      	ldr	r3, [pc, #208]	; (8000a70 <T_UserTerm+0x1dc>)
 800099e:	5c59      	ldrb	r1, [r3, r1]
 80009a0:	4b39      	ldr	r3, [pc, #228]	; (8000a88 <T_UserTerm+0x1f4>)
 80009a2:	5499      	strb	r1, [r3, r2]
				count ++;
 80009a4:	4b37      	ldr	r3, [pc, #220]	; (8000a84 <T_UserTerm+0x1f0>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	3301      	adds	r3, #1
 80009aa:	b2da      	uxtb	r2, r3
 80009ac:	4b35      	ldr	r3, [pc, #212]	; (8000a84 <T_UserTerm+0x1f0>)
 80009ae:	701a      	strb	r2, [r3, #0]

			}

			if(count>=3){
 80009b0:	4b34      	ldr	r3, [pc, #208]	; (8000a84 <T_UserTerm+0x1f0>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b02      	cmp	r3, #2
 80009b6:	d903      	bls.n	80009c0 <T_UserTerm+0x12c>
				TAS.T=*buff2;
 80009b8:	4b33      	ldr	r3, [pc, #204]	; (8000a88 <T_UserTerm+0x1f4>)
 80009ba:	781a      	ldrb	r2, [r3, #0]
 80009bc:	4b2d      	ldr	r3, [pc, #180]	; (8000a74 <T_UserTerm+0x1e0>)
 80009be:	709a      	strb	r2, [r3, #2]
				//TAS.T=SHOWTRSH;
				//count++;

				//memset(buff, 0, sizeof buff);
			}
			egBits=xEventGroupSetBits(egSym, E5);
 80009c0:	4b2d      	ldr	r3, [pc, #180]	; (8000a78 <T_UserTerm+0x1e4>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2110      	movs	r1, #16
 80009c6:	4618      	mov	r0, r3
 80009c8:	f002 ff8e 	bl	80038e8 <xEventGroupSetBits>
 80009cc:	4602      	mov	r2, r0
 80009ce:	4b2b      	ldr	r3, [pc, #172]	; (8000a7c <T_UserTerm+0x1e8>)
 80009d0:	601a      	str	r2, [r3, #0]
			switch (*buff){
 80009d2:	4b27      	ldr	r3, [pc, #156]	; (8000a70 <T_UserTerm+0x1dc>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b4e      	cmp	r3, #78	; 0x4e
 80009d8:	d002      	beq.n	80009e0 <T_UserTerm+0x14c>
 80009da:	2b6b      	cmp	r3, #107	; 0x6b
 80009dc:	d012      	beq.n	8000a04 <T_UserTerm+0x170>
 80009de:	e028      	b.n	8000a32 <T_UserTerm+0x19e>
			case 'N': TAS.SystemState=SSMain;
 80009e0:	4b24      	ldr	r3, [pc, #144]	; (8000a74 <T_UserTerm+0x1e0>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	715a      	strb	r2, [r3, #5]
			egBits=xEventGroupSetBits(egSym, E1|E4|E5|E6|E7);
 80009e6:	4b24      	ldr	r3, [pc, #144]	; (8000a78 <T_UserTerm+0x1e4>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	2179      	movs	r1, #121	; 0x79
 80009ec:	4618      	mov	r0, r3
 80009ee:	f002 ff7b 	bl	80038e8 <xEventGroupSetBits>
 80009f2:	4602      	mov	r2, r0
 80009f4:	4b21      	ldr	r3, [pc, #132]	; (8000a7c <T_UserTerm+0x1e8>)
 80009f6:	601a      	str	r2, [r3, #0]
			memset(buff, 0, sizeof buff);
 80009f8:	2204      	movs	r2, #4
 80009fa:	2100      	movs	r1, #0
 80009fc:	481c      	ldr	r0, [pc, #112]	; (8000a70 <T_UserTerm+0x1dc>)
 80009fe:	f005 fe9e 	bl	800673e <memset>
			break;
 8000a02:	e016      	b.n	8000a32 <T_UserTerm+0x19e>
			case 'k':
				TAS.T=buff2[0];
 8000a04:	4b20      	ldr	r3, [pc, #128]	; (8000a88 <T_UserTerm+0x1f4>)
 8000a06:	781a      	ldrb	r2, [r3, #0]
 8000a08:	4b1a      	ldr	r3, [pc, #104]	; (8000a74 <T_UserTerm+0x1e0>)
 8000a0a:	709a      	strb	r2, [r3, #2]
				TAS.SystemState=SSMain;
 8000a0c:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <T_UserTerm+0x1e0>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	715a      	strb	r2, [r3, #5]
				egBits=xEventGroupSetBits(egSym, E1|E4|E5|E6|E7);
 8000a12:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <T_UserTerm+0x1e4>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	2179      	movs	r1, #121	; 0x79
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f002 ff65 	bl	80038e8 <xEventGroupSetBits>
 8000a1e:	4602      	mov	r2, r0
 8000a20:	4b16      	ldr	r3, [pc, #88]	; (8000a7c <T_UserTerm+0x1e8>)
 8000a22:	601a      	str	r2, [r3, #0]
				memset(buff, 0, sizeof buff);
 8000a24:	2204      	movs	r2, #4
 8000a26:	2100      	movs	r1, #0
 8000a28:	4811      	ldr	r0, [pc, #68]	; (8000a70 <T_UserTerm+0x1dc>)
 8000a2a:	f005 fe88 	bl	800673e <memset>
				break;
 8000a2e:	e000      	b.n	8000a32 <T_UserTerm+0x19e>
			default:;
 8000a30:	bf00      	nop
			}

		} if((TAS.SystemState==SSAlarm)){
 8000a32:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <T_UserTerm+0x1e0>)
 8000a34:	795b      	ldrb	r3, [r3, #5]
 8000a36:	2b02      	cmp	r3, #2
 8000a38:	d112      	bne.n	8000a60 <T_UserTerm+0x1cc>
			if(*buff=='S'){
 8000a3a:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <T_UserTerm+0x1dc>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	2b53      	cmp	r3, #83	; 0x53
 8000a40:	d109      	bne.n	8000a56 <T_UserTerm+0x1c2>
				TAS.AS='D';
 8000a42:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <T_UserTerm+0x1e0>)
 8000a44:	2244      	movs	r2, #68	; 0x44
 8000a46:	711a      	strb	r2, [r3, #4]
				xSemaphoreGive(bsUartRes);
 8000a48:	4b0d      	ldr	r3, [pc, #52]	; (8000a80 <T_UserTerm+0x1ec>)
 8000a4a:	6818      	ldr	r0, [r3, #0]
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2100      	movs	r1, #0
 8000a52:	f003 f9dd 	bl	8003e10 <xQueueGenericSend>
				//egBits=xEventGroupClearBits(egSym, E_Alarm);
				//HAL_GPIO_WritePin( GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
				//	TAS.SystemState = SSMain;
				//egBits=xEventGroupSetBits(egSym, E1|E4|E5|E6);
			}
			memset(buff, 0, sizeof buff);
 8000a56:	2204      	movs	r2, #4
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4805      	ldr	r0, [pc, #20]	; (8000a70 <T_UserTerm+0x1dc>)
 8000a5c:	f005 fe6f 	bl	800673e <memset>

		}



		vTaskDelay(50);
 8000a60:	2032      	movs	r0, #50	; 0x32
 8000a62:	f004 f85f 	bl	8004b24 <vTaskDelay>
		HAL_UART_Receive( &huart1, buff, 2, 200);
 8000a66:	e720      	b.n	80008aa <T_UserTerm+0x16>
 8000a68:	0800699c 	.word	0x0800699c
 8000a6c:	200019dc 	.word	0x200019dc
 8000a70:	20000044 	.word	0x20000044
 8000a74:	20001a24 	.word	0x20001a24
 8000a78:	200019a0 	.word	0x200019a0
 8000a7c:	20001a2c 	.word	0x20001a2c
 8000a80:	20000040 	.word	0x20000040
 8000a84:	20000048 	.word	0x20000048
 8000a88:	2000004c 	.word	0x2000004c

08000a8c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b094      	sub	sp, #80	; 0x50
 8000a90:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a96:	2228      	movs	r2, #40	; 0x28
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f005 fe4f 	bl	800673e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ab0:	1d3b      	adds	r3, r7, #4
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000abc:	2302      	movs	r3, #2
 8000abe:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ac4:	2310      	movs	r3, #16
 8000ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000acc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f001 fb5f 	bl	8002194 <HAL_RCC_OscConfig>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <SystemClock_Config+0x54>
	{
		Error_Handler();
 8000adc:	f000 f942 	bl	8000d64 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae0:	230f      	movs	r3, #15
 8000ae2:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aec:	2300      	movs	r3, #0
 8000aee:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000af0:	2300      	movs	r3, #0
 8000af2:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	2100      	movs	r1, #0
 8000afa:	4618      	mov	r0, r3
 8000afc:	f001 fdca 	bl	8002694 <HAL_RCC_ClockConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <SystemClock_Config+0x7e>
	{
		Error_Handler();
 8000b06:	f000 f92d 	bl	8000d64 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	4618      	mov	r0, r3
 8000b16:	f001 ff89 	bl	8002a2c <HAL_RCCEx_PeriphCLKConfig>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <SystemClock_Config+0x98>
	{
		Error_Handler();
 8000b20:	f000 f920 	bl	8000d64 <Error_Handler>
	}
}
 8000b24:	bf00      	nop
 8000b26:	3750      	adds	r7, #80	; 0x50
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8000b32:	1d3b      	adds	r3, r7, #4
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000b3c:	4b18      	ldr	r3, [pc, #96]	; (8000ba0 <MX_ADC1_Init+0x74>)
 8000b3e:	4a19      	ldr	r2, [pc, #100]	; (8000ba4 <MX_ADC1_Init+0x78>)
 8000b40:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b42:	4b17      	ldr	r3, [pc, #92]	; (8000ba0 <MX_ADC1_Init+0x74>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000b48:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <MX_ADC1_Init+0x74>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b4e:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <MX_ADC1_Init+0x74>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b54:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <MX_ADC1_Init+0x74>)
 8000b56:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000b5a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b5c:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <MX_ADC1_Init+0x74>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 8000b62:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <MX_ADC1_Init+0x74>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b68:	480d      	ldr	r0, [pc, #52]	; (8000ba0 <MX_ADC1_Init+0x74>)
 8000b6a:	f000 fc15 	bl	8001398 <HAL_ADC_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_ADC1_Init+0x4c>
	{
		Error_Handler();
 8000b74:	f000 f8f6 	bl	8000d64 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b80:	2300      	movs	r3, #0
 8000b82:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	4619      	mov	r1, r3
 8000b88:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <MX_ADC1_Init+0x74>)
 8000b8a:	f000 fe91 	bl	80018b0 <HAL_ADC_ConfigChannel>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_ADC1_Init+0x6c>
	{
		Error_Handler();
 8000b94:	f000 f8e6 	bl	8000d64 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000b98:	bf00      	nop
 8000b9a:	3710      	adds	r7, #16
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	200019a8 	.word	0x200019a8
 8000ba4:	40012400 	.word	0x40012400

08000ba8 <MX_ADC2_Init>:
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8000bae:	1d3b      	adds	r3, r7, #4
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN ADC2_Init 1 */

	/* USER CODE END ADC2_Init 1 */
	/** Common config
	 */
	hadc2.Instance = ADC2;
 8000bb8:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <MX_ADC2_Init+0x74>)
 8000bba:	4a19      	ldr	r2, [pc, #100]	; (8000c20 <MX_ADC2_Init+0x78>)
 8000bbc:	601a      	str	r2, [r3, #0]
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bbe:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <MX_ADC2_Init+0x74>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
	hadc2.Init.ContinuousConvMode = DISABLE;
 8000bc4:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <MX_ADC2_Init+0x74>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	731a      	strb	r2, [r3, #12]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000bca:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <MX_ADC2_Init+0x74>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	751a      	strb	r2, [r3, #20]
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bd0:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <MX_ADC2_Init+0x74>)
 8000bd2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000bd6:	61da      	str	r2, [r3, #28]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bd8:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <MX_ADC2_Init+0x74>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	605a      	str	r2, [r3, #4]
	hadc2.Init.NbrOfConversion = 1;
 8000bde:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <MX_ADC2_Init+0x74>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000be4:	480d      	ldr	r0, [pc, #52]	; (8000c1c <MX_ADC2_Init+0x74>)
 8000be6:	f000 fbd7 	bl	8001398 <HAL_ADC_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_ADC2_Init+0x4c>
	{
		Error_Handler();
 8000bf0:	f000 f8b8 	bl	8000d64 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 8000bf4:	2309      	movs	r3, #9
 8000bf6:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c00:	1d3b      	adds	r3, r7, #4
 8000c02:	4619      	mov	r1, r3
 8000c04:	4805      	ldr	r0, [pc, #20]	; (8000c1c <MX_ADC2_Init+0x74>)
 8000c06:	f000 fe53 	bl	80018b0 <HAL_ADC_ConfigChannel>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_ADC2_Init+0x6c>
	{
		Error_Handler();
 8000c10:	f000 f8a8 	bl	8000d64 <Error_Handler>
	}


}
 8000c14:	bf00      	nop
 8000c16:	3710      	adds	r7, #16
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20001970 	.word	0x20001970
 8000c20:	40012800 	.word	0x40012800

08000c24 <MX_USART1_UART_Init>:


static void MX_USART1_UART_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0


	huart1.Instance = USART1;
 8000c28:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <MX_USART1_UART_Init+0x4c>)
 8000c2a:	4a12      	ldr	r2, [pc, #72]	; (8000c74 <MX_USART1_UART_Init+0x50>)
 8000c2c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8000c2e:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <MX_USART1_UART_Init+0x4c>)
 8000c30:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c34:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c36:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <MX_USART1_UART_Init+0x4c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <MX_USART1_UART_Init+0x4c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000c42:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <MX_USART1_UART_Init+0x4c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000c48:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <MX_USART1_UART_Init+0x4c>)
 8000c4a:	220c      	movs	r2, #12
 8000c4c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c4e:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <MX_USART1_UART_Init+0x4c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <MX_USART1_UART_Init+0x4c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c5a:	4805      	ldr	r0, [pc, #20]	; (8000c70 <MX_USART1_UART_Init+0x4c>)
 8000c5c:	f002 faa2 	bl	80031a4 <HAL_UART_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8000c66:	f000 f87d 	bl	8000d64 <Error_Handler>
	}


}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	200019dc 	.word	0x200019dc
 8000c74:	40013800 	.word	0x40013800

08000c78 <MX_GPIO_Init>:


static void MX_GPIO_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7e:	f107 0308 	add.w	r3, r7, #8
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8c:	4b29      	ldr	r3, [pc, #164]	; (8000d34 <MX_GPIO_Init+0xbc>)
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	4a28      	ldr	r2, [pc, #160]	; (8000d34 <MX_GPIO_Init+0xbc>)
 8000c92:	f043 0304 	orr.w	r3, r3, #4
 8000c96:	6193      	str	r3, [r2, #24]
 8000c98:	4b26      	ldr	r3, [pc, #152]	; (8000d34 <MX_GPIO_Init+0xbc>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	f003 0304 	and.w	r3, r3, #4
 8000ca0:	607b      	str	r3, [r7, #4]
 8000ca2:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca4:	4b23      	ldr	r3, [pc, #140]	; (8000d34 <MX_GPIO_Init+0xbc>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	4a22      	ldr	r2, [pc, #136]	; (8000d34 <MX_GPIO_Init+0xbc>)
 8000caa:	f043 0308 	orr.w	r3, r3, #8
 8000cae:	6193      	str	r3, [r2, #24]
 8000cb0:	4b20      	ldr	r3, [pc, #128]	; (8000d34 <MX_GPIO_Init+0xbc>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	f003 0308 	and.w	r3, r3, #8
 8000cb8:	603b      	str	r3, [r7, #0]
 8000cba:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f649 11fe 	movw	r1, #39422	; 0x99fe
 8000cc2:	481d      	ldr	r0, [pc, #116]	; (8000d38 <MX_GPIO_Init+0xc0>)
 8000cc4:	f001 fa4e 	bl	8002164 <HAL_GPIO_WritePin>
			|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
			|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8000cce:	481b      	ldr	r0, [pc, #108]	; (8000d3c <MX_GPIO_Init+0xc4>)
 8000cd0:	f001 fa48 	bl	8002164 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 PA7 PA8
                           PA11 PA12 PA15 */
	GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000cd4:	f649 13fe 	movw	r3, #39422	; 0x99fe
 8000cd8:	60bb      	str	r3, [r7, #8]
			|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
			|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce6:	f107 0308 	add.w	r3, r7, #8
 8000cea:	4619      	mov	r1, r3
 8000cec:	4812      	ldr	r0, [pc, #72]	; (8000d38 <MX_GPIO_Init+0xc0>)
 8000cee:	f001 f8df 	bl	8001eb0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000cf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d00:	f107 0308 	add.w	r3, r7, #8
 8000d04:	4619      	mov	r1, r3
 8000d06:	480d      	ldr	r0, [pc, #52]	; (8000d3c <MX_GPIO_Init+0xc4>)
 8000d08:	f001 f8d2 	bl	8001eb0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB6 PB7 */
	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000d0c:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000d10:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d12:	2301      	movs	r3, #1
 8000d14:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1e:	f107 0308 	add.w	r3, r7, #8
 8000d22:	4619      	mov	r1, r3
 8000d24:	4805      	ldr	r0, [pc, #20]	; (8000d3c <MX_GPIO_Init+0xc4>)
 8000d26:	f001 f8c3 	bl	8001eb0 <HAL_GPIO_Init>

}
 8000d2a:	bf00      	nop
 8000d2c:	3718      	adds	r7, #24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40021000 	.word	0x40021000
 8000d38:	40010800 	.word	0x40010800
 8000d3c:	40010c00 	.word	0x40010c00

08000d40 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d101      	bne.n	8000d56 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000d52:	f000 fae3 	bl	800131c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40012c00 	.word	0x40012c00

08000d64 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d68:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000d6a:	e7fe      	b.n	8000d6a <Error_Handler+0x6>

08000d6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d72:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <HAL_MspInit+0x68>)
 8000d74:	699b      	ldr	r3, [r3, #24]
 8000d76:	4a17      	ldr	r2, [pc, #92]	; (8000dd4 <HAL_MspInit+0x68>)
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	6193      	str	r3, [r2, #24]
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <HAL_MspInit+0x68>)
 8000d80:	699b      	ldr	r3, [r3, #24]
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8a:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <HAL_MspInit+0x68>)
 8000d8c:	69db      	ldr	r3, [r3, #28]
 8000d8e:	4a11      	ldr	r2, [pc, #68]	; (8000dd4 <HAL_MspInit+0x68>)
 8000d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d94:	61d3      	str	r3, [r2, #28]
 8000d96:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <HAL_MspInit+0x68>)
 8000d98:	69db      	ldr	r3, [r3, #28]
 8000d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000da2:	2200      	movs	r2, #0
 8000da4:	210f      	movs	r1, #15
 8000da6:	f06f 0001 	mvn.w	r0, #1
 8000daa:	f001 f856 	bl	8001e5a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000dae:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <HAL_MspInit+0x6c>)
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <HAL_MspInit+0x6c>)
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	40010000 	.word	0x40010000

08000ddc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08a      	sub	sp, #40	; 0x28
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 0318 	add.w	r3, r7, #24
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a28      	ldr	r2, [pc, #160]	; (8000e98 <HAL_ADC_MspInit+0xbc>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d122      	bne.n	8000e42 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dfc:	4b27      	ldr	r3, [pc, #156]	; (8000e9c <HAL_ADC_MspInit+0xc0>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	4a26      	ldr	r2, [pc, #152]	; (8000e9c <HAL_ADC_MspInit+0xc0>)
 8000e02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e06:	6193      	str	r3, [r2, #24]
 8000e08:	4b24      	ldr	r3, [pc, #144]	; (8000e9c <HAL_ADC_MspInit+0xc0>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e10:	617b      	str	r3, [r7, #20]
 8000e12:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e14:	4b21      	ldr	r3, [pc, #132]	; (8000e9c <HAL_ADC_MspInit+0xc0>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	4a20      	ldr	r2, [pc, #128]	; (8000e9c <HAL_ADC_MspInit+0xc0>)
 8000e1a:	f043 0304 	orr.w	r3, r3, #4
 8000e1e:	6193      	str	r3, [r2, #24]
 8000e20:	4b1e      	ldr	r3, [pc, #120]	; (8000e9c <HAL_ADC_MspInit+0xc0>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	f003 0304 	and.w	r3, r3, #4
 8000e28:	613b      	str	r3, [r7, #16]
 8000e2a:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e30:	2303      	movs	r3, #3
 8000e32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e34:	f107 0318 	add.w	r3, r7, #24
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4819      	ldr	r0, [pc, #100]	; (8000ea0 <HAL_ADC_MspInit+0xc4>)
 8000e3c:	f001 f838 	bl	8001eb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000e40:	e026      	b.n	8000e90 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a17      	ldr	r2, [pc, #92]	; (8000ea4 <HAL_ADC_MspInit+0xc8>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d121      	bne.n	8000e90 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000e4c:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <HAL_ADC_MspInit+0xc0>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	4a12      	ldr	r2, [pc, #72]	; (8000e9c <HAL_ADC_MspInit+0xc0>)
 8000e52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e56:	6193      	str	r3, [r2, #24]
 8000e58:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <HAL_ADC_MspInit+0xc0>)
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e64:	4b0d      	ldr	r3, [pc, #52]	; (8000e9c <HAL_ADC_MspInit+0xc0>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	4a0c      	ldr	r2, [pc, #48]	; (8000e9c <HAL_ADC_MspInit+0xc0>)
 8000e6a:	f043 0308 	orr.w	r3, r3, #8
 8000e6e:	6193      	str	r3, [r2, #24]
 8000e70:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <HAL_ADC_MspInit+0xc0>)
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	f003 0308 	and.w	r3, r3, #8
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e80:	2303      	movs	r3, #3
 8000e82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e84:	f107 0318 	add.w	r3, r7, #24
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4807      	ldr	r0, [pc, #28]	; (8000ea8 <HAL_ADC_MspInit+0xcc>)
 8000e8c:	f001 f810 	bl	8001eb0 <HAL_GPIO_Init>
}
 8000e90:	bf00      	nop
 8000e92:	3728      	adds	r7, #40	; 0x28
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40012400 	.word	0x40012400
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	40010800 	.word	0x40010800
 8000ea4:	40012800 	.word	0x40012800
 8000ea8:	40010c00 	.word	0x40010c00

08000eac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b088      	sub	sp, #32
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	f107 0310 	add.w	r3, r7, #16
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a1c      	ldr	r2, [pc, #112]	; (8000f38 <HAL_UART_MspInit+0x8c>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d131      	bne.n	8000f30 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ecc:	4b1b      	ldr	r3, [pc, #108]	; (8000f3c <HAL_UART_MspInit+0x90>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	4a1a      	ldr	r2, [pc, #104]	; (8000f3c <HAL_UART_MspInit+0x90>)
 8000ed2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ed6:	6193      	str	r3, [r2, #24]
 8000ed8:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <HAL_UART_MspInit+0x90>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee4:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <HAL_UART_MspInit+0x90>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	4a14      	ldr	r2, [pc, #80]	; (8000f3c <HAL_UART_MspInit+0x90>)
 8000eea:	f043 0304 	orr.w	r3, r3, #4
 8000eee:	6193      	str	r3, [r2, #24]
 8000ef0:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <HAL_UART_MspInit+0x90>)
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	f003 0304 	and.w	r3, r3, #4
 8000ef8:	60bb      	str	r3, [r7, #8]
 8000efa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000efc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f02:	2302      	movs	r3, #2
 8000f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f06:	2303      	movs	r3, #3
 8000f08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0a:	f107 0310 	add.w	r3, r7, #16
 8000f0e:	4619      	mov	r1, r3
 8000f10:	480b      	ldr	r0, [pc, #44]	; (8000f40 <HAL_UART_MspInit+0x94>)
 8000f12:	f000 ffcd 	bl	8001eb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f24:	f107 0310 	add.w	r3, r7, #16
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <HAL_UART_MspInit+0x94>)
 8000f2c:	f000 ffc0 	bl	8001eb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f30:	bf00      	nop
 8000f32:	3720      	adds	r7, #32
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40013800 	.word	0x40013800
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	40010800 	.word	0x40010800

08000f44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08c      	sub	sp, #48	; 0x30
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000f54:	2200      	movs	r2, #0
 8000f56:	6879      	ldr	r1, [r7, #4]
 8000f58:	2019      	movs	r0, #25
 8000f5a:	f000 ff7e 	bl	8001e5a <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000f5e:	2019      	movs	r0, #25
 8000f60:	f000 ff97 	bl	8001e92 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000f64:	4b1e      	ldr	r3, [pc, #120]	; (8000fe0 <HAL_InitTick+0x9c>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	4a1d      	ldr	r2, [pc, #116]	; (8000fe0 <HAL_InitTick+0x9c>)
 8000f6a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f6e:	6193      	str	r3, [r2, #24]
 8000f70:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <HAL_InitTick+0x9c>)
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f7c:	f107 0210 	add.w	r2, r7, #16
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	4611      	mov	r1, r2
 8000f86:	4618      	mov	r0, r3
 8000f88:	f001 fd02 	bl	8002990 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f8c:	f001 fcec 	bl	8002968 <HAL_RCC_GetPCLK2Freq>
 8000f90:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f94:	4a13      	ldr	r2, [pc, #76]	; (8000fe4 <HAL_InitTick+0xa0>)
 8000f96:	fba2 2303 	umull	r2, r3, r2, r3
 8000f9a:	0c9b      	lsrs	r3, r3, #18
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000fa0:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <HAL_InitTick+0xa4>)
 8000fa2:	4a12      	ldr	r2, [pc, #72]	; (8000fec <HAL_InitTick+0xa8>)
 8000fa4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000fa6:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <HAL_InitTick+0xa4>)
 8000fa8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fac:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000fae:	4a0e      	ldr	r2, [pc, #56]	; (8000fe8 <HAL_InitTick+0xa4>)
 8000fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fb2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <HAL_InitTick+0xa4>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fba:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <HAL_InitTick+0xa4>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000fc0:	4809      	ldr	r0, [pc, #36]	; (8000fe8 <HAL_InitTick+0xa4>)
 8000fc2:	f001 fea5 	bl	8002d10 <HAL_TIM_Base_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d104      	bne.n	8000fd6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000fcc:	4806      	ldr	r0, [pc, #24]	; (8000fe8 <HAL_InitTick+0xa4>)
 8000fce:	f001 fef7 	bl	8002dc0 <HAL_TIM_Base_Start_IT>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	e000      	b.n	8000fd8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3730      	adds	r7, #48	; 0x30
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	431bde83 	.word	0x431bde83
 8000fe8:	20001a30 	.word	0x20001a30
 8000fec:	40012c00 	.word	0x40012c00

08000ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <NMI_Handler+0x4>

08000ff6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ffa:	e7fe      	b.n	8000ffa <HardFault_Handler+0x4>

08000ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <MemManage_Handler+0x4>

08001002 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001006:	e7fe      	b.n	8001006 <BusFault_Handler+0x4>

08001008 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800100c:	e7fe      	b.n	800100c <UsageFault_Handler+0x4>

0800100e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr
	...

0800101c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001020:	4802      	ldr	r0, [pc, #8]	; (800102c <TIM1_UP_IRQHandler+0x10>)
 8001022:	f001 ff1f 	bl	8002e64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20001a30 	.word	0x20001a30

08001030 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr

0800103c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800103c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800103e:	e003      	b.n	8001048 <LoopCopyDataInit>

08001040 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001040:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001042:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001044:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001046:	3104      	adds	r1, #4

08001048 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001048:	480a      	ldr	r0, [pc, #40]	; (8001074 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800104a:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800104c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800104e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001050:	d3f6      	bcc.n	8001040 <CopyDataInit>
  ldr r2, =_sbss
 8001052:	4a0a      	ldr	r2, [pc, #40]	; (800107c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001054:	e002      	b.n	800105c <LoopFillZerobss>

08001056 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001056:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001058:	f842 3b04 	str.w	r3, [r2], #4

0800105c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800105c:	4b08      	ldr	r3, [pc, #32]	; (8001080 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800105e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001060:	d3f9      	bcc.n	8001056 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001062:	f7ff ffe5 	bl	8001030 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001066:	f005 fb21 	bl	80066ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800106a:	f7ff f87b 	bl	8000164 <main>
  bx lr
 800106e:	4770      	bx	lr
  ldr r3, =_sidata
 8001070:	08006a3c 	.word	0x08006a3c
  ldr r0, =_sdata
 8001074:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001078:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 800107c:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8001080:	20001abc 	.word	0x20001abc

08001084 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001084:	e7fe      	b.n	8001084 <ADC1_2_IRQHandler>
	...

08001088 <LCD_vidInit>:
	}
}


void LCD_vidInit( void )
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
	/* wait 35 */
	//_delay_ms(35);
HAL_Delay(35);
 800108c:	2023      	movs	r0, #35	; 0x23
 800108e:	f000 f961 	bl	8001354 <HAL_Delay>
	/*  function set */

	LCD_vidSendCmd(0b00111000);
 8001092:	2038      	movs	r0, #56	; 0x38
 8001094:	f000 f81a 	bl	80010cc <LCD_vidSendCmd>
	/* wait 1 */
//	_delay_ms(1);
	HAL_Delay(1);
 8001098:	2001      	movs	r0, #1
 800109a:	f000 f95b 	bl	8001354 <HAL_Delay>
	/*  function set (on/off) */
	LCD_vidSendCmd(0b00001100);
 800109e:	200c      	movs	r0, #12
 80010a0:	f000 f814 	bl	80010cc <LCD_vidSendCmd>
	/* wait 1 */
//	_delay_ms(1);
	HAL_Delay(1);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f000 f955 	bl	8001354 <HAL_Delay>
	/*LCD_vidSendCmd(0b00000001);*/
	/*	 wait 2                  */
	/*_delay_ms(2);	             */
	/*****************************/

	LCD_vidClear();
 80010aa:	f000 f8dd 	bl	8001268 <LCD_vidClear>

	/*  function set (Entry mode set - cursor increase or decrease ) */
	LCD_vidSendCmd(0b00000110);
 80010ae:	2006      	movs	r0, #6
 80010b0:	f000 f80c 	bl	80010cc <LCD_vidSendCmd>
	/* wait 2 */
	//_delay_ms(2);
	HAL_Delay(2);
 80010b4:	2002      	movs	r0, #2
 80010b6:	f000 f94d 	bl	8001354 <HAL_Delay>
	/* latch = 0 */
	//DIO_voidSetPinValue(DIO_U8_PORTA, LCD_u8EN , DIO_U8_LOW );
	HAL_GPIO_WritePin( GPIOA, LCD_u8EN , GPIO_PIN_RESET );
 80010ba:	2200      	movs	r2, #0
 80010bc:	2110      	movs	r1, #16
 80010be:	4802      	ldr	r0, [pc, #8]	; (80010c8 <LCD_vidInit+0x40>)
 80010c0:	f001 f850 	bl	8002164 <HAL_GPIO_WritePin>

}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40010800 	.word	0x40010800

080010cc <LCD_vidSendCmd>:

void LCD_vidSendCmd( uint8_t u8CmdCpy )
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
	/** to send command  ( RS = 0 and R/W = 0 ) =====> (write instruction) */

	/* RS  0 CMD */  
	//DIO_voidSetPinValue(DIO_U8_PORTA, LCD_u8RS , DIO_U8_LOW );
	HAL_GPIO_WritePin( GPIOA, LCD_u8RS , GPIO_PIN_RESET );
 80010d6:	2200      	movs	r2, #0
 80010d8:	2104      	movs	r1, #4
 80010da:	4808      	ldr	r0, [pc, #32]	; (80010fc <LCD_vidSendCmd+0x30>)
 80010dc:	f001 f842 	bl	8002164 <HAL_GPIO_WritePin>
	/* write 0 CMD*/
	//DIO_voidSetPinValue( DIO_U8_PORTA,LCD_u8RW , DIO_U8_LOW );
	HAL_GPIO_WritePin( GPIOA, LCD_u8RW , GPIO_PIN_RESET );
 80010e0:	2200      	movs	r2, #0
 80010e2:	2108      	movs	r1, #8
 80010e4:	4805      	ldr	r0, [pc, #20]	; (80010fc <LCD_vidSendCmd+0x30>)
 80010e6:	f001 f83d 	bl	8002164 <HAL_GPIO_WritePin>

	/* take data pass data bu */
	vidPutOnBus(u8CmdCpy);
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f000 f821 	bl	8001134 <vidPutOnBus>

}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40010800 	.word	0x40010800

08001100 <LCD_vidWriteChar>:

void LCD_vidWriteChar( uint8_t u8CharCpy )
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
	/** to write command   ( RS = 1 and R/W = 0 ) =====> (write to DR Reg) */

	/* RS  1 CMD */
	//DIO_voidSetPinValue(DIO_U8_PORTA, LCD_u8RS , DIO_U8_HIGH );
	HAL_GPIO_WritePin( GPIOA, LCD_u8RS  , GPIO_PIN_SET );
 800110a:	2201      	movs	r2, #1
 800110c:	2104      	movs	r1, #4
 800110e:	4808      	ldr	r0, [pc, #32]	; (8001130 <LCD_vidWriteChar+0x30>)
 8001110:	f001 f828 	bl	8002164 <HAL_GPIO_WritePin>
	/* write 0 CMD*/
	//DIO_voidSetPinValue(DIO_U8_PORTA, LCD_u8RW , DIO_U8_LOW );
	HAL_GPIO_WritePin( GPIOA, LCD_u8RW  , GPIO_PIN_RESET );
 8001114:	2200      	movs	r2, #0
 8001116:	2108      	movs	r1, #8
 8001118:	4805      	ldr	r0, [pc, #20]	; (8001130 <LCD_vidWriteChar+0x30>)
 800111a:	f001 f823 	bl	8002164 <HAL_GPIO_WritePin>

	/* take data pass data bu */
	vidPutOnBus(u8CharCpy);
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	4618      	mov	r0, r3
 8001122:	f000 f807 	bl	8001134 <vidPutOnBus>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40010800 	.word	0x40010800

08001134 <vidPutOnBus>:

static void vidPutOnBus( uint8_t u8CmdDataCpy )
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
	uint8_t LOC_u8Loop = LCD_DATA_D0_START ;
 800113e:	2300      	movs	r3, #0
 8001140:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin( GPIOA, LCD_u8DATA_0 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 8001142:	79fa      	ldrb	r2, [r7, #7]
 8001144:	7bfb      	ldrb	r3, [r7, #15]
 8001146:	1c59      	adds	r1, r3, #1
 8001148:	73f9      	strb	r1, [r7, #15]
 800114a:	fa42 f303 	asr.w	r3, r2, r3
 800114e:	b2db      	uxtb	r3, r3
 8001150:	f003 0301 	and.w	r3, r3, #1
 8001154:	b2db      	uxtb	r3, r3
 8001156:	461a      	mov	r2, r3
 8001158:	2120      	movs	r1, #32
 800115a:	4841      	ldr	r0, [pc, #260]	; (8001260 <vidPutOnBus+0x12c>)
 800115c:	f001 f802 	bl	8002164 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin( GPIOA, LCD_u8DATA_1 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 8001160:	79fa      	ldrb	r2, [r7, #7]
 8001162:	7bfb      	ldrb	r3, [r7, #15]
 8001164:	1c59      	adds	r1, r3, #1
 8001166:	73f9      	strb	r1, [r7, #15]
 8001168:	fa42 f303 	asr.w	r3, r2, r3
 800116c:	b2db      	uxtb	r3, r3
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	b2db      	uxtb	r3, r3
 8001174:	461a      	mov	r2, r3
 8001176:	2140      	movs	r1, #64	; 0x40
 8001178:	4839      	ldr	r0, [pc, #228]	; (8001260 <vidPutOnBus+0x12c>)
 800117a:	f000 fff3 	bl	8002164 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin( GPIOA, LCD_u8DATA_2 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 800117e:	79fa      	ldrb	r2, [r7, #7]
 8001180:	7bfb      	ldrb	r3, [r7, #15]
 8001182:	1c59      	adds	r1, r3, #1
 8001184:	73f9      	strb	r1, [r7, #15]
 8001186:	fa42 f303 	asr.w	r3, r2, r3
 800118a:	b2db      	uxtb	r3, r3
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	b2db      	uxtb	r3, r3
 8001192:	461a      	mov	r2, r3
 8001194:	2180      	movs	r1, #128	; 0x80
 8001196:	4832      	ldr	r0, [pc, #200]	; (8001260 <vidPutOnBus+0x12c>)
 8001198:	f000 ffe4 	bl	8002164 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin( GPIOA, LCD_u8DATA_3 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 800119c:	79fa      	ldrb	r2, [r7, #7]
 800119e:	7bfb      	ldrb	r3, [r7, #15]
 80011a0:	1c59      	adds	r1, r3, #1
 80011a2:	73f9      	strb	r1, [r7, #15]
 80011a4:	fa42 f303 	asr.w	r3, r2, r3
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	461a      	mov	r2, r3
 80011b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011b6:	482a      	ldr	r0, [pc, #168]	; (8001260 <vidPutOnBus+0x12c>)
 80011b8:	f000 ffd4 	bl	8002164 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin( GPIOA, LCD_u8DATA_4 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 80011bc:	79fa      	ldrb	r2, [r7, #7]
 80011be:	7bfb      	ldrb	r3, [r7, #15]
 80011c0:	1c59      	adds	r1, r3, #1
 80011c2:	73f9      	strb	r1, [r7, #15]
 80011c4:	fa42 f303 	asr.w	r3, r2, r3
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	461a      	mov	r2, r3
 80011d2:	2102      	movs	r1, #2
 80011d4:	4822      	ldr	r0, [pc, #136]	; (8001260 <vidPutOnBus+0x12c>)
 80011d6:	f000 ffc5 	bl	8002164 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin( GPIOB, LCD_u8DATA_5 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 80011da:	79fa      	ldrb	r2, [r7, #7]
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
 80011de:	1c59      	adds	r1, r3, #1
 80011e0:	73f9      	strb	r1, [r7, #15]
 80011e2:	fa42 f303 	asr.w	r3, r2, r3
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	461a      	mov	r2, r3
 80011f0:	2180      	movs	r1, #128	; 0x80
 80011f2:	481c      	ldr	r0, [pc, #112]	; (8001264 <vidPutOnBus+0x130>)
 80011f4:	f000 ffb6 	bl	8002164 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin( GPIOA, LCD_u8DATA_6 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 80011f8:	79fa      	ldrb	r2, [r7, #7]
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	1c59      	adds	r1, r3, #1
 80011fe:	73f9      	strb	r1, [r7, #15]
 8001200:	fa42 f303 	asr.w	r3, r2, r3
 8001204:	b2db      	uxtb	r3, r3
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	b2db      	uxtb	r3, r3
 800120c:	461a      	mov	r2, r3
 800120e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001212:	4813      	ldr	r0, [pc, #76]	; (8001260 <vidPutOnBus+0x12c>)
 8001214:	f000 ffa6 	bl	8002164 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin( GPIOA, LCD_u8DATA_7 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 8001218:	79fa      	ldrb	r2, [r7, #7]
 800121a:	7bfb      	ldrb	r3, [r7, #15]
 800121c:	1c59      	adds	r1, r3, #1
 800121e:	73f9      	strb	r1, [r7, #15]
 8001220:	fa42 f303 	asr.w	r3, r2, r3
 8001224:	b2db      	uxtb	r3, r3
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	b2db      	uxtb	r3, r3
 800122c:	461a      	mov	r2, r3
 800122e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001232:	480b      	ldr	r0, [pc, #44]	; (8001260 <vidPutOnBus+0x12c>)
 8001234:	f000 ff96 	bl	8002164 <HAL_GPIO_WritePin>

	/* Latch  */
	//DIO_voidSetPinValue(DIO_U8_PORTA, LCD_u8EN , DIO_U8_HIGH );
	HAL_GPIO_WritePin( GPIOA, LCD_u8EN , GPIO_PIN_SET );
 8001238:	2201      	movs	r2, #1
 800123a:	2110      	movs	r1, #16
 800123c:	4808      	ldr	r0, [pc, #32]	; (8001260 <vidPutOnBus+0x12c>)
 800123e:	f000 ff91 	bl	8002164 <HAL_GPIO_WritePin>
	//_delay_ms(2);
	HAL_Delay(2);
 8001242:	2002      	movs	r0, #2
 8001244:	f000 f886 	bl	8001354 <HAL_Delay>
	//DIO_voidSetPinValue(DIO_U8_PORTA, LCD_u8EN , DIO_U8_LOW );
	HAL_GPIO_WritePin( GPIOA, LCD_u8EN , GPIO_PIN_RESET );
 8001248:	2200      	movs	r2, #0
 800124a:	2110      	movs	r1, #16
 800124c:	4804      	ldr	r0, [pc, #16]	; (8001260 <vidPutOnBus+0x12c>)
 800124e:	f000 ff89 	bl	8002164 <HAL_GPIO_WritePin>
	//_delay_ms(2);
	HAL_Delay(2);
 8001252:	2002      	movs	r0, #2
 8001254:	f000 f87e 	bl	8001354 <HAL_Delay>

}
 8001258:	bf00      	nop
 800125a:	3710      	adds	r7, #16
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40010800 	.word	0x40010800
 8001264:	40010c00 	.word	0x40010c00

08001268 <LCD_vidClear>:

void LCD_vidClear( void )
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
	/*  function set (Clear  Display) */
	LCD_vidSendCmd(0b00000001);
 800126c:	2001      	movs	r0, #1
 800126e:	f7ff ff2d 	bl	80010cc <LCD_vidSendCmd>
	/* wait 2 */
	//_delay_ms(2);
	HAL_Delay(2);
 8001272:	2002      	movs	r0, #2
 8001274:	f000 f86e 	bl	8001354 <HAL_Delay>
}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}

0800127c <LCD_vidGotoXY>:


void LCD_vidGotoXY( uint8_t u8LineNbCpy , uint8_t u8CharNbCpy )
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	460a      	mov	r2, r1
 8001286:	71fb      	strb	r3, [r7, #7]
 8001288:	4613      	mov	r3, r2
 800128a:	71bb      	strb	r3, [r7, #6]
	/* switch case over line */
	if(  u8LineNbCpy == 1 )
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d106      	bne.n	80012a0 <LCD_vidGotoXY+0x24>
	{
		/*  function set (Line1 position " x ") */
		LCD_vidSendCmd( (LCD_BEGINNING_FIRST_LINE + u8CharNbCpy) );
 8001292:	79bb      	ldrb	r3, [r7, #6]
 8001294:	3b80      	subs	r3, #128	; 0x80
 8001296:	b2db      	uxtb	r3, r3
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff ff17 	bl	80010cc <LCD_vidSendCmd>
		LCD_vidSendCmd( (LCD_BEGINNING_SECOND_LINE + u8CharNbCpy) );

	}


}
 800129e:	e008      	b.n	80012b2 <LCD_vidGotoXY+0x36>
	else if( u8LineNbCpy == 2 )
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d105      	bne.n	80012b2 <LCD_vidGotoXY+0x36>
		LCD_vidSendCmd( (LCD_BEGINNING_SECOND_LINE + u8CharNbCpy) );
 80012a6:	79bb      	ldrb	r3, [r7, #6]
 80012a8:	3b40      	subs	r3, #64	; 0x40
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff0d 	bl	80010cc <LCD_vidSendCmd>
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <LCD_vidWriteString>:


/* Write string */
void LCD_vidWriteString( uint8_t * pu8StringCpy )
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b084      	sub	sp, #16
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
	uint8_t Loc_u8Counter = 0 ;
 80012c2:	2300      	movs	r3, #0
 80012c4:	73fb      	strb	r3, [r7, #15]

	while(pu8StringCpy[Loc_u8Counter] !='\0')
 80012c6:	e009      	b.n	80012dc <LCD_vidWriteString+0x22>
	{
		LCD_vidWriteChar(pu8StringCpy[Loc_u8Counter]);
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	4413      	add	r3, r2
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff ff15 	bl	8001100 <LCD_vidWriteChar>
		Loc_u8Counter++;		
 80012d6:	7bfb      	ldrb	r3, [r7, #15]
 80012d8:	3301      	adds	r3, #1
 80012da:	73fb      	strb	r3, [r7, #15]
	while(pu8StringCpy[Loc_u8Counter] !='\0')
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	4413      	add	r3, r2
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1ef      	bne.n	80012c8 <LCD_vidWriteString+0xe>
	}


}
 80012e8:	bf00      	nop
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012f4:	4b08      	ldr	r3, [pc, #32]	; (8001318 <HAL_Init+0x28>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a07      	ldr	r2, [pc, #28]	; (8001318 <HAL_Init+0x28>)
 80012fa:	f043 0310 	orr.w	r3, r3, #16
 80012fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001300:	2003      	movs	r0, #3
 8001302:	f000 fd9f 	bl	8001e44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001306:	2000      	movs	r0, #0
 8001308:	f7ff fe1c 	bl	8000f44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800130c:	f7ff fd2e 	bl	8000d6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40022000 	.word	0x40022000

0800131c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001320:	4b05      	ldr	r3, [pc, #20]	; (8001338 <HAL_IncTick+0x1c>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	461a      	mov	r2, r3
 8001326:	4b05      	ldr	r3, [pc, #20]	; (800133c <HAL_IncTick+0x20>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4413      	add	r3, r2
 800132c:	4a03      	ldr	r2, [pc, #12]	; (800133c <HAL_IncTick+0x20>)
 800132e:	6013      	str	r3, [r2, #0]
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr
 8001338:	20000008 	.word	0x20000008
 800133c:	20001a78 	.word	0x20001a78

08001340 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  return uwTick;
 8001344:	4b02      	ldr	r3, [pc, #8]	; (8001350 <HAL_GetTick+0x10>)
 8001346:	681b      	ldr	r3, [r3, #0]
}
 8001348:	4618      	mov	r0, r3
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr
 8001350:	20001a78 	.word	0x20001a78

08001354 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800135c:	f7ff fff0 	bl	8001340 <HAL_GetTick>
 8001360:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800136c:	d005      	beq.n	800137a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800136e:	4b09      	ldr	r3, [pc, #36]	; (8001394 <HAL_Delay+0x40>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	461a      	mov	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	4413      	add	r3, r2
 8001378:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800137a:	bf00      	nop
 800137c:	f7ff ffe0 	bl	8001340 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	429a      	cmp	r2, r3
 800138a:	d8f7      	bhi.n	800137c <HAL_Delay+0x28>
  {
  }
}
 800138c:	bf00      	nop
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20000008 	.word	0x20000008

08001398 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013a0:	2300      	movs	r3, #0
 80013a2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80013a4:	2300      	movs	r3, #0
 80013a6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80013a8:	2300      	movs	r3, #0
 80013aa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e0be      	b.n	8001538 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d109      	bne.n	80013dc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2200      	movs	r2, #0
 80013d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff fd00 	bl	8000ddc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f000 fbb1 	bl	8001b44 <ADC_ConversionStop_Disable>
 80013e2:	4603      	mov	r3, r0
 80013e4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ea:	f003 0310 	and.w	r3, r3, #16
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f040 8099 	bne.w	8001526 <HAL_ADC_Init+0x18e>
 80013f4:	7dfb      	ldrb	r3, [r7, #23]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f040 8095 	bne.w	8001526 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001400:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001404:	f023 0302 	bic.w	r3, r3, #2
 8001408:	f043 0202 	orr.w	r2, r3, #2
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001418:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	7b1b      	ldrb	r3, [r3, #12]
 800141e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001420:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	4313      	orrs	r3, r2
 8001426:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001430:	d003      	beq.n	800143a <HAL_ADC_Init+0xa2>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d102      	bne.n	8001440 <HAL_ADC_Init+0xa8>
 800143a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800143e:	e000      	b.n	8001442 <HAL_ADC_Init+0xaa>
 8001440:	2300      	movs	r3, #0
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	4313      	orrs	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	7d1b      	ldrb	r3, [r3, #20]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d119      	bne.n	8001484 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	7b1b      	ldrb	r3, [r3, #12]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d109      	bne.n	800146c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	3b01      	subs	r3, #1
 800145e:	035a      	lsls	r2, r3, #13
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	4313      	orrs	r3, r2
 8001464:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001468:	613b      	str	r3, [r7, #16]
 800146a:	e00b      	b.n	8001484 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001470:	f043 0220 	orr.w	r2, r3, #32
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147c:	f043 0201 	orr.w	r2, r3, #1
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	430a      	orrs	r2, r1
 8001496:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	689a      	ldr	r2, [r3, #8]
 800149e:	4b28      	ldr	r3, [pc, #160]	; (8001540 <HAL_ADC_Init+0x1a8>)
 80014a0:	4013      	ands	r3, r2
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	6812      	ldr	r2, [r2, #0]
 80014a6:	68b9      	ldr	r1, [r7, #8]
 80014a8:	430b      	orrs	r3, r1
 80014aa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014b4:	d003      	beq.n	80014be <HAL_ADC_Init+0x126>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d104      	bne.n	80014c8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	3b01      	subs	r3, #1
 80014c4:	051b      	lsls	r3, r3, #20
 80014c6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ce:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	430a      	orrs	r2, r1
 80014da:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	689a      	ldr	r2, [r3, #8]
 80014e2:	4b18      	ldr	r3, [pc, #96]	; (8001544 <HAL_ADC_Init+0x1ac>)
 80014e4:	4013      	ands	r3, r2
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d10b      	bne.n	8001504 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f6:	f023 0303 	bic.w	r3, r3, #3
 80014fa:	f043 0201 	orr.w	r2, r3, #1
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001502:	e018      	b.n	8001536 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001508:	f023 0312 	bic.w	r3, r3, #18
 800150c:	f043 0210 	orr.w	r2, r3, #16
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001518:	f043 0201 	orr.w	r2, r3, #1
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001524:	e007      	b.n	8001536 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800152a:	f043 0210 	orr.w	r2, r3, #16
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001536:	7dfb      	ldrb	r3, [r7, #23]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3718      	adds	r7, #24
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	ffe1f7fd 	.word	0xffe1f7fd
 8001544:	ff1f0efe 	.word	0xff1f0efe

08001548 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001550:	2300      	movs	r3, #0
 8001552:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800155a:	2b01      	cmp	r3, #1
 800155c:	d101      	bne.n	8001562 <HAL_ADC_Start+0x1a>
 800155e:	2302      	movs	r3, #2
 8001560:	e098      	b.n	8001694 <HAL_ADC_Start+0x14c>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2201      	movs	r2, #1
 8001566:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f000 fa98 	bl	8001aa0 <ADC_Enable>
 8001570:	4603      	mov	r3, r0
 8001572:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	2b00      	cmp	r3, #0
 8001578:	f040 8087 	bne.w	800168a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001580:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001584:	f023 0301 	bic.w	r3, r3, #1
 8001588:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a41      	ldr	r2, [pc, #260]	; (800169c <HAL_ADC_Start+0x154>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d105      	bne.n	80015a6 <HAL_ADC_Start+0x5e>
 800159a:	4b41      	ldr	r3, [pc, #260]	; (80016a0 <HAL_ADC_Start+0x158>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d115      	bne.n	80015d2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d026      	beq.n	800160e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015c8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80015d0:	e01d      	b.n	800160e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a2f      	ldr	r2, [pc, #188]	; (80016a0 <HAL_ADC_Start+0x158>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d004      	beq.n	80015f2 <HAL_ADC_Start+0xaa>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a2b      	ldr	r2, [pc, #172]	; (800169c <HAL_ADC_Start+0x154>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d10d      	bne.n	800160e <HAL_ADC_Start+0xc6>
 80015f2:	4b2b      	ldr	r3, [pc, #172]	; (80016a0 <HAL_ADC_Start+0x158>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d007      	beq.n	800160e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001602:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001606:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001612:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d006      	beq.n	8001628 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800161e:	f023 0206 	bic.w	r2, r3, #6
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	62da      	str	r2, [r3, #44]	; 0x2c
 8001626:	e002      	b.n	800162e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f06f 0202 	mvn.w	r2, #2
 800163e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800164a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800164e:	d113      	bne.n	8001678 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001654:	4a11      	ldr	r2, [pc, #68]	; (800169c <HAL_ADC_Start+0x154>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d105      	bne.n	8001666 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800165a:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <HAL_ADC_Start+0x158>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001662:	2b00      	cmp	r3, #0
 8001664:	d108      	bne.n	8001678 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	689a      	ldr	r2, [r3, #8]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001674:	609a      	str	r2, [r3, #8]
 8001676:	e00c      	b.n	8001692 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	689a      	ldr	r2, [r3, #8]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	e003      	b.n	8001692 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001692:	7bfb      	ldrb	r3, [r7, #15]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40012800 	.word	0x40012800
 80016a0:	40012400 	.word	0x40012400

080016a4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80016a4:	b590      	push	{r4, r7, lr}
 80016a6:	b087      	sub	sp, #28
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80016ae:	2300      	movs	r3, #0
 80016b0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80016b2:	2300      	movs	r3, #0
 80016b4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80016b6:	2300      	movs	r3, #0
 80016b8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80016ba:	f7ff fe41 	bl	8001340 <HAL_GetTick>
 80016be:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d00b      	beq.n	80016e6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d2:	f043 0220 	orr.w	r2, r3, #32
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e0c8      	b.n	8001878 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d12a      	bne.n	800174a <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d123      	bne.n	800174a <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001702:	e01a      	b.n	800173a <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800170a:	d016      	beq.n	800173a <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d007      	beq.n	8001722 <HAL_ADC_PollForConversion+0x7e>
 8001712:	f7ff fe15 	bl	8001340 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	429a      	cmp	r2, r3
 8001720:	d20b      	bcs.n	800173a <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001726:	f043 0204 	orr.w	r2, r3, #4
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e09e      	b.n	8001878 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d0dd      	beq.n	8001704 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001748:	e06c      	b.n	8001824 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800174a:	4b4d      	ldr	r3, [pc, #308]	; (8001880 <HAL_ADC_PollForConversion+0x1dc>)
 800174c:	681c      	ldr	r4, [r3, #0]
 800174e:	2002      	movs	r0, #2
 8001750:	f001 fa22 	bl	8002b98 <HAL_RCCEx_GetPeriphCLKFreq>
 8001754:	4603      	mov	r3, r0
 8001756:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	6919      	ldr	r1, [r3, #16]
 8001760:	4b48      	ldr	r3, [pc, #288]	; (8001884 <HAL_ADC_PollForConversion+0x1e0>)
 8001762:	400b      	ands	r3, r1
 8001764:	2b00      	cmp	r3, #0
 8001766:	d118      	bne.n	800179a <HAL_ADC_PollForConversion+0xf6>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	68d9      	ldr	r1, [r3, #12]
 800176e:	4b46      	ldr	r3, [pc, #280]	; (8001888 <HAL_ADC_PollForConversion+0x1e4>)
 8001770:	400b      	ands	r3, r1
 8001772:	2b00      	cmp	r3, #0
 8001774:	d111      	bne.n	800179a <HAL_ADC_PollForConversion+0xf6>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	6919      	ldr	r1, [r3, #16]
 800177c:	4b43      	ldr	r3, [pc, #268]	; (800188c <HAL_ADC_PollForConversion+0x1e8>)
 800177e:	400b      	ands	r3, r1
 8001780:	2b00      	cmp	r3, #0
 8001782:	d108      	bne.n	8001796 <HAL_ADC_PollForConversion+0xf2>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	68d9      	ldr	r1, [r3, #12]
 800178a:	4b41      	ldr	r3, [pc, #260]	; (8001890 <HAL_ADC_PollForConversion+0x1ec>)
 800178c:	400b      	ands	r3, r1
 800178e:	2b00      	cmp	r3, #0
 8001790:	d101      	bne.n	8001796 <HAL_ADC_PollForConversion+0xf2>
 8001792:	2314      	movs	r3, #20
 8001794:	e020      	b.n	80017d8 <HAL_ADC_PollForConversion+0x134>
 8001796:	2329      	movs	r3, #41	; 0x29
 8001798:	e01e      	b.n	80017d8 <HAL_ADC_PollForConversion+0x134>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	6919      	ldr	r1, [r3, #16]
 80017a0:	4b3a      	ldr	r3, [pc, #232]	; (800188c <HAL_ADC_PollForConversion+0x1e8>)
 80017a2:	400b      	ands	r3, r1
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d106      	bne.n	80017b6 <HAL_ADC_PollForConversion+0x112>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	68d9      	ldr	r1, [r3, #12]
 80017ae:	4b38      	ldr	r3, [pc, #224]	; (8001890 <HAL_ADC_PollForConversion+0x1ec>)
 80017b0:	400b      	ands	r3, r1
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d00d      	beq.n	80017d2 <HAL_ADC_PollForConversion+0x12e>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6919      	ldr	r1, [r3, #16]
 80017bc:	4b35      	ldr	r3, [pc, #212]	; (8001894 <HAL_ADC_PollForConversion+0x1f0>)
 80017be:	400b      	ands	r3, r1
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d108      	bne.n	80017d6 <HAL_ADC_PollForConversion+0x132>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	68d9      	ldr	r1, [r3, #12]
 80017ca:	4b32      	ldr	r3, [pc, #200]	; (8001894 <HAL_ADC_PollForConversion+0x1f0>)
 80017cc:	400b      	ands	r3, r1
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d101      	bne.n	80017d6 <HAL_ADC_PollForConversion+0x132>
 80017d2:	2354      	movs	r3, #84	; 0x54
 80017d4:	e000      	b.n	80017d8 <HAL_ADC_PollForConversion+0x134>
 80017d6:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80017d8:	fb02 f303 	mul.w	r3, r2, r3
 80017dc:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80017de:	e01d      	b.n	800181c <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e6:	d016      	beq.n	8001816 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d007      	beq.n	80017fe <HAL_ADC_PollForConversion+0x15a>
 80017ee:	f7ff fda7 	bl	8001340 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d20b      	bcs.n	8001816 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001802:	f043 0204 	orr.w	r2, r3, #4
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e030      	b.n	8001878 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	3301      	adds	r3, #1
 800181a:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	429a      	cmp	r2, r3
 8001822:	d8dd      	bhi.n	80017e0 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f06f 0212 	mvn.w	r2, #18
 800182c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001832:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001844:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001848:	d115      	bne.n	8001876 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800184e:	2b00      	cmp	r3, #0
 8001850:	d111      	bne.n	8001876 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001856:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001862:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d105      	bne.n	8001876 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186e:	f043 0201 	orr.w	r2, r3, #1
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	371c      	adds	r7, #28
 800187c:	46bd      	mov	sp, r7
 800187e:	bd90      	pop	{r4, r7, pc}
 8001880:	20000000 	.word	0x20000000
 8001884:	24924924 	.word	0x24924924
 8001888:	00924924 	.word	0x00924924
 800188c:	12492492 	.word	0x12492492
 8001890:	00492492 	.word	0x00492492
 8001894:	00249249 	.word	0x00249249

08001898 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr

080018b0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018ba:	2300      	movs	r3, #0
 80018bc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80018be:	2300      	movs	r3, #0
 80018c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d101      	bne.n	80018d0 <HAL_ADC_ConfigChannel+0x20>
 80018cc:	2302      	movs	r3, #2
 80018ce:	e0dc      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x1da>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2201      	movs	r2, #1
 80018d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	2b06      	cmp	r3, #6
 80018de:	d81c      	bhi.n	800191a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685a      	ldr	r2, [r3, #4]
 80018ea:	4613      	mov	r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	4413      	add	r3, r2
 80018f0:	3b05      	subs	r3, #5
 80018f2:	221f      	movs	r2, #31
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	4019      	ands	r1, r3
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	6818      	ldr	r0, [r3, #0]
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685a      	ldr	r2, [r3, #4]
 8001904:	4613      	mov	r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4413      	add	r3, r2
 800190a:	3b05      	subs	r3, #5
 800190c:	fa00 f203 	lsl.w	r2, r0, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	430a      	orrs	r2, r1
 8001916:	635a      	str	r2, [r3, #52]	; 0x34
 8001918:	e03c      	b.n	8001994 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	2b0c      	cmp	r3, #12
 8001920:	d81c      	bhi.n	800195c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	4613      	mov	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4413      	add	r3, r2
 8001932:	3b23      	subs	r3, #35	; 0x23
 8001934:	221f      	movs	r2, #31
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	43db      	mvns	r3, r3
 800193c:	4019      	ands	r1, r3
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	6818      	ldr	r0, [r3, #0]
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	4613      	mov	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	3b23      	subs	r3, #35	; 0x23
 800194e:	fa00 f203 	lsl.w	r2, r0, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	430a      	orrs	r2, r1
 8001958:	631a      	str	r2, [r3, #48]	; 0x30
 800195a:	e01b      	b.n	8001994 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685a      	ldr	r2, [r3, #4]
 8001966:	4613      	mov	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	3b41      	subs	r3, #65	; 0x41
 800196e:	221f      	movs	r2, #31
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	4019      	ands	r1, r3
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	6818      	ldr	r0, [r3, #0]
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685a      	ldr	r2, [r3, #4]
 8001980:	4613      	mov	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	3b41      	subs	r3, #65	; 0x41
 8001988:	fa00 f203 	lsl.w	r2, r0, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	430a      	orrs	r2, r1
 8001992:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b09      	cmp	r3, #9
 800199a:	d91c      	bls.n	80019d6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	68d9      	ldr	r1, [r3, #12]
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	4613      	mov	r3, r2
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	4413      	add	r3, r2
 80019ac:	3b1e      	subs	r3, #30
 80019ae:	2207      	movs	r2, #7
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	4019      	ands	r1, r3
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	6898      	ldr	r0, [r3, #8]
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	4613      	mov	r3, r2
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	4413      	add	r3, r2
 80019c6:	3b1e      	subs	r3, #30
 80019c8:	fa00 f203 	lsl.w	r2, r0, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	430a      	orrs	r2, r1
 80019d2:	60da      	str	r2, [r3, #12]
 80019d4:	e019      	b.n	8001a0a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6919      	ldr	r1, [r3, #16]
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4613      	mov	r3, r2
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	4413      	add	r3, r2
 80019e6:	2207      	movs	r2, #7
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	43db      	mvns	r3, r3
 80019ee:	4019      	ands	r1, r3
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	6898      	ldr	r0, [r3, #8]
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	4613      	mov	r3, r2
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	4413      	add	r3, r2
 80019fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	430a      	orrs	r2, r1
 8001a08:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2b10      	cmp	r3, #16
 8001a10:	d003      	beq.n	8001a1a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a16:	2b11      	cmp	r3, #17
 8001a18:	d132      	bne.n	8001a80 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a1d      	ldr	r2, [pc, #116]	; (8001a94 <HAL_ADC_ConfigChannel+0x1e4>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d125      	bne.n	8001a70 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d126      	bne.n	8001a80 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	689a      	ldr	r2, [r3, #8]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001a40:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2b10      	cmp	r3, #16
 8001a48:	d11a      	bne.n	8001a80 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a4a:	4b13      	ldr	r3, [pc, #76]	; (8001a98 <HAL_ADC_ConfigChannel+0x1e8>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a13      	ldr	r2, [pc, #76]	; (8001a9c <HAL_ADC_ConfigChannel+0x1ec>)
 8001a50:	fba2 2303 	umull	r2, r3, r2, r3
 8001a54:	0c9a      	lsrs	r2, r3, #18
 8001a56:	4613      	mov	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4413      	add	r3, r2
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a60:	e002      	b.n	8001a68 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	3b01      	subs	r3, #1
 8001a66:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1f9      	bne.n	8001a62 <HAL_ADC_ConfigChannel+0x1b2>
 8001a6e:	e007      	b.n	8001a80 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a74:	f043 0220 	orr.w	r2, r3, #32
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3714      	adds	r7, #20
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr
 8001a94:	40012400 	.word	0x40012400
 8001a98:	20000000 	.word	0x20000000
 8001a9c:	431bde83 	.word	0x431bde83

08001aa0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001aac:	2300      	movs	r3, #0
 8001aae:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d039      	beq.n	8001b32 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f042 0201 	orr.w	r2, r2, #1
 8001acc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ace:	4b1b      	ldr	r3, [pc, #108]	; (8001b3c <ADC_Enable+0x9c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a1b      	ldr	r2, [pc, #108]	; (8001b40 <ADC_Enable+0xa0>)
 8001ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad8:	0c9b      	lsrs	r3, r3, #18
 8001ada:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001adc:	e002      	b.n	8001ae4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1f9      	bne.n	8001ade <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001aea:	f7ff fc29 	bl	8001340 <HAL_GetTick>
 8001aee:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001af0:	e018      	b.n	8001b24 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001af2:	f7ff fc25 	bl	8001340 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d911      	bls.n	8001b24 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b04:	f043 0210 	orr.w	r2, r3, #16
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b10:	f043 0201 	orr.w	r2, r3, #1
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e007      	b.n	8001b34 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d1df      	bne.n	8001af2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20000000 	.word	0x20000000
 8001b40:	431bde83 	.word	0x431bde83

08001b44 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d127      	bne.n	8001bae <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f022 0201 	bic.w	r2, r2, #1
 8001b6c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b6e:	f7ff fbe7 	bl	8001340 <HAL_GetTick>
 8001b72:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b74:	e014      	b.n	8001ba0 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b76:	f7ff fbe3 	bl	8001340 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d90d      	bls.n	8001ba0 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b88:	f043 0210 	orr.w	r2, r3, #16
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b94:	f043 0201 	orr.w	r2, r3, #1
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e007      	b.n	8001bb0 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d0e3      	beq.n	8001b76 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3710      	adds	r7, #16
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001bb8:	b590      	push	{r4, r7, lr}
 8001bba:	b087      	sub	sp, #28
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d101      	bne.n	8001bd6 <HAL_ADCEx_Calibration_Start+0x1e>
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	e086      	b.n	8001ce4 <HAL_ADCEx_Calibration_Start+0x12c>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7ff ffb0 	bl	8001b44 <ADC_ConversionStop_Disable>
 8001be4:	4603      	mov	r3, r0
 8001be6:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001be8:	7dfb      	ldrb	r3, [r7, #23]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d175      	bne.n	8001cda <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001bf6:	f023 0302 	bic.w	r3, r3, #2
 8001bfa:	f043 0202 	orr.w	r2, r3, #2
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001c02:	4b3a      	ldr	r3, [pc, #232]	; (8001cec <HAL_ADCEx_Calibration_Start+0x134>)
 8001c04:	681c      	ldr	r4, [r3, #0]
 8001c06:	2002      	movs	r0, #2
 8001c08:	f000 ffc6 	bl	8002b98 <HAL_RCCEx_GetPeriphCLKFreq>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001c12:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001c14:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001c16:	e002      	b.n	8001c1e <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1f9      	bne.n	8001c18 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f7ff ff3b 	bl	8001aa0 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f042 0208 	orr.w	r2, r2, #8
 8001c38:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001c3a:	f7ff fb81 	bl	8001340 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001c40:	e014      	b.n	8001c6c <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001c42:	f7ff fb7d 	bl	8001340 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b0a      	cmp	r3, #10
 8001c4e:	d90d      	bls.n	8001c6c <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c54:	f023 0312 	bic.w	r3, r3, #18
 8001c58:	f043 0210 	orr.w	r2, r3, #16
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e03b      	b.n	8001ce4 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 0308 	and.w	r3, r3, #8
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1e3      	bne.n	8001c42 <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f042 0204 	orr.w	r2, r2, #4
 8001c88:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001c8a:	f7ff fb59 	bl	8001340 <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001c90:	e014      	b.n	8001cbc <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001c92:	f7ff fb55 	bl	8001340 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b0a      	cmp	r3, #10
 8001c9e:	d90d      	bls.n	8001cbc <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca4:	f023 0312 	bic.w	r3, r3, #18
 8001ca8:	f043 0210 	orr.w	r2, r3, #16
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e013      	b.n	8001ce4 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 0304 	and.w	r3, r3, #4
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1e3      	bne.n	8001c92 <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cce:	f023 0303 	bic.w	r3, r3, #3
 8001cd2:	f043 0201 	orr.w	r2, r3, #1
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001ce2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	371c      	adds	r7, #28
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd90      	pop	{r4, r7, pc}
 8001cec:	20000000 	.word	0x20000000

08001cf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d00:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <__NVIC_SetPriorityGrouping+0x44>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d06:	68ba      	ldr	r2, [r7, #8]
 8001d08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d22:	4a04      	ldr	r2, [pc, #16]	; (8001d34 <__NVIC_SetPriorityGrouping+0x44>)
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	60d3      	str	r3, [r2, #12]
}
 8001d28:	bf00      	nop
 8001d2a:	3714      	adds	r7, #20
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bc80      	pop	{r7}
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d3c:	4b04      	ldr	r3, [pc, #16]	; (8001d50 <__NVIC_GetPriorityGrouping+0x18>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	0a1b      	lsrs	r3, r3, #8
 8001d42:	f003 0307 	and.w	r3, r3, #7
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bc80      	pop	{r7}
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	e000ed00 	.word	0xe000ed00

08001d54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	db0b      	blt.n	8001d7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d66:	79fb      	ldrb	r3, [r7, #7]
 8001d68:	f003 021f 	and.w	r2, r3, #31
 8001d6c:	4906      	ldr	r1, [pc, #24]	; (8001d88 <__NVIC_EnableIRQ+0x34>)
 8001d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d72:	095b      	lsrs	r3, r3, #5
 8001d74:	2001      	movs	r0, #1
 8001d76:	fa00 f202 	lsl.w	r2, r0, r2
 8001d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr
 8001d88:	e000e100 	.word	0xe000e100

08001d8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	6039      	str	r1, [r7, #0]
 8001d96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	db0a      	blt.n	8001db6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	490c      	ldr	r1, [pc, #48]	; (8001dd8 <__NVIC_SetPriority+0x4c>)
 8001da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001daa:	0112      	lsls	r2, r2, #4
 8001dac:	b2d2      	uxtb	r2, r2
 8001dae:	440b      	add	r3, r1
 8001db0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001db4:	e00a      	b.n	8001dcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	4908      	ldr	r1, [pc, #32]	; (8001ddc <__NVIC_SetPriority+0x50>)
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	3b04      	subs	r3, #4
 8001dc4:	0112      	lsls	r2, r2, #4
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	440b      	add	r3, r1
 8001dca:	761a      	strb	r2, [r3, #24]
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bc80      	pop	{r7}
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	e000e100 	.word	0xe000e100
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b089      	sub	sp, #36	; 0x24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f1c3 0307 	rsb	r3, r3, #7
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	bf28      	it	cs
 8001dfe:	2304      	movcs	r3, #4
 8001e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3304      	adds	r3, #4
 8001e06:	2b06      	cmp	r3, #6
 8001e08:	d902      	bls.n	8001e10 <NVIC_EncodePriority+0x30>
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	3b03      	subs	r3, #3
 8001e0e:	e000      	b.n	8001e12 <NVIC_EncodePriority+0x32>
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e14:	f04f 32ff 	mov.w	r2, #4294967295
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43da      	mvns	r2, r3
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	401a      	ands	r2, r3
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e28:	f04f 31ff 	mov.w	r1, #4294967295
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e32:	43d9      	mvns	r1, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e38:	4313      	orrs	r3, r2
         );
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3724      	adds	r7, #36	; 0x24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr

08001e44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7ff ff4f 	bl	8001cf0 <__NVIC_SetPriorityGrouping>
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b086      	sub	sp, #24
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	4603      	mov	r3, r0
 8001e62:	60b9      	str	r1, [r7, #8]
 8001e64:	607a      	str	r2, [r7, #4]
 8001e66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e6c:	f7ff ff64 	bl	8001d38 <__NVIC_GetPriorityGrouping>
 8001e70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	68b9      	ldr	r1, [r7, #8]
 8001e76:	6978      	ldr	r0, [r7, #20]
 8001e78:	f7ff ffb2 	bl	8001de0 <NVIC_EncodePriority>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e82:	4611      	mov	r1, r2
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff ff81 	bl	8001d8c <__NVIC_SetPriority>
}
 8001e8a:	bf00      	nop
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	4603      	mov	r3, r0
 8001e9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff ff57 	bl	8001d54 <__NVIC_EnableIRQ>
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
	...

08001eb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b08b      	sub	sp, #44	; 0x2c
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ec2:	e127      	b.n	8002114 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	69fa      	ldr	r2, [r7, #28]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	f040 8116 	bne.w	800210e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	2b12      	cmp	r3, #18
 8001ee8:	d034      	beq.n	8001f54 <HAL_GPIO_Init+0xa4>
 8001eea:	2b12      	cmp	r3, #18
 8001eec:	d80d      	bhi.n	8001f0a <HAL_GPIO_Init+0x5a>
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d02b      	beq.n	8001f4a <HAL_GPIO_Init+0x9a>
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d804      	bhi.n	8001f00 <HAL_GPIO_Init+0x50>
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d031      	beq.n	8001f5e <HAL_GPIO_Init+0xae>
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d01c      	beq.n	8001f38 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001efe:	e048      	b.n	8001f92 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001f00:	2b03      	cmp	r3, #3
 8001f02:	d043      	beq.n	8001f8c <HAL_GPIO_Init+0xdc>
 8001f04:	2b11      	cmp	r3, #17
 8001f06:	d01b      	beq.n	8001f40 <HAL_GPIO_Init+0x90>
          break;
 8001f08:	e043      	b.n	8001f92 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001f0a:	4a89      	ldr	r2, [pc, #548]	; (8002130 <HAL_GPIO_Init+0x280>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d026      	beq.n	8001f5e <HAL_GPIO_Init+0xae>
 8001f10:	4a87      	ldr	r2, [pc, #540]	; (8002130 <HAL_GPIO_Init+0x280>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d806      	bhi.n	8001f24 <HAL_GPIO_Init+0x74>
 8001f16:	4a87      	ldr	r2, [pc, #540]	; (8002134 <HAL_GPIO_Init+0x284>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d020      	beq.n	8001f5e <HAL_GPIO_Init+0xae>
 8001f1c:	4a86      	ldr	r2, [pc, #536]	; (8002138 <HAL_GPIO_Init+0x288>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d01d      	beq.n	8001f5e <HAL_GPIO_Init+0xae>
          break;
 8001f22:	e036      	b.n	8001f92 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001f24:	4a85      	ldr	r2, [pc, #532]	; (800213c <HAL_GPIO_Init+0x28c>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d019      	beq.n	8001f5e <HAL_GPIO_Init+0xae>
 8001f2a:	4a85      	ldr	r2, [pc, #532]	; (8002140 <HAL_GPIO_Init+0x290>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d016      	beq.n	8001f5e <HAL_GPIO_Init+0xae>
 8001f30:	4a84      	ldr	r2, [pc, #528]	; (8002144 <HAL_GPIO_Init+0x294>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d013      	beq.n	8001f5e <HAL_GPIO_Init+0xae>
          break;
 8001f36:	e02c      	b.n	8001f92 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	623b      	str	r3, [r7, #32]
          break;
 8001f3e:	e028      	b.n	8001f92 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	3304      	adds	r3, #4
 8001f46:	623b      	str	r3, [r7, #32]
          break;
 8001f48:	e023      	b.n	8001f92 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	3308      	adds	r3, #8
 8001f50:	623b      	str	r3, [r7, #32]
          break;
 8001f52:	e01e      	b.n	8001f92 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	330c      	adds	r3, #12
 8001f5a:	623b      	str	r3, [r7, #32]
          break;
 8001f5c:	e019      	b.n	8001f92 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d102      	bne.n	8001f6c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f66:	2304      	movs	r3, #4
 8001f68:	623b      	str	r3, [r7, #32]
          break;
 8001f6a:	e012      	b.n	8001f92 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d105      	bne.n	8001f80 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f74:	2308      	movs	r3, #8
 8001f76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	69fa      	ldr	r2, [r7, #28]
 8001f7c:	611a      	str	r2, [r3, #16]
          break;
 8001f7e:	e008      	b.n	8001f92 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f80:	2308      	movs	r3, #8
 8001f82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	69fa      	ldr	r2, [r7, #28]
 8001f88:	615a      	str	r2, [r3, #20]
          break;
 8001f8a:	e002      	b.n	8001f92 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	623b      	str	r3, [r7, #32]
          break;
 8001f90:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	2bff      	cmp	r3, #255	; 0xff
 8001f96:	d801      	bhi.n	8001f9c <HAL_GPIO_Init+0xec>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	e001      	b.n	8001fa0 <HAL_GPIO_Init+0xf0>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3304      	adds	r3, #4
 8001fa0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	2bff      	cmp	r3, #255	; 0xff
 8001fa6:	d802      	bhi.n	8001fae <HAL_GPIO_Init+0xfe>
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	e002      	b.n	8001fb4 <HAL_GPIO_Init+0x104>
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	3b08      	subs	r3, #8
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	210f      	movs	r1, #15
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	401a      	ands	r2, r3
 8001fc6:	6a39      	ldr	r1, [r7, #32]
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	fa01 f303 	lsl.w	r3, r1, r3
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	f000 8096 	beq.w	800210e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fe2:	4b59      	ldr	r3, [pc, #356]	; (8002148 <HAL_GPIO_Init+0x298>)
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	4a58      	ldr	r2, [pc, #352]	; (8002148 <HAL_GPIO_Init+0x298>)
 8001fe8:	f043 0301 	orr.w	r3, r3, #1
 8001fec:	6193      	str	r3, [r2, #24]
 8001fee:	4b56      	ldr	r3, [pc, #344]	; (8002148 <HAL_GPIO_Init+0x298>)
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	60bb      	str	r3, [r7, #8]
 8001ff8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ffa:	4a54      	ldr	r2, [pc, #336]	; (800214c <HAL_GPIO_Init+0x29c>)
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffe:	089b      	lsrs	r3, r3, #2
 8002000:	3302      	adds	r3, #2
 8002002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002006:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	220f      	movs	r2, #15
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43db      	mvns	r3, r3
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	4013      	ands	r3, r2
 800201c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a4b      	ldr	r2, [pc, #300]	; (8002150 <HAL_GPIO_Init+0x2a0>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d013      	beq.n	800204e <HAL_GPIO_Init+0x19e>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a4a      	ldr	r2, [pc, #296]	; (8002154 <HAL_GPIO_Init+0x2a4>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d00d      	beq.n	800204a <HAL_GPIO_Init+0x19a>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a49      	ldr	r2, [pc, #292]	; (8002158 <HAL_GPIO_Init+0x2a8>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d007      	beq.n	8002046 <HAL_GPIO_Init+0x196>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a48      	ldr	r2, [pc, #288]	; (800215c <HAL_GPIO_Init+0x2ac>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d101      	bne.n	8002042 <HAL_GPIO_Init+0x192>
 800203e:	2303      	movs	r3, #3
 8002040:	e006      	b.n	8002050 <HAL_GPIO_Init+0x1a0>
 8002042:	2304      	movs	r3, #4
 8002044:	e004      	b.n	8002050 <HAL_GPIO_Init+0x1a0>
 8002046:	2302      	movs	r3, #2
 8002048:	e002      	b.n	8002050 <HAL_GPIO_Init+0x1a0>
 800204a:	2301      	movs	r3, #1
 800204c:	e000      	b.n	8002050 <HAL_GPIO_Init+0x1a0>
 800204e:	2300      	movs	r3, #0
 8002050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002052:	f002 0203 	and.w	r2, r2, #3
 8002056:	0092      	lsls	r2, r2, #2
 8002058:	4093      	lsls	r3, r2
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	4313      	orrs	r3, r2
 800205e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002060:	493a      	ldr	r1, [pc, #232]	; (800214c <HAL_GPIO_Init+0x29c>)
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	089b      	lsrs	r3, r3, #2
 8002066:	3302      	adds	r3, #2
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d006      	beq.n	8002088 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800207a:	4b39      	ldr	r3, [pc, #228]	; (8002160 <HAL_GPIO_Init+0x2b0>)
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	4938      	ldr	r1, [pc, #224]	; (8002160 <HAL_GPIO_Init+0x2b0>)
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	4313      	orrs	r3, r2
 8002084:	600b      	str	r3, [r1, #0]
 8002086:	e006      	b.n	8002096 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002088:	4b35      	ldr	r3, [pc, #212]	; (8002160 <HAL_GPIO_Init+0x2b0>)
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	43db      	mvns	r3, r3
 8002090:	4933      	ldr	r1, [pc, #204]	; (8002160 <HAL_GPIO_Init+0x2b0>)
 8002092:	4013      	ands	r3, r2
 8002094:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d006      	beq.n	80020b0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020a2:	4b2f      	ldr	r3, [pc, #188]	; (8002160 <HAL_GPIO_Init+0x2b0>)
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	492e      	ldr	r1, [pc, #184]	; (8002160 <HAL_GPIO_Init+0x2b0>)
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	604b      	str	r3, [r1, #4]
 80020ae:	e006      	b.n	80020be <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020b0:	4b2b      	ldr	r3, [pc, #172]	; (8002160 <HAL_GPIO_Init+0x2b0>)
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	43db      	mvns	r3, r3
 80020b8:	4929      	ldr	r1, [pc, #164]	; (8002160 <HAL_GPIO_Init+0x2b0>)
 80020ba:	4013      	ands	r3, r2
 80020bc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d006      	beq.n	80020d8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020ca:	4b25      	ldr	r3, [pc, #148]	; (8002160 <HAL_GPIO_Init+0x2b0>)
 80020cc:	689a      	ldr	r2, [r3, #8]
 80020ce:	4924      	ldr	r1, [pc, #144]	; (8002160 <HAL_GPIO_Init+0x2b0>)
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	608b      	str	r3, [r1, #8]
 80020d6:	e006      	b.n	80020e6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020d8:	4b21      	ldr	r3, [pc, #132]	; (8002160 <HAL_GPIO_Init+0x2b0>)
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	43db      	mvns	r3, r3
 80020e0:	491f      	ldr	r1, [pc, #124]	; (8002160 <HAL_GPIO_Init+0x2b0>)
 80020e2:	4013      	ands	r3, r2
 80020e4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d006      	beq.n	8002100 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020f2:	4b1b      	ldr	r3, [pc, #108]	; (8002160 <HAL_GPIO_Init+0x2b0>)
 80020f4:	68da      	ldr	r2, [r3, #12]
 80020f6:	491a      	ldr	r1, [pc, #104]	; (8002160 <HAL_GPIO_Init+0x2b0>)
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	60cb      	str	r3, [r1, #12]
 80020fe:	e006      	b.n	800210e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002100:	4b17      	ldr	r3, [pc, #92]	; (8002160 <HAL_GPIO_Init+0x2b0>)
 8002102:	68da      	ldr	r2, [r3, #12]
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	43db      	mvns	r3, r3
 8002108:	4915      	ldr	r1, [pc, #84]	; (8002160 <HAL_GPIO_Init+0x2b0>)
 800210a:	4013      	ands	r3, r2
 800210c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	3301      	adds	r3, #1
 8002112:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211a:	fa22 f303 	lsr.w	r3, r2, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	f47f aed0 	bne.w	8001ec4 <HAL_GPIO_Init+0x14>
  }
}
 8002124:	bf00      	nop
 8002126:	372c      	adds	r7, #44	; 0x2c
 8002128:	46bd      	mov	sp, r7
 800212a:	bc80      	pop	{r7}
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	10210000 	.word	0x10210000
 8002134:	10110000 	.word	0x10110000
 8002138:	10120000 	.word	0x10120000
 800213c:	10310000 	.word	0x10310000
 8002140:	10320000 	.word	0x10320000
 8002144:	10220000 	.word	0x10220000
 8002148:	40021000 	.word	0x40021000
 800214c:	40010000 	.word	0x40010000
 8002150:	40010800 	.word	0x40010800
 8002154:	40010c00 	.word	0x40010c00
 8002158:	40011000 	.word	0x40011000
 800215c:	40011400 	.word	0x40011400
 8002160:	40010400 	.word	0x40010400

08002164 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	460b      	mov	r3, r1
 800216e:	807b      	strh	r3, [r7, #2]
 8002170:	4613      	mov	r3, r2
 8002172:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002174:	787b      	ldrb	r3, [r7, #1]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800217a:	887a      	ldrh	r2, [r7, #2]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002180:	e003      	b.n	800218a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002182:	887b      	ldrh	r3, [r7, #2]
 8002184:	041a      	lsls	r2, r3, #16
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	611a      	str	r2, [r3, #16]
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	bc80      	pop	{r7}
 8002192:	4770      	bx	lr

08002194 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e26c      	b.n	8002680 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f000 8087 	beq.w	80022c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021b4:	4b92      	ldr	r3, [pc, #584]	; (8002400 <HAL_RCC_OscConfig+0x26c>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f003 030c 	and.w	r3, r3, #12
 80021bc:	2b04      	cmp	r3, #4
 80021be:	d00c      	beq.n	80021da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021c0:	4b8f      	ldr	r3, [pc, #572]	; (8002400 <HAL_RCC_OscConfig+0x26c>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f003 030c 	and.w	r3, r3, #12
 80021c8:	2b08      	cmp	r3, #8
 80021ca:	d112      	bne.n	80021f2 <HAL_RCC_OscConfig+0x5e>
 80021cc:	4b8c      	ldr	r3, [pc, #560]	; (8002400 <HAL_RCC_OscConfig+0x26c>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021d8:	d10b      	bne.n	80021f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021da:	4b89      	ldr	r3, [pc, #548]	; (8002400 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d06c      	beq.n	80022c0 <HAL_RCC_OscConfig+0x12c>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d168      	bne.n	80022c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e246      	b.n	8002680 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021fa:	d106      	bne.n	800220a <HAL_RCC_OscConfig+0x76>
 80021fc:	4b80      	ldr	r3, [pc, #512]	; (8002400 <HAL_RCC_OscConfig+0x26c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a7f      	ldr	r2, [pc, #508]	; (8002400 <HAL_RCC_OscConfig+0x26c>)
 8002202:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002206:	6013      	str	r3, [r2, #0]
 8002208:	e02e      	b.n	8002268 <HAL_RCC_OscConfig+0xd4>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d10c      	bne.n	800222c <HAL_RCC_OscConfig+0x98>
 8002212:	4b7b      	ldr	r3, [pc, #492]	; (8002400 <HAL_RCC_OscConfig+0x26c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a7a      	ldr	r2, [pc, #488]	; (8002400 <HAL_RCC_OscConfig+0x26c>)
 8002218:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800221c:	6013      	str	r3, [r2, #0]
 800221e:	4b78      	ldr	r3, [pc, #480]	; (8002400 <HAL_RCC_OscConfig+0x26c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a77      	ldr	r2, [pc, #476]	; (8002400 <HAL_RCC_OscConfig+0x26c>)
 8002224:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002228:	6013      	str	r3, [r2, #0]
 800222a:	e01d      	b.n	8002268 <HAL_RCC_OscConfig+0xd4>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002234:	d10c      	bne.n	8002250 <HAL_RCC_OscConfig+0xbc>
 8002236:	4b72      	ldr	r3, [pc, #456]	; (8002400 <HAL_RCC_OscConfig+0x26c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a71      	ldr	r2, [pc, #452]	; (8002400 <HAL_RCC_OscConfig+0x26c>)
 800223c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002240:	6013      	str	r3, [r2, #0]
 8002242:	4b6f      	ldr	r3, [pc, #444]	; (8002400 <HAL_RCC_OscConfig+0x26c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a6e      	ldr	r2, [pc, #440]	; (8002400 <HAL_RCC_OscConfig+0x26c>)
 8002248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800224c:	6013      	str	r3, [r2, #0]
 800224e:	e00b      	b.n	8002268 <HAL_RCC_OscConfig+0xd4>
 8002250:	4b6b      	ldr	r3, [pc, #428]	; (8002400 <HAL_RCC_OscConfig+0x26c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a6a      	ldr	r2, [pc, #424]	; (8002400 <HAL_RCC_OscConfig+0x26c>)
 8002256:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800225a:	6013      	str	r3, [r2, #0]
 800225c:	4b68      	ldr	r3, [pc, #416]	; (8002400 <HAL_RCC_OscConfig+0x26c>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a67      	ldr	r2, [pc, #412]	; (8002400 <HAL_RCC_OscConfig+0x26c>)
 8002262:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002266:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d013      	beq.n	8002298 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002270:	f7ff f866 	bl	8001340 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002278:	f7ff f862 	bl	8001340 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b64      	cmp	r3, #100	; 0x64
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e1fa      	b.n	8002680 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228a:	4b5d      	ldr	r3, [pc, #372]	; (8002400 <HAL_RCC_OscConfig+0x26c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d0f0      	beq.n	8002278 <HAL_RCC_OscConfig+0xe4>
 8002296:	e014      	b.n	80022c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002298:	f7ff f852 	bl	8001340 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022a0:	f7ff f84e 	bl	8001340 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b64      	cmp	r3, #100	; 0x64
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e1e6      	b.n	8002680 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022b2:	4b53      	ldr	r3, [pc, #332]	; (8002400 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1f0      	bne.n	80022a0 <HAL_RCC_OscConfig+0x10c>
 80022be:	e000      	b.n	80022c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d063      	beq.n	8002396 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022ce:	4b4c      	ldr	r3, [pc, #304]	; (8002400 <HAL_RCC_OscConfig+0x26c>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f003 030c 	and.w	r3, r3, #12
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00b      	beq.n	80022f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022da:	4b49      	ldr	r3, [pc, #292]	; (8002400 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f003 030c 	and.w	r3, r3, #12
 80022e2:	2b08      	cmp	r3, #8
 80022e4:	d11c      	bne.n	8002320 <HAL_RCC_OscConfig+0x18c>
 80022e6:	4b46      	ldr	r3, [pc, #280]	; (8002400 <HAL_RCC_OscConfig+0x26c>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d116      	bne.n	8002320 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022f2:	4b43      	ldr	r3, [pc, #268]	; (8002400 <HAL_RCC_OscConfig+0x26c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d005      	beq.n	800230a <HAL_RCC_OscConfig+0x176>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d001      	beq.n	800230a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e1ba      	b.n	8002680 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800230a:	4b3d      	ldr	r3, [pc, #244]	; (8002400 <HAL_RCC_OscConfig+0x26c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	4939      	ldr	r1, [pc, #228]	; (8002400 <HAL_RCC_OscConfig+0x26c>)
 800231a:	4313      	orrs	r3, r2
 800231c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800231e:	e03a      	b.n	8002396 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d020      	beq.n	800236a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002328:	4b36      	ldr	r3, [pc, #216]	; (8002404 <HAL_RCC_OscConfig+0x270>)
 800232a:	2201      	movs	r2, #1
 800232c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232e:	f7ff f807 	bl	8001340 <HAL_GetTick>
 8002332:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002334:	e008      	b.n	8002348 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002336:	f7ff f803 	bl	8001340 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e19b      	b.n	8002680 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002348:	4b2d      	ldr	r3, [pc, #180]	; (8002400 <HAL_RCC_OscConfig+0x26c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d0f0      	beq.n	8002336 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002354:	4b2a      	ldr	r3, [pc, #168]	; (8002400 <HAL_RCC_OscConfig+0x26c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	695b      	ldr	r3, [r3, #20]
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	4927      	ldr	r1, [pc, #156]	; (8002400 <HAL_RCC_OscConfig+0x26c>)
 8002364:	4313      	orrs	r3, r2
 8002366:	600b      	str	r3, [r1, #0]
 8002368:	e015      	b.n	8002396 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800236a:	4b26      	ldr	r3, [pc, #152]	; (8002404 <HAL_RCC_OscConfig+0x270>)
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002370:	f7fe ffe6 	bl	8001340 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002378:	f7fe ffe2 	bl	8001340 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e17a      	b.n	8002680 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800238a:	4b1d      	ldr	r3, [pc, #116]	; (8002400 <HAL_RCC_OscConfig+0x26c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1f0      	bne.n	8002378 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0308 	and.w	r3, r3, #8
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d03a      	beq.n	8002418 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d019      	beq.n	80023de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023aa:	4b17      	ldr	r3, [pc, #92]	; (8002408 <HAL_RCC_OscConfig+0x274>)
 80023ac:	2201      	movs	r2, #1
 80023ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b0:	f7fe ffc6 	bl	8001340 <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023b8:	f7fe ffc2 	bl	8001340 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e15a      	b.n	8002680 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ca:	4b0d      	ldr	r3, [pc, #52]	; (8002400 <HAL_RCC_OscConfig+0x26c>)
 80023cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d0f0      	beq.n	80023b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023d6:	2001      	movs	r0, #1
 80023d8:	f000 fb0a 	bl	80029f0 <RCC_Delay>
 80023dc:	e01c      	b.n	8002418 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023de:	4b0a      	ldr	r3, [pc, #40]	; (8002408 <HAL_RCC_OscConfig+0x274>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e4:	f7fe ffac 	bl	8001340 <HAL_GetTick>
 80023e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ea:	e00f      	b.n	800240c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ec:	f7fe ffa8 	bl	8001340 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d908      	bls.n	800240c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e140      	b.n	8002680 <HAL_RCC_OscConfig+0x4ec>
 80023fe:	bf00      	nop
 8002400:	40021000 	.word	0x40021000
 8002404:	42420000 	.word	0x42420000
 8002408:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800240c:	4b9e      	ldr	r3, [pc, #632]	; (8002688 <HAL_RCC_OscConfig+0x4f4>)
 800240e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1e9      	bne.n	80023ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0304 	and.w	r3, r3, #4
 8002420:	2b00      	cmp	r3, #0
 8002422:	f000 80a6 	beq.w	8002572 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002426:	2300      	movs	r3, #0
 8002428:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800242a:	4b97      	ldr	r3, [pc, #604]	; (8002688 <HAL_RCC_OscConfig+0x4f4>)
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10d      	bne.n	8002452 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002436:	4b94      	ldr	r3, [pc, #592]	; (8002688 <HAL_RCC_OscConfig+0x4f4>)
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	4a93      	ldr	r2, [pc, #588]	; (8002688 <HAL_RCC_OscConfig+0x4f4>)
 800243c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002440:	61d3      	str	r3, [r2, #28]
 8002442:	4b91      	ldr	r3, [pc, #580]	; (8002688 <HAL_RCC_OscConfig+0x4f4>)
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800244a:	60bb      	str	r3, [r7, #8]
 800244c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800244e:	2301      	movs	r3, #1
 8002450:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002452:	4b8e      	ldr	r3, [pc, #568]	; (800268c <HAL_RCC_OscConfig+0x4f8>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800245a:	2b00      	cmp	r3, #0
 800245c:	d118      	bne.n	8002490 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800245e:	4b8b      	ldr	r3, [pc, #556]	; (800268c <HAL_RCC_OscConfig+0x4f8>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a8a      	ldr	r2, [pc, #552]	; (800268c <HAL_RCC_OscConfig+0x4f8>)
 8002464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002468:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800246a:	f7fe ff69 	bl	8001340 <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002472:	f7fe ff65 	bl	8001340 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b64      	cmp	r3, #100	; 0x64
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e0fd      	b.n	8002680 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002484:	4b81      	ldr	r3, [pc, #516]	; (800268c <HAL_RCC_OscConfig+0x4f8>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0f0      	beq.n	8002472 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d106      	bne.n	80024a6 <HAL_RCC_OscConfig+0x312>
 8002498:	4b7b      	ldr	r3, [pc, #492]	; (8002688 <HAL_RCC_OscConfig+0x4f4>)
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	4a7a      	ldr	r2, [pc, #488]	; (8002688 <HAL_RCC_OscConfig+0x4f4>)
 800249e:	f043 0301 	orr.w	r3, r3, #1
 80024a2:	6213      	str	r3, [r2, #32]
 80024a4:	e02d      	b.n	8002502 <HAL_RCC_OscConfig+0x36e>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d10c      	bne.n	80024c8 <HAL_RCC_OscConfig+0x334>
 80024ae:	4b76      	ldr	r3, [pc, #472]	; (8002688 <HAL_RCC_OscConfig+0x4f4>)
 80024b0:	6a1b      	ldr	r3, [r3, #32]
 80024b2:	4a75      	ldr	r2, [pc, #468]	; (8002688 <HAL_RCC_OscConfig+0x4f4>)
 80024b4:	f023 0301 	bic.w	r3, r3, #1
 80024b8:	6213      	str	r3, [r2, #32]
 80024ba:	4b73      	ldr	r3, [pc, #460]	; (8002688 <HAL_RCC_OscConfig+0x4f4>)
 80024bc:	6a1b      	ldr	r3, [r3, #32]
 80024be:	4a72      	ldr	r2, [pc, #456]	; (8002688 <HAL_RCC_OscConfig+0x4f4>)
 80024c0:	f023 0304 	bic.w	r3, r3, #4
 80024c4:	6213      	str	r3, [r2, #32]
 80024c6:	e01c      	b.n	8002502 <HAL_RCC_OscConfig+0x36e>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	2b05      	cmp	r3, #5
 80024ce:	d10c      	bne.n	80024ea <HAL_RCC_OscConfig+0x356>
 80024d0:	4b6d      	ldr	r3, [pc, #436]	; (8002688 <HAL_RCC_OscConfig+0x4f4>)
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	4a6c      	ldr	r2, [pc, #432]	; (8002688 <HAL_RCC_OscConfig+0x4f4>)
 80024d6:	f043 0304 	orr.w	r3, r3, #4
 80024da:	6213      	str	r3, [r2, #32]
 80024dc:	4b6a      	ldr	r3, [pc, #424]	; (8002688 <HAL_RCC_OscConfig+0x4f4>)
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	4a69      	ldr	r2, [pc, #420]	; (8002688 <HAL_RCC_OscConfig+0x4f4>)
 80024e2:	f043 0301 	orr.w	r3, r3, #1
 80024e6:	6213      	str	r3, [r2, #32]
 80024e8:	e00b      	b.n	8002502 <HAL_RCC_OscConfig+0x36e>
 80024ea:	4b67      	ldr	r3, [pc, #412]	; (8002688 <HAL_RCC_OscConfig+0x4f4>)
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	4a66      	ldr	r2, [pc, #408]	; (8002688 <HAL_RCC_OscConfig+0x4f4>)
 80024f0:	f023 0301 	bic.w	r3, r3, #1
 80024f4:	6213      	str	r3, [r2, #32]
 80024f6:	4b64      	ldr	r3, [pc, #400]	; (8002688 <HAL_RCC_OscConfig+0x4f4>)
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	4a63      	ldr	r2, [pc, #396]	; (8002688 <HAL_RCC_OscConfig+0x4f4>)
 80024fc:	f023 0304 	bic.w	r3, r3, #4
 8002500:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d015      	beq.n	8002536 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800250a:	f7fe ff19 	bl	8001340 <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002510:	e00a      	b.n	8002528 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002512:	f7fe ff15 	bl	8001340 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002520:	4293      	cmp	r3, r2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e0ab      	b.n	8002680 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002528:	4b57      	ldr	r3, [pc, #348]	; (8002688 <HAL_RCC_OscConfig+0x4f4>)
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d0ee      	beq.n	8002512 <HAL_RCC_OscConfig+0x37e>
 8002534:	e014      	b.n	8002560 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002536:	f7fe ff03 	bl	8001340 <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800253c:	e00a      	b.n	8002554 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800253e:	f7fe feff 	bl	8001340 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	f241 3288 	movw	r2, #5000	; 0x1388
 800254c:	4293      	cmp	r3, r2
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e095      	b.n	8002680 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002554:	4b4c      	ldr	r3, [pc, #304]	; (8002688 <HAL_RCC_OscConfig+0x4f4>)
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1ee      	bne.n	800253e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002560:	7dfb      	ldrb	r3, [r7, #23]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d105      	bne.n	8002572 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002566:	4b48      	ldr	r3, [pc, #288]	; (8002688 <HAL_RCC_OscConfig+0x4f4>)
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	4a47      	ldr	r2, [pc, #284]	; (8002688 <HAL_RCC_OscConfig+0x4f4>)
 800256c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002570:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	2b00      	cmp	r3, #0
 8002578:	f000 8081 	beq.w	800267e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800257c:	4b42      	ldr	r3, [pc, #264]	; (8002688 <HAL_RCC_OscConfig+0x4f4>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f003 030c 	and.w	r3, r3, #12
 8002584:	2b08      	cmp	r3, #8
 8002586:	d061      	beq.n	800264c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	69db      	ldr	r3, [r3, #28]
 800258c:	2b02      	cmp	r3, #2
 800258e:	d146      	bne.n	800261e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002590:	4b3f      	ldr	r3, [pc, #252]	; (8002690 <HAL_RCC_OscConfig+0x4fc>)
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002596:	f7fe fed3 	bl	8001340 <HAL_GetTick>
 800259a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800259c:	e008      	b.n	80025b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800259e:	f7fe fecf 	bl	8001340 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e067      	b.n	8002680 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025b0:	4b35      	ldr	r3, [pc, #212]	; (8002688 <HAL_RCC_OscConfig+0x4f4>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1f0      	bne.n	800259e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025c4:	d108      	bne.n	80025d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025c6:	4b30      	ldr	r3, [pc, #192]	; (8002688 <HAL_RCC_OscConfig+0x4f4>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	492d      	ldr	r1, [pc, #180]	; (8002688 <HAL_RCC_OscConfig+0x4f4>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025d8:	4b2b      	ldr	r3, [pc, #172]	; (8002688 <HAL_RCC_OscConfig+0x4f4>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a19      	ldr	r1, [r3, #32]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e8:	430b      	orrs	r3, r1
 80025ea:	4927      	ldr	r1, [pc, #156]	; (8002688 <HAL_RCC_OscConfig+0x4f4>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025f0:	4b27      	ldr	r3, [pc, #156]	; (8002690 <HAL_RCC_OscConfig+0x4fc>)
 80025f2:	2201      	movs	r2, #1
 80025f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f6:	f7fe fea3 	bl	8001340 <HAL_GetTick>
 80025fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025fc:	e008      	b.n	8002610 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025fe:	f7fe fe9f 	bl	8001340 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e037      	b.n	8002680 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002610:	4b1d      	ldr	r3, [pc, #116]	; (8002688 <HAL_RCC_OscConfig+0x4f4>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0f0      	beq.n	80025fe <HAL_RCC_OscConfig+0x46a>
 800261c:	e02f      	b.n	800267e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800261e:	4b1c      	ldr	r3, [pc, #112]	; (8002690 <HAL_RCC_OscConfig+0x4fc>)
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002624:	f7fe fe8c 	bl	8001340 <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800262c:	f7fe fe88 	bl	8001340 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e020      	b.n	8002680 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800263e:	4b12      	ldr	r3, [pc, #72]	; (8002688 <HAL_RCC_OscConfig+0x4f4>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1f0      	bne.n	800262c <HAL_RCC_OscConfig+0x498>
 800264a:	e018      	b.n	800267e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	69db      	ldr	r3, [r3, #28]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d101      	bne.n	8002658 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e013      	b.n	8002680 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002658:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <HAL_RCC_OscConfig+0x4f4>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	429a      	cmp	r2, r3
 800266a:	d106      	bne.n	800267a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002676:	429a      	cmp	r2, r3
 8002678:	d001      	beq.n	800267e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e000      	b.n	8002680 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40021000 	.word	0x40021000
 800268c:	40007000 	.word	0x40007000
 8002690:	42420060 	.word	0x42420060

08002694 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d101      	bne.n	80026a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e0d0      	b.n	800284a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026a8:	4b6a      	ldr	r3, [pc, #424]	; (8002854 <HAL_RCC_ClockConfig+0x1c0>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0307 	and.w	r3, r3, #7
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d910      	bls.n	80026d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026b6:	4b67      	ldr	r3, [pc, #412]	; (8002854 <HAL_RCC_ClockConfig+0x1c0>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f023 0207 	bic.w	r2, r3, #7
 80026be:	4965      	ldr	r1, [pc, #404]	; (8002854 <HAL_RCC_ClockConfig+0x1c0>)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c6:	4b63      	ldr	r3, [pc, #396]	; (8002854 <HAL_RCC_ClockConfig+0x1c0>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0307 	and.w	r3, r3, #7
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d001      	beq.n	80026d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e0b8      	b.n	800284a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d020      	beq.n	8002726 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d005      	beq.n	80026fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026f0:	4b59      	ldr	r3, [pc, #356]	; (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	4a58      	ldr	r2, [pc, #352]	; (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 80026f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0308 	and.w	r3, r3, #8
 8002704:	2b00      	cmp	r3, #0
 8002706:	d005      	beq.n	8002714 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002708:	4b53      	ldr	r3, [pc, #332]	; (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	4a52      	ldr	r2, [pc, #328]	; (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 800270e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002712:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002714:	4b50      	ldr	r3, [pc, #320]	; (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	494d      	ldr	r1, [pc, #308]	; (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 8002722:	4313      	orrs	r3, r2
 8002724:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b00      	cmp	r3, #0
 8002730:	d040      	beq.n	80027b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d107      	bne.n	800274a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800273a:	4b47      	ldr	r3, [pc, #284]	; (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d115      	bne.n	8002772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e07f      	b.n	800284a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	2b02      	cmp	r3, #2
 8002750:	d107      	bne.n	8002762 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002752:	4b41      	ldr	r3, [pc, #260]	; (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d109      	bne.n	8002772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e073      	b.n	800284a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002762:	4b3d      	ldr	r3, [pc, #244]	; (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e06b      	b.n	800284a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002772:	4b39      	ldr	r3, [pc, #228]	; (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f023 0203 	bic.w	r2, r3, #3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	4936      	ldr	r1, [pc, #216]	; (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 8002780:	4313      	orrs	r3, r2
 8002782:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002784:	f7fe fddc 	bl	8001340 <HAL_GetTick>
 8002788:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800278a:	e00a      	b.n	80027a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800278c:	f7fe fdd8 	bl	8001340 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	f241 3288 	movw	r2, #5000	; 0x1388
 800279a:	4293      	cmp	r3, r2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e053      	b.n	800284a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027a2:	4b2d      	ldr	r3, [pc, #180]	; (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f003 020c 	and.w	r2, r3, #12
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d1eb      	bne.n	800278c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027b4:	4b27      	ldr	r3, [pc, #156]	; (8002854 <HAL_RCC_ClockConfig+0x1c0>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d210      	bcs.n	80027e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027c2:	4b24      	ldr	r3, [pc, #144]	; (8002854 <HAL_RCC_ClockConfig+0x1c0>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f023 0207 	bic.w	r2, r3, #7
 80027ca:	4922      	ldr	r1, [pc, #136]	; (8002854 <HAL_RCC_ClockConfig+0x1c0>)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027d2:	4b20      	ldr	r3, [pc, #128]	; (8002854 <HAL_RCC_ClockConfig+0x1c0>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0307 	and.w	r3, r3, #7
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d001      	beq.n	80027e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e032      	b.n	800284a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0304 	and.w	r3, r3, #4
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d008      	beq.n	8002802 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027f0:	4b19      	ldr	r3, [pc, #100]	; (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	4916      	ldr	r1, [pc, #88]	; (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0308 	and.w	r3, r3, #8
 800280a:	2b00      	cmp	r3, #0
 800280c:	d009      	beq.n	8002822 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800280e:	4b12      	ldr	r3, [pc, #72]	; (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	490e      	ldr	r1, [pc, #56]	; (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 800281e:	4313      	orrs	r3, r2
 8002820:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002822:	f000 f821 	bl	8002868 <HAL_RCC_GetSysClockFreq>
 8002826:	4601      	mov	r1, r0
 8002828:	4b0b      	ldr	r3, [pc, #44]	; (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	091b      	lsrs	r3, r3, #4
 800282e:	f003 030f 	and.w	r3, r3, #15
 8002832:	4a0a      	ldr	r2, [pc, #40]	; (800285c <HAL_RCC_ClockConfig+0x1c8>)
 8002834:	5cd3      	ldrb	r3, [r2, r3]
 8002836:	fa21 f303 	lsr.w	r3, r1, r3
 800283a:	4a09      	ldr	r2, [pc, #36]	; (8002860 <HAL_RCC_ClockConfig+0x1cc>)
 800283c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800283e:	4b09      	ldr	r3, [pc, #36]	; (8002864 <HAL_RCC_ClockConfig+0x1d0>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f7fe fb7e 	bl	8000f44 <HAL_InitTick>

  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	40022000 	.word	0x40022000
 8002858:	40021000 	.word	0x40021000
 800285c:	080069f4 	.word	0x080069f4
 8002860:	20000000 	.word	0x20000000
 8002864:	20000004 	.word	0x20000004

08002868 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002868:	b490      	push	{r4, r7}
 800286a:	b08a      	sub	sp, #40	; 0x28
 800286c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800286e:	4b2a      	ldr	r3, [pc, #168]	; (8002918 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002870:	1d3c      	adds	r4, r7, #4
 8002872:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002874:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002878:	4b28      	ldr	r3, [pc, #160]	; (800291c <HAL_RCC_GetSysClockFreq+0xb4>)
 800287a:	881b      	ldrh	r3, [r3, #0]
 800287c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800287e:	2300      	movs	r3, #0
 8002880:	61fb      	str	r3, [r7, #28]
 8002882:	2300      	movs	r3, #0
 8002884:	61bb      	str	r3, [r7, #24]
 8002886:	2300      	movs	r3, #0
 8002888:	627b      	str	r3, [r7, #36]	; 0x24
 800288a:	2300      	movs	r3, #0
 800288c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800288e:	2300      	movs	r3, #0
 8002890:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002892:	4b23      	ldr	r3, [pc, #140]	; (8002920 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	f003 030c 	and.w	r3, r3, #12
 800289e:	2b04      	cmp	r3, #4
 80028a0:	d002      	beq.n	80028a8 <HAL_RCC_GetSysClockFreq+0x40>
 80028a2:	2b08      	cmp	r3, #8
 80028a4:	d003      	beq.n	80028ae <HAL_RCC_GetSysClockFreq+0x46>
 80028a6:	e02d      	b.n	8002904 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028a8:	4b1e      	ldr	r3, [pc, #120]	; (8002924 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028aa:	623b      	str	r3, [r7, #32]
      break;
 80028ac:	e02d      	b.n	800290a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	0c9b      	lsrs	r3, r3, #18
 80028b2:	f003 030f 	and.w	r3, r3, #15
 80028b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028ba:	4413      	add	r3, r2
 80028bc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80028c0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d013      	beq.n	80028f4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028cc:	4b14      	ldr	r3, [pc, #80]	; (8002920 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	0c5b      	lsrs	r3, r3, #17
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028da:	4413      	add	r3, r2
 80028dc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80028e0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	4a0f      	ldr	r2, [pc, #60]	; (8002924 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028e6:	fb02 f203 	mul.w	r2, r2, r3
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f0:	627b      	str	r3, [r7, #36]	; 0x24
 80028f2:	e004      	b.n	80028fe <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	4a0c      	ldr	r2, [pc, #48]	; (8002928 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028f8:	fb02 f303 	mul.w	r3, r2, r3
 80028fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	623b      	str	r3, [r7, #32]
      break;
 8002902:	e002      	b.n	800290a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002904:	4b07      	ldr	r3, [pc, #28]	; (8002924 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002906:	623b      	str	r3, [r7, #32]
      break;
 8002908:	bf00      	nop
    }
  }
  return sysclockfreq;
 800290a:	6a3b      	ldr	r3, [r7, #32]
}
 800290c:	4618      	mov	r0, r3
 800290e:	3728      	adds	r7, #40	; 0x28
 8002910:	46bd      	mov	sp, r7
 8002912:	bc90      	pop	{r4, r7}
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	080069b4 	.word	0x080069b4
 800291c:	080069c4 	.word	0x080069c4
 8002920:	40021000 	.word	0x40021000
 8002924:	007a1200 	.word	0x007a1200
 8002928:	003d0900 	.word	0x003d0900

0800292c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002930:	4b02      	ldr	r3, [pc, #8]	; (800293c <HAL_RCC_GetHCLKFreq+0x10>)
 8002932:	681b      	ldr	r3, [r3, #0]
}
 8002934:	4618      	mov	r0, r3
 8002936:	46bd      	mov	sp, r7
 8002938:	bc80      	pop	{r7}
 800293a:	4770      	bx	lr
 800293c:	20000000 	.word	0x20000000

08002940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002944:	f7ff fff2 	bl	800292c <HAL_RCC_GetHCLKFreq>
 8002948:	4601      	mov	r1, r0
 800294a:	4b05      	ldr	r3, [pc, #20]	; (8002960 <HAL_RCC_GetPCLK1Freq+0x20>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	0a1b      	lsrs	r3, r3, #8
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	4a03      	ldr	r2, [pc, #12]	; (8002964 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002956:	5cd3      	ldrb	r3, [r2, r3]
 8002958:	fa21 f303 	lsr.w	r3, r1, r3
}
 800295c:	4618      	mov	r0, r3
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40021000 	.word	0x40021000
 8002964:	08006a04 	.word	0x08006a04

08002968 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800296c:	f7ff ffde 	bl	800292c <HAL_RCC_GetHCLKFreq>
 8002970:	4601      	mov	r1, r0
 8002972:	4b05      	ldr	r3, [pc, #20]	; (8002988 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	0adb      	lsrs	r3, r3, #11
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	4a03      	ldr	r2, [pc, #12]	; (800298c <HAL_RCC_GetPCLK2Freq+0x24>)
 800297e:	5cd3      	ldrb	r3, [r2, r3]
 8002980:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002984:	4618      	mov	r0, r3
 8002986:	bd80      	pop	{r7, pc}
 8002988:	40021000 	.word	0x40021000
 800298c:	08006a04 	.word	0x08006a04

08002990 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	220f      	movs	r2, #15
 800299e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80029a0:	4b11      	ldr	r3, [pc, #68]	; (80029e8 <HAL_RCC_GetClockConfig+0x58>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f003 0203 	and.w	r2, r3, #3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80029ac:	4b0e      	ldr	r3, [pc, #56]	; (80029e8 <HAL_RCC_GetClockConfig+0x58>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80029b8:	4b0b      	ldr	r3, [pc, #44]	; (80029e8 <HAL_RCC_GetClockConfig+0x58>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80029c4:	4b08      	ldr	r3, [pc, #32]	; (80029e8 <HAL_RCC_GetClockConfig+0x58>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	08db      	lsrs	r3, r3, #3
 80029ca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80029d2:	4b06      	ldr	r3, [pc, #24]	; (80029ec <HAL_RCC_GetClockConfig+0x5c>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0207 	and.w	r2, r3, #7
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr
 80029e8:	40021000 	.word	0x40021000
 80029ec:	40022000 	.word	0x40022000

080029f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029f8:	4b0a      	ldr	r3, [pc, #40]	; (8002a24 <RCC_Delay+0x34>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a0a      	ldr	r2, [pc, #40]	; (8002a28 <RCC_Delay+0x38>)
 80029fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002a02:	0a5b      	lsrs	r3, r3, #9
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	fb02 f303 	mul.w	r3, r2, r3
 8002a0a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a0c:	bf00      	nop
  }
  while (Delay --);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	1e5a      	subs	r2, r3, #1
 8002a12:	60fa      	str	r2, [r7, #12]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1f9      	bne.n	8002a0c <RCC_Delay+0x1c>
}
 8002a18:	bf00      	nop
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc80      	pop	{r7}
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	20000000 	.word	0x20000000
 8002a28:	10624dd3 	.word	0x10624dd3

08002a2c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002a34:	2300      	movs	r3, #0
 8002a36:	613b      	str	r3, [r7, #16]
 8002a38:	2300      	movs	r3, #0
 8002a3a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d07d      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a4c:	4b4f      	ldr	r3, [pc, #316]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d10d      	bne.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a58:	4b4c      	ldr	r3, [pc, #304]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a5a:	69db      	ldr	r3, [r3, #28]
 8002a5c:	4a4b      	ldr	r2, [pc, #300]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a62:	61d3      	str	r3, [r2, #28]
 8002a64:	4b49      	ldr	r3, [pc, #292]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a66:	69db      	ldr	r3, [r3, #28]
 8002a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a6c:	60bb      	str	r3, [r7, #8]
 8002a6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a70:	2301      	movs	r3, #1
 8002a72:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a74:	4b46      	ldr	r3, [pc, #280]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d118      	bne.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a80:	4b43      	ldr	r3, [pc, #268]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a42      	ldr	r2, [pc, #264]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a8c:	f7fe fc58 	bl	8001340 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a92:	e008      	b.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a94:	f7fe fc54 	bl	8001340 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b64      	cmp	r3, #100	; 0x64
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e06d      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa6:	4b3a      	ldr	r3, [pc, #232]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d0f0      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ab2:	4b36      	ldr	r3, [pc, #216]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aba:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d02e      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d027      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ad0:	4b2e      	ldr	r3, [pc, #184]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ad8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ada:	4b2e      	ldr	r3, [pc, #184]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002adc:	2201      	movs	r2, #1
 8002ade:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ae0:	4b2c      	ldr	r3, [pc, #176]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ae6:	4a29      	ldr	r2, [pc, #164]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d014      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af6:	f7fe fc23 	bl	8001340 <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002afc:	e00a      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002afe:	f7fe fc1f 	bl	8001340 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e036      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b14:	4b1d      	ldr	r3, [pc, #116]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b16:	6a1b      	ldr	r3, [r3, #32]
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d0ee      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b20:	4b1a      	ldr	r3, [pc, #104]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	4917      	ldr	r1, [pc, #92]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b32:	7dfb      	ldrb	r3, [r7, #23]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d105      	bne.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b38:	4b14      	ldr	r3, [pc, #80]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b3a:	69db      	ldr	r3, [r3, #28]
 8002b3c:	4a13      	ldr	r2, [pc, #76]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b42:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d008      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b50:	4b0e      	ldr	r3, [pc, #56]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	490b      	ldr	r1, [pc, #44]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0310 	and.w	r3, r3, #16
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d008      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b6e:	4b07      	ldr	r3, [pc, #28]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	4904      	ldr	r1, [pc, #16]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3718      	adds	r7, #24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	40007000 	.word	0x40007000
 8002b94:	42420440 	.word	0x42420440

08002b98 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002b98:	b590      	push	{r4, r7, lr}
 8002b9a:	b08d      	sub	sp, #52	; 0x34
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002ba0:	4b55      	ldr	r3, [pc, #340]	; (8002cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002ba2:	f107 040c 	add.w	r4, r7, #12
 8002ba6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ba8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002bac:	4b53      	ldr	r3, [pc, #332]	; (8002cfc <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002bae:	881b      	ldrh	r3, [r3, #0]
 8002bb0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bba:	2300      	movs	r3, #0
 8002bbc:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	61fb      	str	r3, [r7, #28]
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d07f      	beq.n	8002ccc <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8002bcc:	2b10      	cmp	r3, #16
 8002bce:	d002      	beq.n	8002bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d048      	beq.n	8002c66 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002bd4:	e08b      	b.n	8002cee <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8002bd6:	4b4a      	ldr	r3, [pc, #296]	; (8002d00 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002bdc:	4b48      	ldr	r3, [pc, #288]	; (8002d00 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d07f      	beq.n	8002ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	0c9b      	lsrs	r3, r3, #18
 8002bec:	f003 030f 	and.w	r3, r3, #15
 8002bf0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002bf4:	4413      	add	r3, r2
 8002bf6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002bfa:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d018      	beq.n	8002c38 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c06:	4b3e      	ldr	r3, [pc, #248]	; (8002d00 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	0c5b      	lsrs	r3, r3, #17
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002c14:	4413      	add	r3, r2
 8002c16:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002c1a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00d      	beq.n	8002c42 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002c26:	4a37      	ldr	r2, [pc, #220]	; (8002d04 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c2e:	6a3b      	ldr	r3, [r7, #32]
 8002c30:	fb02 f303 	mul.w	r3, r2, r3
 8002c34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c36:	e004      	b.n	8002c42 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c38:	6a3b      	ldr	r3, [r7, #32]
 8002c3a:	4a33      	ldr	r2, [pc, #204]	; (8002d08 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002c3c:	fb02 f303 	mul.w	r3, r2, r3
 8002c40:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002c42:	4b2f      	ldr	r3, [pc, #188]	; (8002d00 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c4e:	d102      	bne.n	8002c56 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8002c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c52:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002c54:	e048      	b.n	8002ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8002c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	4a2c      	ldr	r2, [pc, #176]	; (8002d0c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c60:	085b      	lsrs	r3, r3, #1
 8002c62:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002c64:	e040      	b.n	8002ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8002c66:	4b26      	ldr	r3, [pc, #152]	; (8002d00 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c76:	d108      	bne.n	8002c8a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8002c82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c86:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c88:	e01f      	b.n	8002cca <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c94:	d109      	bne.n	8002caa <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8002c96:	4b1a      	ldr	r3, [pc, #104]	; (8002d00 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d003      	beq.n	8002caa <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8002ca2:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002ca6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ca8:	e00f      	b.n	8002cca <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cb4:	d11a      	bne.n	8002cec <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002cb6:	4b12      	ldr	r3, [pc, #72]	; (8002d00 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d014      	beq.n	8002cec <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8002cc2:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002cc6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002cc8:	e010      	b.n	8002cec <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002cca:	e00f      	b.n	8002cec <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002ccc:	f7ff fe4c 	bl	8002968 <HAL_RCC_GetPCLK2Freq>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	0b9b      	lsrs	r3, r3, #14
 8002cd8:	f003 0303 	and.w	r3, r3, #3
 8002cdc:	3301      	adds	r3, #1
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002ce6:	e002      	b.n	8002cee <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002ce8:	bf00      	nop
 8002cea:	e000      	b.n	8002cee <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002cec:	bf00      	nop
    }
  }
  return (frequency);
 8002cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3734      	adds	r7, #52	; 0x34
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd90      	pop	{r4, r7, pc}
 8002cf8:	080069c8 	.word	0x080069c8
 8002cfc:	080069d8 	.word	0x080069d8
 8002d00:	40021000 	.word	0x40021000
 8002d04:	007a1200 	.word	0x007a1200
 8002d08:	003d0900 	.word	0x003d0900
 8002d0c:	aaaaaaab 	.word	0xaaaaaaab

08002d10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e041      	b.n	8002da6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d106      	bne.n	8002d3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 f839 	bl	8002dae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2202      	movs	r2, #2
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3304      	adds	r3, #4
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4610      	mov	r0, r2
 8002d50:	f000 f9b4 	bl	80030bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr

08002dc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d001      	beq.n	8002dd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e03a      	b.n	8002e4e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2202      	movs	r2, #2
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68da      	ldr	r2, [r3, #12]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f042 0201 	orr.w	r2, r2, #1
 8002dee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a18      	ldr	r2, [pc, #96]	; (8002e58 <HAL_TIM_Base_Start_IT+0x98>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d00e      	beq.n	8002e18 <HAL_TIM_Base_Start_IT+0x58>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e02:	d009      	beq.n	8002e18 <HAL_TIM_Base_Start_IT+0x58>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a14      	ldr	r2, [pc, #80]	; (8002e5c <HAL_TIM_Base_Start_IT+0x9c>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d004      	beq.n	8002e18 <HAL_TIM_Base_Start_IT+0x58>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a13      	ldr	r2, [pc, #76]	; (8002e60 <HAL_TIM_Base_Start_IT+0xa0>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d111      	bne.n	8002e3c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2b06      	cmp	r3, #6
 8002e28:	d010      	beq.n	8002e4c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f042 0201 	orr.w	r2, r2, #1
 8002e38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e3a:	e007      	b.n	8002e4c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 0201 	orr.w	r2, r2, #1
 8002e4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3714      	adds	r7, #20
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bc80      	pop	{r7}
 8002e56:	4770      	bx	lr
 8002e58:	40012c00 	.word	0x40012c00
 8002e5c:	40000400 	.word	0x40000400
 8002e60:	40000800 	.word	0x40000800

08002e64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d122      	bne.n	8002ec0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d11b      	bne.n	8002ec0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f06f 0202 	mvn.w	r2, #2
 8002e90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	f003 0303 	and.w	r3, r3, #3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d003      	beq.n	8002eae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 f8ed 	bl	8003086 <HAL_TIM_IC_CaptureCallback>
 8002eac:	e005      	b.n	8002eba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 f8e0 	bl	8003074 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f000 f8ef 	bl	8003098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	f003 0304 	and.w	r3, r3, #4
 8002eca:	2b04      	cmp	r3, #4
 8002ecc:	d122      	bne.n	8002f14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b04      	cmp	r3, #4
 8002eda:	d11b      	bne.n	8002f14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f06f 0204 	mvn.w	r2, #4
 8002ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2202      	movs	r2, #2
 8002eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 f8c3 	bl	8003086 <HAL_TIM_IC_CaptureCallback>
 8002f00:	e005      	b.n	8002f0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f8b6 	bl	8003074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 f8c5 	bl	8003098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	f003 0308 	and.w	r3, r3, #8
 8002f1e:	2b08      	cmp	r3, #8
 8002f20:	d122      	bne.n	8002f68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	f003 0308 	and.w	r3, r3, #8
 8002f2c:	2b08      	cmp	r3, #8
 8002f2e:	d11b      	bne.n	8002f68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f06f 0208 	mvn.w	r2, #8
 8002f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2204      	movs	r2, #4
 8002f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	f003 0303 	and.w	r3, r3, #3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 f899 	bl	8003086 <HAL_TIM_IC_CaptureCallback>
 8002f54:	e005      	b.n	8002f62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f88c 	bl	8003074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 f89b 	bl	8003098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	f003 0310 	and.w	r3, r3, #16
 8002f72:	2b10      	cmp	r3, #16
 8002f74:	d122      	bne.n	8002fbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	f003 0310 	and.w	r3, r3, #16
 8002f80:	2b10      	cmp	r3, #16
 8002f82:	d11b      	bne.n	8002fbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f06f 0210 	mvn.w	r2, #16
 8002f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2208      	movs	r2, #8
 8002f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f86f 	bl	8003086 <HAL_TIM_IC_CaptureCallback>
 8002fa8:	e005      	b.n	8002fb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f862 	bl	8003074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 f871 	bl	8003098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d10e      	bne.n	8002fe8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d107      	bne.n	8002fe8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f06f 0201 	mvn.w	r2, #1
 8002fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f7fd feac 	bl	8000d40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff2:	2b80      	cmp	r3, #128	; 0x80
 8002ff4:	d10e      	bne.n	8003014 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003000:	2b80      	cmp	r3, #128	; 0x80
 8003002:	d107      	bne.n	8003014 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800300c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f8bf 	bl	8003192 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800301e:	2b40      	cmp	r3, #64	; 0x40
 8003020:	d10e      	bne.n	8003040 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800302c:	2b40      	cmp	r3, #64	; 0x40
 800302e:	d107      	bne.n	8003040 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 f835 	bl	80030aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	f003 0320 	and.w	r3, r3, #32
 800304a:	2b20      	cmp	r3, #32
 800304c:	d10e      	bne.n	800306c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	f003 0320 	and.w	r3, r3, #32
 8003058:	2b20      	cmp	r3, #32
 800305a:	d107      	bne.n	800306c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f06f 0220 	mvn.w	r2, #32
 8003064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f88a 	bl	8003180 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800306c:	bf00      	nop
 800306e:	3708      	adds	r7, #8
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	bc80      	pop	{r7}
 8003084:	4770      	bx	lr

08003086 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003086:	b480      	push	{r7}
 8003088:	b083      	sub	sp, #12
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800308e:	bf00      	nop
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	bc80      	pop	{r7}
 8003096:	4770      	bx	lr

08003098 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bc80      	pop	{r7}
 80030a8:	4770      	bx	lr

080030aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b083      	sub	sp, #12
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bc80      	pop	{r7}
 80030ba:	4770      	bx	lr

080030bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a29      	ldr	r2, [pc, #164]	; (8003174 <TIM_Base_SetConfig+0xb8>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d00b      	beq.n	80030ec <TIM_Base_SetConfig+0x30>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030da:	d007      	beq.n	80030ec <TIM_Base_SetConfig+0x30>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a26      	ldr	r2, [pc, #152]	; (8003178 <TIM_Base_SetConfig+0xbc>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d003      	beq.n	80030ec <TIM_Base_SetConfig+0x30>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a25      	ldr	r2, [pc, #148]	; (800317c <TIM_Base_SetConfig+0xc0>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d108      	bne.n	80030fe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a1c      	ldr	r2, [pc, #112]	; (8003174 <TIM_Base_SetConfig+0xb8>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d00b      	beq.n	800311e <TIM_Base_SetConfig+0x62>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800310c:	d007      	beq.n	800311e <TIM_Base_SetConfig+0x62>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a19      	ldr	r2, [pc, #100]	; (8003178 <TIM_Base_SetConfig+0xbc>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d003      	beq.n	800311e <TIM_Base_SetConfig+0x62>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a18      	ldr	r2, [pc, #96]	; (800317c <TIM_Base_SetConfig+0xc0>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d108      	bne.n	8003130 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003124:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	4313      	orrs	r3, r2
 800312e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	4313      	orrs	r3, r2
 800313c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a07      	ldr	r2, [pc, #28]	; (8003174 <TIM_Base_SetConfig+0xb8>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d103      	bne.n	8003164 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	691a      	ldr	r2, [r3, #16]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	615a      	str	r2, [r3, #20]
}
 800316a:	bf00      	nop
 800316c:	3714      	adds	r7, #20
 800316e:	46bd      	mov	sp, r7
 8003170:	bc80      	pop	{r7}
 8003172:	4770      	bx	lr
 8003174:	40012c00 	.word	0x40012c00
 8003178:	40000400 	.word	0x40000400
 800317c:	40000800 	.word	0x40000800

08003180 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	bc80      	pop	{r7}
 8003190:	4770      	bx	lr

08003192 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003192:	b480      	push	{r7}
 8003194:	b083      	sub	sp, #12
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800319a:	bf00      	nop
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	bc80      	pop	{r7}
 80031a2:	4770      	bx	lr

080031a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e03f      	b.n	8003236 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d106      	bne.n	80031d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7fd fe6e 	bl	8000eac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2224      	movs	r2, #36	; 0x24
 80031d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 f9a3 	bl	8003534 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	691a      	ldr	r2, [r3, #16]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	695a      	ldr	r2, [r3, #20]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800320c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68da      	ldr	r2, [r3, #12]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800321c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2220      	movs	r2, #32
 8003228:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2220      	movs	r2, #32
 8003230:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b08a      	sub	sp, #40	; 0x28
 8003242:	af02      	add	r7, sp, #8
 8003244:	60f8      	str	r0, [r7, #12]
 8003246:	60b9      	str	r1, [r7, #8]
 8003248:	603b      	str	r3, [r7, #0]
 800324a:	4613      	mov	r3, r2
 800324c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800324e:	2300      	movs	r3, #0
 8003250:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b20      	cmp	r3, #32
 800325c:	d17c      	bne.n	8003358 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d002      	beq.n	800326a <HAL_UART_Transmit+0x2c>
 8003264:	88fb      	ldrh	r3, [r7, #6]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e075      	b.n	800335a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003274:	2b01      	cmp	r3, #1
 8003276:	d101      	bne.n	800327c <HAL_UART_Transmit+0x3e>
 8003278:	2302      	movs	r3, #2
 800327a:	e06e      	b.n	800335a <HAL_UART_Transmit+0x11c>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2221      	movs	r2, #33	; 0x21
 800328e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003292:	f7fe f855 	bl	8001340 <HAL_GetTick>
 8003296:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	88fa      	ldrh	r2, [r7, #6]
 800329c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	88fa      	ldrh	r2, [r7, #6]
 80032a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ac:	d108      	bne.n	80032c0 <HAL_UART_Transmit+0x82>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d104      	bne.n	80032c0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80032b6:	2300      	movs	r3, #0
 80032b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	61bb      	str	r3, [r7, #24]
 80032be:	e003      	b.n	80032c8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032c4:	2300      	movs	r3, #0
 80032c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80032d0:	e02a      	b.n	8003328 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	2200      	movs	r2, #0
 80032da:	2180      	movs	r1, #128	; 0x80
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f000 f8df 	bl	80034a0 <UART_WaitOnFlagUntilTimeout>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e036      	b.n	800335a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10b      	bne.n	800330a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	881b      	ldrh	r3, [r3, #0]
 80032f6:	461a      	mov	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003300:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	3302      	adds	r3, #2
 8003306:	61bb      	str	r3, [r7, #24]
 8003308:	e007      	b.n	800331a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	781a      	ldrb	r2, [r3, #0]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	3301      	adds	r3, #1
 8003318:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800331e:	b29b      	uxth	r3, r3
 8003320:	3b01      	subs	r3, #1
 8003322:	b29a      	uxth	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800332c:	b29b      	uxth	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1cf      	bne.n	80032d2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	2200      	movs	r2, #0
 800333a:	2140      	movs	r1, #64	; 0x40
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f000 f8af 	bl	80034a0 <UART_WaitOnFlagUntilTimeout>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e006      	b.n	800335a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2220      	movs	r2, #32
 8003350:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003354:	2300      	movs	r3, #0
 8003356:	e000      	b.n	800335a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003358:	2302      	movs	r3, #2
  }
}
 800335a:	4618      	mov	r0, r3
 800335c:	3720      	adds	r7, #32
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b08a      	sub	sp, #40	; 0x28
 8003366:	af02      	add	r7, sp, #8
 8003368:	60f8      	str	r0, [r7, #12]
 800336a:	60b9      	str	r1, [r7, #8]
 800336c:	603b      	str	r3, [r7, #0]
 800336e:	4613      	mov	r3, r2
 8003370:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003372:	2300      	movs	r3, #0
 8003374:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b20      	cmp	r3, #32
 8003380:	f040 8089 	bne.w	8003496 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d002      	beq.n	8003390 <HAL_UART_Receive+0x2e>
 800338a:	88fb      	ldrh	r3, [r7, #6]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d101      	bne.n	8003394 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e081      	b.n	8003498 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800339a:	2b01      	cmp	r3, #1
 800339c:	d101      	bne.n	80033a2 <HAL_UART_Receive+0x40>
 800339e:	2302      	movs	r3, #2
 80033a0:	e07a      	b.n	8003498 <HAL_UART_Receive+0x136>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2222      	movs	r2, #34	; 0x22
 80033b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80033b8:	f7fd ffc2 	bl	8001340 <HAL_GetTick>
 80033bc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	88fa      	ldrh	r2, [r7, #6]
 80033c2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	88fa      	ldrh	r2, [r7, #6]
 80033c8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033d2:	d108      	bne.n	80033e6 <HAL_UART_Receive+0x84>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	691b      	ldr	r3, [r3, #16]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d104      	bne.n	80033e6 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 80033dc:	2300      	movs	r3, #0
 80033de:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	61bb      	str	r3, [r7, #24]
 80033e4:	e003      	b.n	80033ee <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033ea:	2300      	movs	r3, #0
 80033ec:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80033f6:	e043      	b.n	8003480 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	9300      	str	r3, [sp, #0]
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	2200      	movs	r2, #0
 8003400:	2120      	movs	r1, #32
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f000 f84c 	bl	80034a0 <UART_WaitOnFlagUntilTimeout>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e042      	b.n	8003498 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d10c      	bne.n	8003432 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	b29b      	uxth	r3, r3
 8003420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003424:	b29a      	uxth	r2, r3
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	3302      	adds	r3, #2
 800342e:	61bb      	str	r3, [r7, #24]
 8003430:	e01f      	b.n	8003472 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800343a:	d007      	beq.n	800344c <HAL_UART_Receive+0xea>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d10a      	bne.n	800345a <HAL_UART_Receive+0xf8>
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d106      	bne.n	800345a <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	b2da      	uxtb	r2, r3
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	701a      	strb	r2, [r3, #0]
 8003458:	e008      	b.n	800346c <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	b2db      	uxtb	r3, r3
 8003462:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003466:	b2da      	uxtb	r2, r3
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	3301      	adds	r3, #1
 8003470:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003476:	b29b      	uxth	r3, r3
 8003478:	3b01      	subs	r3, #1
 800347a:	b29a      	uxth	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003484:	b29b      	uxth	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1b6      	bne.n	80033f8 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2220      	movs	r2, #32
 800348e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8003492:	2300      	movs	r3, #0
 8003494:	e000      	b.n	8003498 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8003496:	2302      	movs	r3, #2
  }
}
 8003498:	4618      	mov	r0, r3
 800349a:	3720      	adds	r7, #32
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	603b      	str	r3, [r7, #0]
 80034ac:	4613      	mov	r3, r2
 80034ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034b0:	e02c      	b.n	800350c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b8:	d028      	beq.n	800350c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d007      	beq.n	80034d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80034c0:	f7fd ff3e 	bl	8001340 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d21d      	bcs.n	800350c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68da      	ldr	r2, [r3, #12]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80034de:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	695a      	ldr	r2, [r3, #20]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 0201 	bic.w	r2, r2, #1
 80034ee:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2220      	movs	r2, #32
 80034f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2220      	movs	r2, #32
 80034fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e00f      	b.n	800352c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	4013      	ands	r3, r2
 8003516:	68ba      	ldr	r2, [r7, #8]
 8003518:	429a      	cmp	r2, r3
 800351a:	bf0c      	ite	eq
 800351c:	2301      	moveq	r3, #1
 800351e:	2300      	movne	r3, #0
 8003520:	b2db      	uxtb	r3, r3
 8003522:	461a      	mov	r2, r3
 8003524:	79fb      	ldrb	r3, [r7, #7]
 8003526:	429a      	cmp	r2, r3
 8003528:	d0c3      	beq.n	80034b2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68da      	ldr	r2, [r3, #12]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	430a      	orrs	r2, r1
 8003550:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	689a      	ldr	r2, [r3, #8]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	4313      	orrs	r3, r2
 8003562:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800356e:	f023 030c 	bic.w	r3, r3, #12
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	6812      	ldr	r2, [r2, #0]
 8003576:	68b9      	ldr	r1, [r7, #8]
 8003578:	430b      	orrs	r3, r1
 800357a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	699a      	ldr	r2, [r3, #24]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a2c      	ldr	r2, [pc, #176]	; (8003648 <UART_SetConfig+0x114>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d103      	bne.n	80035a4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800359c:	f7ff f9e4 	bl	8002968 <HAL_RCC_GetPCLK2Freq>
 80035a0:	60f8      	str	r0, [r7, #12]
 80035a2:	e002      	b.n	80035aa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80035a4:	f7ff f9cc 	bl	8002940 <HAL_RCC_GetPCLK1Freq>
 80035a8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	4613      	mov	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4413      	add	r3, r2
 80035b2:	009a      	lsls	r2, r3, #2
 80035b4:	441a      	add	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c0:	4a22      	ldr	r2, [pc, #136]	; (800364c <UART_SetConfig+0x118>)
 80035c2:	fba2 2303 	umull	r2, r3, r2, r3
 80035c6:	095b      	lsrs	r3, r3, #5
 80035c8:	0119      	lsls	r1, r3, #4
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	4613      	mov	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4413      	add	r3, r2
 80035d2:	009a      	lsls	r2, r3, #2
 80035d4:	441a      	add	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80035e0:	4b1a      	ldr	r3, [pc, #104]	; (800364c <UART_SetConfig+0x118>)
 80035e2:	fba3 0302 	umull	r0, r3, r3, r2
 80035e6:	095b      	lsrs	r3, r3, #5
 80035e8:	2064      	movs	r0, #100	; 0x64
 80035ea:	fb00 f303 	mul.w	r3, r0, r3
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	011b      	lsls	r3, r3, #4
 80035f2:	3332      	adds	r3, #50	; 0x32
 80035f4:	4a15      	ldr	r2, [pc, #84]	; (800364c <UART_SetConfig+0x118>)
 80035f6:	fba2 2303 	umull	r2, r3, r2, r3
 80035fa:	095b      	lsrs	r3, r3, #5
 80035fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003600:	4419      	add	r1, r3
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	4613      	mov	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4413      	add	r3, r2
 800360a:	009a      	lsls	r2, r3, #2
 800360c:	441a      	add	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	fbb2 f2f3 	udiv	r2, r2, r3
 8003618:	4b0c      	ldr	r3, [pc, #48]	; (800364c <UART_SetConfig+0x118>)
 800361a:	fba3 0302 	umull	r0, r3, r3, r2
 800361e:	095b      	lsrs	r3, r3, #5
 8003620:	2064      	movs	r0, #100	; 0x64
 8003622:	fb00 f303 	mul.w	r3, r0, r3
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	011b      	lsls	r3, r3, #4
 800362a:	3332      	adds	r3, #50	; 0x32
 800362c:	4a07      	ldr	r2, [pc, #28]	; (800364c <UART_SetConfig+0x118>)
 800362e:	fba2 2303 	umull	r2, r3, r2, r3
 8003632:	095b      	lsrs	r3, r3, #5
 8003634:	f003 020f 	and.w	r2, r3, #15
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	440a      	add	r2, r1
 800363e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003640:	bf00      	nop
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	40013800 	.word	0x40013800
 800364c:	51eb851f 	.word	0x51eb851f

08003650 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003650:	b480      	push	{r7}
 8003652:	b085      	sub	sp, #20
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	4a06      	ldr	r2, [pc, #24]	; (8003678 <vApplicationGetIdleTaskMemory+0x28>)
 8003660:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	4a05      	ldr	r2, [pc, #20]	; (800367c <vApplicationGetIdleTaskMemory+0x2c>)
 8003666:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2280      	movs	r2, #128	; 0x80
 800366c:	601a      	str	r2, [r3, #0]
}
 800366e:	bf00      	nop
 8003670:	3714      	adds	r7, #20
 8003672:	46bd      	mov	sp, r7
 8003674:	bc80      	pop	{r7}
 8003676:	4770      	bx	lr
 8003678:	20000068 	.word	0x20000068
 800367c:	200000c4 	.word	0x200000c4

08003680 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	4a07      	ldr	r2, [pc, #28]	; (80036ac <vApplicationGetTimerTaskMemory+0x2c>)
 8003690:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	4a06      	ldr	r2, [pc, #24]	; (80036b0 <vApplicationGetTimerTaskMemory+0x30>)
 8003696:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800369e:	601a      	str	r2, [r3, #0]
}
 80036a0:	bf00      	nop
 80036a2:	3714      	adds	r7, #20
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bc80      	pop	{r7}
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	200002c4 	.word	0x200002c4
 80036b0:	20000320 	.word	0x20000320

080036b4 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 80036ba:	2020      	movs	r0, #32
 80036bc:	f002 fe22 	bl	8006304 <pvPortMalloc>
 80036c0:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00a      	beq.n	80036de <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	3304      	adds	r3, #4
 80036d2:	4618      	mov	r0, r3
 80036d4:	f000 f9b2 	bl	8003a3c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 80036de:	687b      	ldr	r3, [r7, #4]
	}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3708      	adds	r7, #8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b090      	sub	sp, #64	; 0x40
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
 80036f4:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80036fa:	2300      	movs	r3, #0
 80036fc:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80036fe:	2300      	movs	r3, #0
 8003700:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d109      	bne.n	800371c <xEventGroupWaitBits+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800370c:	f383 8811 	msr	BASEPRI, r3
 8003710:	f3bf 8f6f 	isb	sy
 8003714:	f3bf 8f4f 	dsb	sy
 8003718:	623b      	str	r3, [r7, #32]
 800371a:	e7fe      	b.n	800371a <xEventGroupWaitBits+0x32>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d009      	beq.n	800373a <xEventGroupWaitBits+0x52>
 8003726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800372a:	f383 8811 	msr	BASEPRI, r3
 800372e:	f3bf 8f6f 	isb	sy
 8003732:	f3bf 8f4f 	dsb	sy
 8003736:	61fb      	str	r3, [r7, #28]
 8003738:	e7fe      	b.n	8003738 <xEventGroupWaitBits+0x50>
	configASSERT( uxBitsToWaitFor != 0 );
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d109      	bne.n	8003754 <xEventGroupWaitBits+0x6c>
 8003740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003744:	f383 8811 	msr	BASEPRI, r3
 8003748:	f3bf 8f6f 	isb	sy
 800374c:	f3bf 8f4f 	dsb	sy
 8003750:	61bb      	str	r3, [r7, #24]
 8003752:	e7fe      	b.n	8003752 <xEventGroupWaitBits+0x6a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003754:	f001 fef2 	bl	800553c <xTaskGetSchedulerState>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d102      	bne.n	8003764 <xEventGroupWaitBits+0x7c>
 800375e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003760:	2b00      	cmp	r3, #0
 8003762:	d101      	bne.n	8003768 <xEventGroupWaitBits+0x80>
 8003764:	2301      	movs	r3, #1
 8003766:	e000      	b.n	800376a <xEventGroupWaitBits+0x82>
 8003768:	2300      	movs	r3, #0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d109      	bne.n	8003782 <xEventGroupWaitBits+0x9a>
 800376e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003772:	f383 8811 	msr	BASEPRI, r3
 8003776:	f3bf 8f6f 	isb	sy
 800377a:	f3bf 8f4f 	dsb	sy
 800377e:	617b      	str	r3, [r7, #20]
 8003780:	e7fe      	b.n	8003780 <xEventGroupWaitBits+0x98>
	}
	#endif

	vTaskSuspendAll();
 8003782:	f001 fa67 	bl	8004c54 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8003786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	68b9      	ldr	r1, [r7, #8]
 8003790:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003792:	f000 f932 	bl	80039fa <prvTestWaitCondition>
 8003796:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8003798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00e      	beq.n	80037bc <xEventGroupWaitBits+0xd4>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800379e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80037a2:	2300      	movs	r3, #0
 80037a4:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d028      	beq.n	80037fe <xEventGroupWaitBits+0x116>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80037ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	43db      	mvns	r3, r3
 80037b4:	401a      	ands	r2, r3
 80037b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037b8:	601a      	str	r2, [r3, #0]
 80037ba:	e020      	b.n	80037fe <xEventGroupWaitBits+0x116>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80037bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d104      	bne.n	80037cc <xEventGroupWaitBits+0xe4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80037c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80037c6:	2301      	movs	r3, #1
 80037c8:	633b      	str	r3, [r7, #48]	; 0x30
 80037ca:	e018      	b.n	80037fe <xEventGroupWaitBits+0x116>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d003      	beq.n	80037da <xEventGroupWaitBits+0xf2>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80037d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037d8:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d003      	beq.n	80037e8 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80037e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80037e6:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80037e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ea:	1d18      	adds	r0, r3, #4
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f0:	4313      	orrs	r3, r2
 80037f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037f4:	4619      	mov	r1, r3
 80037f6:	f001 fc23 	bl	8005040 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80037fa:	2300      	movs	r3, #0
 80037fc:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80037fe:	f001 fa37 	bl	8004c70 <xTaskResumeAll>
 8003802:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8003804:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003806:	2b00      	cmp	r3, #0
 8003808:	d031      	beq.n	800386e <xEventGroupWaitBits+0x186>
	{
		if( xAlreadyYielded == pdFALSE )
 800380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380c:	2b00      	cmp	r3, #0
 800380e:	d107      	bne.n	8003820 <xEventGroupWaitBits+0x138>
		{
			portYIELD_WITHIN_API();
 8003810:	4b19      	ldr	r3, [pc, #100]	; (8003878 <xEventGroupWaitBits+0x190>)
 8003812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003816:	601a      	str	r2, [r3, #0]
 8003818:	f3bf 8f4f 	dsb	sy
 800381c:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8003820:	f002 f808 	bl	8005834 <uxTaskResetEventItemValue>
 8003824:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8003826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d11a      	bne.n	8003866 <xEventGroupWaitBits+0x17e>
		{
			taskENTER_CRITICAL();
 8003830:	f002 fc72 	bl	8006118 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8003834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	68b9      	ldr	r1, [r7, #8]
 800383e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003840:	f000 f8db 	bl	80039fa <prvTestWaitCondition>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d009      	beq.n	800385e <xEventGroupWaitBits+0x176>
				{
					if( xClearOnExit != pdFALSE )
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d006      	beq.n	800385e <xEventGroupWaitBits+0x176>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8003850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	43db      	mvns	r3, r3
 8003858:	401a      	ands	r2, r3
 800385a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800385c:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800385e:	2301      	movs	r3, #1
 8003860:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8003862:	f002 fc87 	bl	8006174 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8003866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003868:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800386c:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800386e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003870:	4618      	mov	r0, r3
 8003872:	3740      	adds	r7, #64	; 0x40
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	e000ed04 	.word	0xe000ed04

0800387c <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d109      	bne.n	80038a4 <xEventGroupClearBits+0x28>
 8003890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003894:	f383 8811 	msr	BASEPRI, r3
 8003898:	f3bf 8f6f 	isb	sy
 800389c:	f3bf 8f4f 	dsb	sy
 80038a0:	60fb      	str	r3, [r7, #12]
 80038a2:	e7fe      	b.n	80038a2 <xEventGroupClearBits+0x26>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d009      	beq.n	80038c2 <xEventGroupClearBits+0x46>
 80038ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b2:	f383 8811 	msr	BASEPRI, r3
 80038b6:	f3bf 8f6f 	isb	sy
 80038ba:	f3bf 8f4f 	dsb	sy
 80038be:	60bb      	str	r3, [r7, #8]
 80038c0:	e7fe      	b.n	80038c0 <xEventGroupClearBits+0x44>

	taskENTER_CRITICAL();
 80038c2:	f002 fc29 	bl	8006118 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	43db      	mvns	r3, r3
 80038d4:	401a      	ands	r2, r3
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 80038da:	f002 fc4b 	bl	8006174 <vPortExitCritical>

	return uxReturn;
 80038de:	693b      	ldr	r3, [r7, #16]
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3718      	adds	r7, #24
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b08e      	sub	sp, #56	; 0x38
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80038f2:	2300      	movs	r3, #0
 80038f4:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80038fa:	2300      	movs	r3, #0
 80038fc:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d109      	bne.n	8003918 <xEventGroupSetBits+0x30>
 8003904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003908:	f383 8811 	msr	BASEPRI, r3
 800390c:	f3bf 8f6f 	isb	sy
 8003910:	f3bf 8f4f 	dsb	sy
 8003914:	613b      	str	r3, [r7, #16]
 8003916:	e7fe      	b.n	8003916 <xEventGroupSetBits+0x2e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d009      	beq.n	8003936 <xEventGroupSetBits+0x4e>
 8003922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003926:	f383 8811 	msr	BASEPRI, r3
 800392a:	f3bf 8f6f 	isb	sy
 800392e:	f3bf 8f4f 	dsb	sy
 8003932:	60fb      	str	r3, [r7, #12]
 8003934:	e7fe      	b.n	8003934 <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8003936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003938:	3304      	adds	r3, #4
 800393a:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800393c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393e:	3308      	adds	r3, #8
 8003940:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8003942:	f001 f987 	bl	8004c54 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8003946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800394c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	431a      	orrs	r2, r3
 8003954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003956:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8003958:	e03c      	b.n	80039d4 <xEventGroupSetBits+0xec>
		{
			pxNext = listGET_NEXT( pxListItem );
 800395a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8003960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8003966:	2300      	movs	r3, #0
 8003968:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003970:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003978:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d108      	bne.n	8003996 <xEventGroupSetBits+0xae>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8003984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	4013      	ands	r3, r2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00b      	beq.n	80039a8 <xEventGroupSetBits+0xc0>
				{
					xMatchFound = pdTRUE;
 8003990:	2301      	movs	r3, #1
 8003992:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003994:	e008      	b.n	80039a8 <xEventGroupSetBits+0xc0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8003996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	4013      	ands	r3, r2
 800399e:	69ba      	ldr	r2, [r7, #24]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d101      	bne.n	80039a8 <xEventGroupSetBits+0xc0>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80039a4:	2301      	movs	r3, #1
 80039a6:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80039a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d010      	beq.n	80039d0 <xEventGroupSetBits+0xe8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d003      	beq.n	80039c0 <xEventGroupSetBits+0xd8>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80039b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	4313      	orrs	r3, r2
 80039be:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80039c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80039c8:	4619      	mov	r1, r3
 80039ca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80039cc:	f001 fbfe 	bl	80051cc <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80039d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039d6:	6a3b      	ldr	r3, [r7, #32]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d1be      	bne.n	800395a <xEventGroupSetBits+0x72>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80039dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e2:	43db      	mvns	r3, r3
 80039e4:	401a      	ands	r2, r3
 80039e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e8:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80039ea:	f001 f941 	bl	8004c70 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80039ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f0:	681b      	ldr	r3, [r3, #0]
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3738      	adds	r7, #56	; 0x38
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80039fa:	b480      	push	{r7}
 80039fc:	b087      	sub	sp, #28
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	60f8      	str	r0, [r7, #12]
 8003a02:	60b9      	str	r1, [r7, #8]
 8003a04:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8003a06:	2300      	movs	r3, #0
 8003a08:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d107      	bne.n	8003a20 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	4013      	ands	r3, r2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00a      	beq.n	8003a30 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	617b      	str	r3, [r7, #20]
 8003a1e:	e007      	b.n	8003a30 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	4013      	ands	r3, r2
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d101      	bne.n	8003a30 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8003a30:	697b      	ldr	r3, [r7, #20]
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	371c      	adds	r7, #28
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bc80      	pop	{r7}
 8003a3a:	4770      	bx	lr

08003a3c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f103 0208 	add.w	r2, r3, #8
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f04f 32ff 	mov.w	r2, #4294967295
 8003a54:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f103 0208 	add.w	r2, r3, #8
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f103 0208 	add.w	r2, r3, #8
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bc80      	pop	{r7}
 8003a78:	4770      	bx	lr

08003a7a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b083      	sub	sp, #12
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bc80      	pop	{r7}
 8003a90:	4770      	bx	lr

08003a92 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a92:	b480      	push	{r7}
 8003a94:	b085      	sub	sp, #20
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
 8003a9a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	689a      	ldr	r2, [r3, #8]
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	1c5a      	adds	r2, r3, #1
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	601a      	str	r2, [r3, #0]
}
 8003ace:	bf00      	nop
 8003ad0:	3714      	adds	r7, #20
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bc80      	pop	{r7}
 8003ad6:	4770      	bx	lr

08003ad8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aee:	d103      	bne.n	8003af8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	60fb      	str	r3, [r7, #12]
 8003af6:	e00c      	b.n	8003b12 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3308      	adds	r3, #8
 8003afc:	60fb      	str	r3, [r7, #12]
 8003afe:	e002      	b.n	8003b06 <vListInsert+0x2e>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	60fb      	str	r3, [r7, #12]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d2f6      	bcs.n	8003b00 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	685a      	ldr	r2, [r3, #4]
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	683a      	ldr	r2, [r7, #0]
 8003b20:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	1c5a      	adds	r2, r3, #1
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	601a      	str	r2, [r3, #0]
}
 8003b3e:	bf00      	nop
 8003b40:	3714      	adds	r7, #20
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bc80      	pop	{r7}
 8003b46:	4770      	bx	lr

08003b48 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	6892      	ldr	r2, [r2, #8]
 8003b5e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	6852      	ldr	r2, [r2, #4]
 8003b68:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d103      	bne.n	8003b7c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689a      	ldr	r2, [r3, #8]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	1e5a      	subs	r2, r3, #1
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3714      	adds	r7, #20
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bc80      	pop	{r7}
 8003b98:	4770      	bx	lr
	...

08003b9c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d109      	bne.n	8003bc4 <xQueueGenericReset+0x28>
 8003bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb4:	f383 8811 	msr	BASEPRI, r3
 8003bb8:	f3bf 8f6f 	isb	sy
 8003bbc:	f3bf 8f4f 	dsb	sy
 8003bc0:	60bb      	str	r3, [r7, #8]
 8003bc2:	e7fe      	b.n	8003bc2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003bc4:	f002 faa8 	bl	8006118 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd0:	68f9      	ldr	r1, [r7, #12]
 8003bd2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003bd4:	fb01 f303 	mul.w	r3, r1, r3
 8003bd8:	441a      	add	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	68f9      	ldr	r1, [r7, #12]
 8003bf8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003bfa:	fb01 f303 	mul.w	r3, r1, r3
 8003bfe:	441a      	add	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	22ff      	movs	r2, #255	; 0xff
 8003c08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	22ff      	movs	r2, #255	; 0xff
 8003c10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d114      	bne.n	8003c44 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d01a      	beq.n	8003c58 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	3310      	adds	r3, #16
 8003c26:	4618      	mov	r0, r3
 8003c28:	f001 fa6e 	bl	8005108 <xTaskRemoveFromEventList>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d012      	beq.n	8003c58 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003c32:	4b0d      	ldr	r3, [pc, #52]	; (8003c68 <xQueueGenericReset+0xcc>)
 8003c34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c38:	601a      	str	r2, [r3, #0]
 8003c3a:	f3bf 8f4f 	dsb	sy
 8003c3e:	f3bf 8f6f 	isb	sy
 8003c42:	e009      	b.n	8003c58 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	3310      	adds	r3, #16
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7ff fef7 	bl	8003a3c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	3324      	adds	r3, #36	; 0x24
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7ff fef2 	bl	8003a3c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003c58:	f002 fa8c 	bl	8006174 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003c5c:	2301      	movs	r3, #1
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	e000ed04 	.word	0xe000ed04

08003c6c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b08e      	sub	sp, #56	; 0x38
 8003c70:	af02      	add	r7, sp, #8
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
 8003c78:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d109      	bne.n	8003c94 <xQueueGenericCreateStatic+0x28>
 8003c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c84:	f383 8811 	msr	BASEPRI, r3
 8003c88:	f3bf 8f6f 	isb	sy
 8003c8c:	f3bf 8f4f 	dsb	sy
 8003c90:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c92:	e7fe      	b.n	8003c92 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d109      	bne.n	8003cae <xQueueGenericCreateStatic+0x42>
 8003c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9e:	f383 8811 	msr	BASEPRI, r3
 8003ca2:	f3bf 8f6f 	isb	sy
 8003ca6:	f3bf 8f4f 	dsb	sy
 8003caa:	627b      	str	r3, [r7, #36]	; 0x24
 8003cac:	e7fe      	b.n	8003cac <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d002      	beq.n	8003cba <xQueueGenericCreateStatic+0x4e>
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <xQueueGenericCreateStatic+0x52>
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e000      	b.n	8003cc0 <xQueueGenericCreateStatic+0x54>
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d109      	bne.n	8003cd8 <xQueueGenericCreateStatic+0x6c>
 8003cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc8:	f383 8811 	msr	BASEPRI, r3
 8003ccc:	f3bf 8f6f 	isb	sy
 8003cd0:	f3bf 8f4f 	dsb	sy
 8003cd4:	623b      	str	r3, [r7, #32]
 8003cd6:	e7fe      	b.n	8003cd6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d102      	bne.n	8003ce4 <xQueueGenericCreateStatic+0x78>
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d101      	bne.n	8003ce8 <xQueueGenericCreateStatic+0x7c>
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e000      	b.n	8003cea <xQueueGenericCreateStatic+0x7e>
 8003ce8:	2300      	movs	r3, #0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d109      	bne.n	8003d02 <xQueueGenericCreateStatic+0x96>
 8003cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf2:	f383 8811 	msr	BASEPRI, r3
 8003cf6:	f3bf 8f6f 	isb	sy
 8003cfa:	f3bf 8f4f 	dsb	sy
 8003cfe:	61fb      	str	r3, [r7, #28]
 8003d00:	e7fe      	b.n	8003d00 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003d02:	2350      	movs	r3, #80	; 0x50
 8003d04:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	2b50      	cmp	r3, #80	; 0x50
 8003d0a:	d009      	beq.n	8003d20 <xQueueGenericCreateStatic+0xb4>
 8003d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d10:	f383 8811 	msr	BASEPRI, r3
 8003d14:	f3bf 8f6f 	isb	sy
 8003d18:	f3bf 8f4f 	dsb	sy
 8003d1c:	61bb      	str	r3, [r7, #24]
 8003d1e:	e7fe      	b.n	8003d1e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00d      	beq.n	8003d46 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003d32:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d38:	9300      	str	r3, [sp, #0]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	68b9      	ldr	r1, [r7, #8]
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f000 f842 	bl	8003dca <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3730      	adds	r7, #48	; 0x30
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b08a      	sub	sp, #40	; 0x28
 8003d54:	af02      	add	r7, sp, #8
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d109      	bne.n	8003d78 <xQueueGenericCreate+0x28>
 8003d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d68:	f383 8811 	msr	BASEPRI, r3
 8003d6c:	f3bf 8f6f 	isb	sy
 8003d70:	f3bf 8f4f 	dsb	sy
 8003d74:	613b      	str	r3, [r7, #16]
 8003d76:	e7fe      	b.n	8003d76 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d102      	bne.n	8003d84 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	61fb      	str	r3, [r7, #28]
 8003d82:	e004      	b.n	8003d8e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	68ba      	ldr	r2, [r7, #8]
 8003d88:	fb02 f303 	mul.w	r3, r2, r3
 8003d8c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	3350      	adds	r3, #80	; 0x50
 8003d92:	4618      	mov	r0, r3
 8003d94:	f002 fab6 	bl	8006304 <pvPortMalloc>
 8003d98:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00f      	beq.n	8003dc0 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	3350      	adds	r3, #80	; 0x50
 8003da4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003dae:	79fa      	ldrb	r2, [r7, #7]
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	9300      	str	r3, [sp, #0]
 8003db4:	4613      	mov	r3, r2
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	68b9      	ldr	r1, [r7, #8]
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f000 f805 	bl	8003dca <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003dc0:	69bb      	ldr	r3, [r7, #24]
	}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3720      	adds	r7, #32
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b084      	sub	sp, #16
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	60f8      	str	r0, [r7, #12]
 8003dd2:	60b9      	str	r1, [r7, #8]
 8003dd4:	607a      	str	r2, [r7, #4]
 8003dd6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d103      	bne.n	8003de6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	e002      	b.n	8003dec <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	68ba      	ldr	r2, [r7, #8]
 8003df6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003df8:	2101      	movs	r1, #1
 8003dfa:	69b8      	ldr	r0, [r7, #24]
 8003dfc:	f7ff fece 	bl	8003b9c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	78fa      	ldrb	r2, [r7, #3]
 8003e04:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003e08:	bf00      	nop
 8003e0a:	3710      	adds	r7, #16
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b08e      	sub	sp, #56	; 0x38
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
 8003e1c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d109      	bne.n	8003e40 <xQueueGenericSend+0x30>
 8003e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e30:	f383 8811 	msr	BASEPRI, r3
 8003e34:	f3bf 8f6f 	isb	sy
 8003e38:	f3bf 8f4f 	dsb	sy
 8003e3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e3e:	e7fe      	b.n	8003e3e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d103      	bne.n	8003e4e <xQueueGenericSend+0x3e>
 8003e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <xQueueGenericSend+0x42>
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e000      	b.n	8003e54 <xQueueGenericSend+0x44>
 8003e52:	2300      	movs	r3, #0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d109      	bne.n	8003e6c <xQueueGenericSend+0x5c>
 8003e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5c:	f383 8811 	msr	BASEPRI, r3
 8003e60:	f3bf 8f6f 	isb	sy
 8003e64:	f3bf 8f4f 	dsb	sy
 8003e68:	627b      	str	r3, [r7, #36]	; 0x24
 8003e6a:	e7fe      	b.n	8003e6a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d103      	bne.n	8003e7a <xQueueGenericSend+0x6a>
 8003e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d101      	bne.n	8003e7e <xQueueGenericSend+0x6e>
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e000      	b.n	8003e80 <xQueueGenericSend+0x70>
 8003e7e:	2300      	movs	r3, #0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d109      	bne.n	8003e98 <xQueueGenericSend+0x88>
 8003e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e88:	f383 8811 	msr	BASEPRI, r3
 8003e8c:	f3bf 8f6f 	isb	sy
 8003e90:	f3bf 8f4f 	dsb	sy
 8003e94:	623b      	str	r3, [r7, #32]
 8003e96:	e7fe      	b.n	8003e96 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e98:	f001 fb50 	bl	800553c <xTaskGetSchedulerState>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d102      	bne.n	8003ea8 <xQueueGenericSend+0x98>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <xQueueGenericSend+0x9c>
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e000      	b.n	8003eae <xQueueGenericSend+0x9e>
 8003eac:	2300      	movs	r3, #0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d109      	bne.n	8003ec6 <xQueueGenericSend+0xb6>
 8003eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb6:	f383 8811 	msr	BASEPRI, r3
 8003eba:	f3bf 8f6f 	isb	sy
 8003ebe:	f3bf 8f4f 	dsb	sy
 8003ec2:	61fb      	str	r3, [r7, #28]
 8003ec4:	e7fe      	b.n	8003ec4 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ec6:	f002 f927 	bl	8006118 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ecc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d302      	bcc.n	8003edc <xQueueGenericSend+0xcc>
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d129      	bne.n	8003f30 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	68b9      	ldr	r1, [r7, #8]
 8003ee0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ee2:	f000 fb1e 	bl	8004522 <prvCopyDataToQueue>
 8003ee6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d010      	beq.n	8003f12 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef2:	3324      	adds	r3, #36	; 0x24
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f001 f907 	bl	8005108 <xTaskRemoveFromEventList>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d013      	beq.n	8003f28 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003f00:	4b3f      	ldr	r3, [pc, #252]	; (8004000 <xQueueGenericSend+0x1f0>)
 8003f02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f06:	601a      	str	r2, [r3, #0]
 8003f08:	f3bf 8f4f 	dsb	sy
 8003f0c:	f3bf 8f6f 	isb	sy
 8003f10:	e00a      	b.n	8003f28 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d007      	beq.n	8003f28 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003f18:	4b39      	ldr	r3, [pc, #228]	; (8004000 <xQueueGenericSend+0x1f0>)
 8003f1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f1e:	601a      	str	r2, [r3, #0]
 8003f20:	f3bf 8f4f 	dsb	sy
 8003f24:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003f28:	f002 f924 	bl	8006174 <vPortExitCritical>
				return pdPASS;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e063      	b.n	8003ff8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d103      	bne.n	8003f3e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003f36:	f002 f91d 	bl	8006174 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	e05c      	b.n	8003ff8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d106      	bne.n	8003f52 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f44:	f107 0314 	add.w	r3, r7, #20
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f001 f99f 	bl	800528c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f52:	f002 f90f 	bl	8006174 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f56:	f000 fe7d 	bl	8004c54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f5a:	f002 f8dd 	bl	8006118 <vPortEnterCritical>
 8003f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f64:	b25b      	sxtb	r3, r3
 8003f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f6a:	d103      	bne.n	8003f74 <xQueueGenericSend+0x164>
 8003f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f7a:	b25b      	sxtb	r3, r3
 8003f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f80:	d103      	bne.n	8003f8a <xQueueGenericSend+0x17a>
 8003f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f8a:	f002 f8f3 	bl	8006174 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f8e:	1d3a      	adds	r2, r7, #4
 8003f90:	f107 0314 	add.w	r3, r7, #20
 8003f94:	4611      	mov	r1, r2
 8003f96:	4618      	mov	r0, r3
 8003f98:	f001 f98e 	bl	80052b8 <xTaskCheckForTimeOut>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d124      	bne.n	8003fec <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003fa2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fa4:	f000 fbb5 	bl	8004712 <prvIsQueueFull>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d018      	beq.n	8003fe0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb0:	3310      	adds	r3, #16
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	4611      	mov	r1, r2
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f001 f81e 	bl	8004ff8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003fbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fbe:	f000 fb40 	bl	8004642 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003fc2:	f000 fe55 	bl	8004c70 <xTaskResumeAll>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f47f af7c 	bne.w	8003ec6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003fce:	4b0c      	ldr	r3, [pc, #48]	; (8004000 <xQueueGenericSend+0x1f0>)
 8003fd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fd4:	601a      	str	r2, [r3, #0]
 8003fd6:	f3bf 8f4f 	dsb	sy
 8003fda:	f3bf 8f6f 	isb	sy
 8003fde:	e772      	b.n	8003ec6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003fe0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fe2:	f000 fb2e 	bl	8004642 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003fe6:	f000 fe43 	bl	8004c70 <xTaskResumeAll>
 8003fea:	e76c      	b.n	8003ec6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003fec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fee:	f000 fb28 	bl	8004642 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ff2:	f000 fe3d 	bl	8004c70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003ff6:	2300      	movs	r3, #0
		}
	}
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3738      	adds	r7, #56	; 0x38
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	e000ed04 	.word	0xe000ed04

08004004 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b08e      	sub	sp, #56	; 0x38
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
 8004010:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004018:	2b00      	cmp	r3, #0
 800401a:	d109      	bne.n	8004030 <xQueueGenericSendFromISR+0x2c>
 800401c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004020:	f383 8811 	msr	BASEPRI, r3
 8004024:	f3bf 8f6f 	isb	sy
 8004028:	f3bf 8f4f 	dsb	sy
 800402c:	627b      	str	r3, [r7, #36]	; 0x24
 800402e:	e7fe      	b.n	800402e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d103      	bne.n	800403e <xQueueGenericSendFromISR+0x3a>
 8004036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <xQueueGenericSendFromISR+0x3e>
 800403e:	2301      	movs	r3, #1
 8004040:	e000      	b.n	8004044 <xQueueGenericSendFromISR+0x40>
 8004042:	2300      	movs	r3, #0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d109      	bne.n	800405c <xQueueGenericSendFromISR+0x58>
 8004048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800404c:	f383 8811 	msr	BASEPRI, r3
 8004050:	f3bf 8f6f 	isb	sy
 8004054:	f3bf 8f4f 	dsb	sy
 8004058:	623b      	str	r3, [r7, #32]
 800405a:	e7fe      	b.n	800405a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	2b02      	cmp	r3, #2
 8004060:	d103      	bne.n	800406a <xQueueGenericSendFromISR+0x66>
 8004062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004066:	2b01      	cmp	r3, #1
 8004068:	d101      	bne.n	800406e <xQueueGenericSendFromISR+0x6a>
 800406a:	2301      	movs	r3, #1
 800406c:	e000      	b.n	8004070 <xQueueGenericSendFromISR+0x6c>
 800406e:	2300      	movs	r3, #0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d109      	bne.n	8004088 <xQueueGenericSendFromISR+0x84>
 8004074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004078:	f383 8811 	msr	BASEPRI, r3
 800407c:	f3bf 8f6f 	isb	sy
 8004080:	f3bf 8f4f 	dsb	sy
 8004084:	61fb      	str	r3, [r7, #28]
 8004086:	e7fe      	b.n	8004086 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004088:	f002 f900 	bl	800628c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800408c:	f3ef 8211 	mrs	r2, BASEPRI
 8004090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004094:	f383 8811 	msr	BASEPRI, r3
 8004098:	f3bf 8f6f 	isb	sy
 800409c:	f3bf 8f4f 	dsb	sy
 80040a0:	61ba      	str	r2, [r7, #24]
 80040a2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80040a4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80040a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80040a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d302      	bcc.n	80040ba <xQueueGenericSendFromISR+0xb6>
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d12c      	bne.n	8004114 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80040ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	68b9      	ldr	r1, [r7, #8]
 80040c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040ca:	f000 fa2a 	bl	8004522 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80040ce:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80040d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d6:	d112      	bne.n	80040fe <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d016      	beq.n	800410e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e2:	3324      	adds	r3, #36	; 0x24
 80040e4:	4618      	mov	r0, r3
 80040e6:	f001 f80f 	bl	8005108 <xTaskRemoveFromEventList>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00e      	beq.n	800410e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00b      	beq.n	800410e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2201      	movs	r2, #1
 80040fa:	601a      	str	r2, [r3, #0]
 80040fc:	e007      	b.n	800410e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80040fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004102:	3301      	adds	r3, #1
 8004104:	b2db      	uxtb	r3, r3
 8004106:	b25a      	sxtb	r2, r3
 8004108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800410e:	2301      	movs	r3, #1
 8004110:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004112:	e001      	b.n	8004118 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004114:	2300      	movs	r3, #0
 8004116:	637b      	str	r3, [r7, #52]	; 0x34
 8004118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800411a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004124:	4618      	mov	r0, r3
 8004126:	3738      	adds	r7, #56	; 0x38
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b08c      	sub	sp, #48	; 0x30
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004138:	2300      	movs	r3, #0
 800413a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004142:	2b00      	cmp	r3, #0
 8004144:	d109      	bne.n	800415a <xQueueReceive+0x2e>
	__asm volatile
 8004146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800414a:	f383 8811 	msr	BASEPRI, r3
 800414e:	f3bf 8f6f 	isb	sy
 8004152:	f3bf 8f4f 	dsb	sy
 8004156:	623b      	str	r3, [r7, #32]
 8004158:	e7fe      	b.n	8004158 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d103      	bne.n	8004168 <xQueueReceive+0x3c>
 8004160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004164:	2b00      	cmp	r3, #0
 8004166:	d101      	bne.n	800416c <xQueueReceive+0x40>
 8004168:	2301      	movs	r3, #1
 800416a:	e000      	b.n	800416e <xQueueReceive+0x42>
 800416c:	2300      	movs	r3, #0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d109      	bne.n	8004186 <xQueueReceive+0x5a>
 8004172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004176:	f383 8811 	msr	BASEPRI, r3
 800417a:	f3bf 8f6f 	isb	sy
 800417e:	f3bf 8f4f 	dsb	sy
 8004182:	61fb      	str	r3, [r7, #28]
 8004184:	e7fe      	b.n	8004184 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004186:	f001 f9d9 	bl	800553c <xTaskGetSchedulerState>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d102      	bne.n	8004196 <xQueueReceive+0x6a>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <xQueueReceive+0x6e>
 8004196:	2301      	movs	r3, #1
 8004198:	e000      	b.n	800419c <xQueueReceive+0x70>
 800419a:	2300      	movs	r3, #0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d109      	bne.n	80041b4 <xQueueReceive+0x88>
 80041a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a4:	f383 8811 	msr	BASEPRI, r3
 80041a8:	f3bf 8f6f 	isb	sy
 80041ac:	f3bf 8f4f 	dsb	sy
 80041b0:	61bb      	str	r3, [r7, #24]
 80041b2:	e7fe      	b.n	80041b2 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80041b4:	f001 ffb0 	bl	8006118 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041bc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80041be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d01f      	beq.n	8004204 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80041c4:	68b9      	ldr	r1, [r7, #8]
 80041c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041c8:	f000 fa15 	bl	80045f6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80041cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ce:	1e5a      	subs	r2, r3, #1
 80041d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00f      	beq.n	80041fc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041de:	3310      	adds	r3, #16
 80041e0:	4618      	mov	r0, r3
 80041e2:	f000 ff91 	bl	8005108 <xTaskRemoveFromEventList>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d007      	beq.n	80041fc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80041ec:	4b3c      	ldr	r3, [pc, #240]	; (80042e0 <xQueueReceive+0x1b4>)
 80041ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	f3bf 8f4f 	dsb	sy
 80041f8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80041fc:	f001 ffba 	bl	8006174 <vPortExitCritical>
				return pdPASS;
 8004200:	2301      	movs	r3, #1
 8004202:	e069      	b.n	80042d8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d103      	bne.n	8004212 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800420a:	f001 ffb3 	bl	8006174 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800420e:	2300      	movs	r3, #0
 8004210:	e062      	b.n	80042d8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004214:	2b00      	cmp	r3, #0
 8004216:	d106      	bne.n	8004226 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004218:	f107 0310 	add.w	r3, r7, #16
 800421c:	4618      	mov	r0, r3
 800421e:	f001 f835 	bl	800528c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004222:	2301      	movs	r3, #1
 8004224:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004226:	f001 ffa5 	bl	8006174 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800422a:	f000 fd13 	bl	8004c54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800422e:	f001 ff73 	bl	8006118 <vPortEnterCritical>
 8004232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004234:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004238:	b25b      	sxtb	r3, r3
 800423a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800423e:	d103      	bne.n	8004248 <xQueueReceive+0x11c>
 8004240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004242:	2200      	movs	r2, #0
 8004244:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800424a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800424e:	b25b      	sxtb	r3, r3
 8004250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004254:	d103      	bne.n	800425e <xQueueReceive+0x132>
 8004256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004258:	2200      	movs	r2, #0
 800425a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800425e:	f001 ff89 	bl	8006174 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004262:	1d3a      	adds	r2, r7, #4
 8004264:	f107 0310 	add.w	r3, r7, #16
 8004268:	4611      	mov	r1, r2
 800426a:	4618      	mov	r0, r3
 800426c:	f001 f824 	bl	80052b8 <xTaskCheckForTimeOut>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d123      	bne.n	80042be <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004276:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004278:	f000 fa35 	bl	80046e6 <prvIsQueueEmpty>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d017      	beq.n	80042b2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004284:	3324      	adds	r3, #36	; 0x24
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	4611      	mov	r1, r2
 800428a:	4618      	mov	r0, r3
 800428c:	f000 feb4 	bl	8004ff8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004290:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004292:	f000 f9d6 	bl	8004642 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004296:	f000 fceb 	bl	8004c70 <xTaskResumeAll>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d189      	bne.n	80041b4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80042a0:	4b0f      	ldr	r3, [pc, #60]	; (80042e0 <xQueueReceive+0x1b4>)
 80042a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042a6:	601a      	str	r2, [r3, #0]
 80042a8:	f3bf 8f4f 	dsb	sy
 80042ac:	f3bf 8f6f 	isb	sy
 80042b0:	e780      	b.n	80041b4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80042b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042b4:	f000 f9c5 	bl	8004642 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80042b8:	f000 fcda 	bl	8004c70 <xTaskResumeAll>
 80042bc:	e77a      	b.n	80041b4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80042be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042c0:	f000 f9bf 	bl	8004642 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80042c4:	f000 fcd4 	bl	8004c70 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80042c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042ca:	f000 fa0c 	bl	80046e6 <prvIsQueueEmpty>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f43f af6f 	beq.w	80041b4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80042d6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3730      	adds	r7, #48	; 0x30
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	e000ed04 	.word	0xe000ed04

080042e4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b08e      	sub	sp, #56	; 0x38
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80042ee:	2300      	movs	r3, #0
 80042f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80042f6:	2300      	movs	r3, #0
 80042f8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80042fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d109      	bne.n	8004314 <xQueueSemaphoreTake+0x30>
 8004300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004304:	f383 8811 	msr	BASEPRI, r3
 8004308:	f3bf 8f6f 	isb	sy
 800430c:	f3bf 8f4f 	dsb	sy
 8004310:	623b      	str	r3, [r7, #32]
 8004312:	e7fe      	b.n	8004312 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004318:	2b00      	cmp	r3, #0
 800431a:	d009      	beq.n	8004330 <xQueueSemaphoreTake+0x4c>
 800431c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004320:	f383 8811 	msr	BASEPRI, r3
 8004324:	f3bf 8f6f 	isb	sy
 8004328:	f3bf 8f4f 	dsb	sy
 800432c:	61fb      	str	r3, [r7, #28]
 800432e:	e7fe      	b.n	800432e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004330:	f001 f904 	bl	800553c <xTaskGetSchedulerState>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d102      	bne.n	8004340 <xQueueSemaphoreTake+0x5c>
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d101      	bne.n	8004344 <xQueueSemaphoreTake+0x60>
 8004340:	2301      	movs	r3, #1
 8004342:	e000      	b.n	8004346 <xQueueSemaphoreTake+0x62>
 8004344:	2300      	movs	r3, #0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d109      	bne.n	800435e <xQueueSemaphoreTake+0x7a>
 800434a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800434e:	f383 8811 	msr	BASEPRI, r3
 8004352:	f3bf 8f6f 	isb	sy
 8004356:	f3bf 8f4f 	dsb	sy
 800435a:	61bb      	str	r3, [r7, #24]
 800435c:	e7fe      	b.n	800435c <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800435e:	f001 fedb 	bl	8006118 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004366:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436a:	2b00      	cmp	r3, #0
 800436c:	d024      	beq.n	80043b8 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800436e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004370:	1e5a      	subs	r2, r3, #1
 8004372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004374:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d104      	bne.n	8004388 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800437e:	f001 fa71 	bl	8005864 <pvTaskIncrementMutexHeldCount>
 8004382:	4602      	mov	r2, r0
 8004384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004386:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00f      	beq.n	80043b0 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004392:	3310      	adds	r3, #16
 8004394:	4618      	mov	r0, r3
 8004396:	f000 feb7 	bl	8005108 <xTaskRemoveFromEventList>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d007      	beq.n	80043b0 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80043a0:	4b53      	ldr	r3, [pc, #332]	; (80044f0 <xQueueSemaphoreTake+0x20c>)
 80043a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043a6:	601a      	str	r2, [r3, #0]
 80043a8:	f3bf 8f4f 	dsb	sy
 80043ac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80043b0:	f001 fee0 	bl	8006174 <vPortExitCritical>
				return pdPASS;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e096      	b.n	80044e6 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d110      	bne.n	80043e0 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80043be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d009      	beq.n	80043d8 <xQueueSemaphoreTake+0xf4>
 80043c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c8:	f383 8811 	msr	BASEPRI, r3
 80043cc:	f3bf 8f6f 	isb	sy
 80043d0:	f3bf 8f4f 	dsb	sy
 80043d4:	617b      	str	r3, [r7, #20]
 80043d6:	e7fe      	b.n	80043d6 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80043d8:	f001 fecc 	bl	8006174 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80043dc:	2300      	movs	r3, #0
 80043de:	e082      	b.n	80044e6 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80043e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d106      	bne.n	80043f4 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80043e6:	f107 030c 	add.w	r3, r7, #12
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 ff4e 	bl	800528c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80043f0:	2301      	movs	r3, #1
 80043f2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80043f4:	f001 febe 	bl	8006174 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80043f8:	f000 fc2c 	bl	8004c54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043fc:	f001 fe8c 	bl	8006118 <vPortEnterCritical>
 8004400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004402:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004406:	b25b      	sxtb	r3, r3
 8004408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800440c:	d103      	bne.n	8004416 <xQueueSemaphoreTake+0x132>
 800440e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004410:	2200      	movs	r2, #0
 8004412:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004418:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800441c:	b25b      	sxtb	r3, r3
 800441e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004422:	d103      	bne.n	800442c <xQueueSemaphoreTake+0x148>
 8004424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004426:	2200      	movs	r2, #0
 8004428:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800442c:	f001 fea2 	bl	8006174 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004430:	463a      	mov	r2, r7
 8004432:	f107 030c 	add.w	r3, r7, #12
 8004436:	4611      	mov	r1, r2
 8004438:	4618      	mov	r0, r3
 800443a:	f000 ff3d 	bl	80052b8 <xTaskCheckForTimeOut>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d132      	bne.n	80044aa <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004444:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004446:	f000 f94e 	bl	80046e6 <prvIsQueueEmpty>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d026      	beq.n	800449e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d109      	bne.n	800446c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8004458:	f001 fe5e 	bl	8006118 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800445c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	4618      	mov	r0, r3
 8004462:	f001 f889 	bl	8005578 <xTaskPriorityInherit>
 8004466:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004468:	f001 fe84 	bl	8006174 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800446c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800446e:	3324      	adds	r3, #36	; 0x24
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	4611      	mov	r1, r2
 8004474:	4618      	mov	r0, r3
 8004476:	f000 fdbf 	bl	8004ff8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800447a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800447c:	f000 f8e1 	bl	8004642 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004480:	f000 fbf6 	bl	8004c70 <xTaskResumeAll>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	f47f af69 	bne.w	800435e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800448c:	4b18      	ldr	r3, [pc, #96]	; (80044f0 <xQueueSemaphoreTake+0x20c>)
 800448e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004492:	601a      	str	r2, [r3, #0]
 8004494:	f3bf 8f4f 	dsb	sy
 8004498:	f3bf 8f6f 	isb	sy
 800449c:	e75f      	b.n	800435e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800449e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80044a0:	f000 f8cf 	bl	8004642 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80044a4:	f000 fbe4 	bl	8004c70 <xTaskResumeAll>
 80044a8:	e759      	b.n	800435e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80044aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80044ac:	f000 f8c9 	bl	8004642 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80044b0:	f000 fbde 	bl	8004c70 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80044b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80044b6:	f000 f916 	bl	80046e6 <prvIsQueueEmpty>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f43f af4e 	beq.w	800435e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80044c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00d      	beq.n	80044e4 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80044c8:	f001 fe26 	bl	8006118 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80044cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80044ce:	f000 f811 	bl	80044f4 <prvGetDisinheritPriorityAfterTimeout>
 80044d2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80044d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044da:	4618      	mov	r0, r3
 80044dc:	f001 f926 	bl	800572c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80044e0:	f001 fe48 	bl	8006174 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80044e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3738      	adds	r7, #56	; 0x38
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	e000ed04 	.word	0xe000ed04

080044f4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004500:	2b00      	cmp	r3, #0
 8004502:	d006      	beq.n	8004512 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800450e:	60fb      	str	r3, [r7, #12]
 8004510:	e001      	b.n	8004516 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004512:	2300      	movs	r3, #0
 8004514:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004516:	68fb      	ldr	r3, [r7, #12]
	}
 8004518:	4618      	mov	r0, r3
 800451a:	3714      	adds	r7, #20
 800451c:	46bd      	mov	sp, r7
 800451e:	bc80      	pop	{r7}
 8004520:	4770      	bx	lr

08004522 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b086      	sub	sp, #24
 8004526:	af00      	add	r7, sp, #0
 8004528:	60f8      	str	r0, [r7, #12]
 800452a:	60b9      	str	r1, [r7, #8]
 800452c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800452e:	2300      	movs	r3, #0
 8004530:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004536:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453c:	2b00      	cmp	r3, #0
 800453e:	d10d      	bne.n	800455c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d14d      	bne.n	80045e4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	4618      	mov	r0, r3
 800454e:	f001 f881 	bl	8005654 <xTaskPriorityDisinherit>
 8004552:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	605a      	str	r2, [r3, #4]
 800455a:	e043      	b.n	80045e4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d119      	bne.n	8004596 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6898      	ldr	r0, [r3, #8]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456a:	461a      	mov	r2, r3
 800456c:	68b9      	ldr	r1, [r7, #8]
 800456e:	f002 f8db 	bl	8006728 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	689a      	ldr	r2, [r3, #8]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457a:	441a      	add	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	689a      	ldr	r2, [r3, #8]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	429a      	cmp	r2, r3
 800458a:	d32b      	bcc.n	80045e4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	609a      	str	r2, [r3, #8]
 8004594:	e026      	b.n	80045e4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	68d8      	ldr	r0, [r3, #12]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459e:	461a      	mov	r2, r3
 80045a0:	68b9      	ldr	r1, [r7, #8]
 80045a2:	f002 f8c1 	bl	8006728 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	68da      	ldr	r2, [r3, #12]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	425b      	negs	r3, r3
 80045b0:	441a      	add	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	68da      	ldr	r2, [r3, #12]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d207      	bcs.n	80045d2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	685a      	ldr	r2, [r3, #4]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	425b      	negs	r3, r3
 80045cc:	441a      	add	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d105      	bne.n	80045e4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d002      	beq.n	80045e4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	3b01      	subs	r3, #1
 80045e2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	1c5a      	adds	r2, r3, #1
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80045ec:	697b      	ldr	r3, [r7, #20]
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3718      	adds	r7, #24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b082      	sub	sp, #8
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
 80045fe:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004604:	2b00      	cmp	r3, #0
 8004606:	d018      	beq.n	800463a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68da      	ldr	r2, [r3, #12]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004610:	441a      	add	r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68da      	ldr	r2, [r3, #12]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	429a      	cmp	r2, r3
 8004620:	d303      	bcc.n	800462a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68d9      	ldr	r1, [r3, #12]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004632:	461a      	mov	r2, r3
 8004634:	6838      	ldr	r0, [r7, #0]
 8004636:	f002 f877 	bl	8006728 <memcpy>
	}
}
 800463a:	bf00      	nop
 800463c:	3708      	adds	r7, #8
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b084      	sub	sp, #16
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800464a:	f001 fd65 	bl	8006118 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004654:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004656:	e011      	b.n	800467c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465c:	2b00      	cmp	r3, #0
 800465e:	d012      	beq.n	8004686 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	3324      	adds	r3, #36	; 0x24
 8004664:	4618      	mov	r0, r3
 8004666:	f000 fd4f 	bl	8005108 <xTaskRemoveFromEventList>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d001      	beq.n	8004674 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004670:	f000 fe82 	bl	8005378 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004674:	7bfb      	ldrb	r3, [r7, #15]
 8004676:	3b01      	subs	r3, #1
 8004678:	b2db      	uxtb	r3, r3
 800467a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800467c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004680:	2b00      	cmp	r3, #0
 8004682:	dce9      	bgt.n	8004658 <prvUnlockQueue+0x16>
 8004684:	e000      	b.n	8004688 <prvUnlockQueue+0x46>
					break;
 8004686:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	22ff      	movs	r2, #255	; 0xff
 800468c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004690:	f001 fd70 	bl	8006174 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004694:	f001 fd40 	bl	8006118 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800469e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80046a0:	e011      	b.n	80046c6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d012      	beq.n	80046d0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	3310      	adds	r3, #16
 80046ae:	4618      	mov	r0, r3
 80046b0:	f000 fd2a 	bl	8005108 <xTaskRemoveFromEventList>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d001      	beq.n	80046be <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80046ba:	f000 fe5d 	bl	8005378 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80046be:	7bbb      	ldrb	r3, [r7, #14]
 80046c0:	3b01      	subs	r3, #1
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80046c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	dce9      	bgt.n	80046a2 <prvUnlockQueue+0x60>
 80046ce:	e000      	b.n	80046d2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80046d0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	22ff      	movs	r2, #255	; 0xff
 80046d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80046da:	f001 fd4b 	bl	8006174 <vPortExitCritical>
}
 80046de:	bf00      	nop
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b084      	sub	sp, #16
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80046ee:	f001 fd13 	bl	8006118 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d102      	bne.n	8004700 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80046fa:	2301      	movs	r3, #1
 80046fc:	60fb      	str	r3, [r7, #12]
 80046fe:	e001      	b.n	8004704 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004700:	2300      	movs	r3, #0
 8004702:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004704:	f001 fd36 	bl	8006174 <vPortExitCritical>

	return xReturn;
 8004708:	68fb      	ldr	r3, [r7, #12]
}
 800470a:	4618      	mov	r0, r3
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004712:	b580      	push	{r7, lr}
 8004714:	b084      	sub	sp, #16
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800471a:	f001 fcfd 	bl	8006118 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004726:	429a      	cmp	r2, r3
 8004728:	d102      	bne.n	8004730 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800472a:	2301      	movs	r3, #1
 800472c:	60fb      	str	r3, [r7, #12]
 800472e:	e001      	b.n	8004734 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004730:	2300      	movs	r3, #0
 8004732:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004734:	f001 fd1e 	bl	8006174 <vPortExitCritical>

	return xReturn;
 8004738:	68fb      	ldr	r3, [r7, #12]
}
 800473a:	4618      	mov	r0, r3
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
	...

08004744 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800474e:	2300      	movs	r3, #0
 8004750:	60fb      	str	r3, [r7, #12]
 8004752:	e014      	b.n	800477e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004754:	4a0e      	ldr	r2, [pc, #56]	; (8004790 <vQueueAddToRegistry+0x4c>)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d10b      	bne.n	8004778 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004760:	490b      	ldr	r1, [pc, #44]	; (8004790 <vQueueAddToRegistry+0x4c>)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	683a      	ldr	r2, [r7, #0]
 8004766:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800476a:	4a09      	ldr	r2, [pc, #36]	; (8004790 <vQueueAddToRegistry+0x4c>)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	00db      	lsls	r3, r3, #3
 8004770:	4413      	add	r3, r2
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004776:	e005      	b.n	8004784 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	3301      	adds	r3, #1
 800477c:	60fb      	str	r3, [r7, #12]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2b07      	cmp	r3, #7
 8004782:	d9e7      	bls.n	8004754 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004784:	bf00      	nop
 8004786:	3714      	adds	r7, #20
 8004788:	46bd      	mov	sp, r7
 800478a:	bc80      	pop	{r7}
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	20001a7c 	.word	0x20001a7c

08004794 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80047a4:	f001 fcb8 	bl	8006118 <vPortEnterCritical>
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047ae:	b25b      	sxtb	r3, r3
 80047b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b4:	d103      	bne.n	80047be <vQueueWaitForMessageRestricted+0x2a>
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047c4:	b25b      	sxtb	r3, r3
 80047c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ca:	d103      	bne.n	80047d4 <vQueueWaitForMessageRestricted+0x40>
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047d4:	f001 fcce 	bl	8006174 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d106      	bne.n	80047ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	3324      	adds	r3, #36	; 0x24
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	68b9      	ldr	r1, [r7, #8]
 80047e8:	4618      	mov	r0, r3
 80047ea:	f000 fc63 	bl	80050b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80047ee:	6978      	ldr	r0, [r7, #20]
 80047f0:	f7ff ff27 	bl	8004642 <prvUnlockQueue>
	}
 80047f4:	bf00      	nop
 80047f6:	3718      	adds	r7, #24
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b08e      	sub	sp, #56	; 0x38
 8004800:	af04      	add	r7, sp, #16
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
 8004808:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800480a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800480c:	2b00      	cmp	r3, #0
 800480e:	d109      	bne.n	8004824 <xTaskCreateStatic+0x28>
 8004810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004814:	f383 8811 	msr	BASEPRI, r3
 8004818:	f3bf 8f6f 	isb	sy
 800481c:	f3bf 8f4f 	dsb	sy
 8004820:	623b      	str	r3, [r7, #32]
 8004822:	e7fe      	b.n	8004822 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004826:	2b00      	cmp	r3, #0
 8004828:	d109      	bne.n	800483e <xTaskCreateStatic+0x42>
 800482a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482e:	f383 8811 	msr	BASEPRI, r3
 8004832:	f3bf 8f6f 	isb	sy
 8004836:	f3bf 8f4f 	dsb	sy
 800483a:	61fb      	str	r3, [r7, #28]
 800483c:	e7fe      	b.n	800483c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800483e:	235c      	movs	r3, #92	; 0x5c
 8004840:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	2b5c      	cmp	r3, #92	; 0x5c
 8004846:	d009      	beq.n	800485c <xTaskCreateStatic+0x60>
 8004848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484c:	f383 8811 	msr	BASEPRI, r3
 8004850:	f3bf 8f6f 	isb	sy
 8004854:	f3bf 8f4f 	dsb	sy
 8004858:	61bb      	str	r3, [r7, #24]
 800485a:	e7fe      	b.n	800485a <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800485c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800485e:	2b00      	cmp	r3, #0
 8004860:	d01e      	beq.n	80048a0 <xTaskCreateStatic+0xa4>
 8004862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004864:	2b00      	cmp	r3, #0
 8004866:	d01b      	beq.n	80048a0 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800486a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800486c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004870:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004874:	2202      	movs	r2, #2
 8004876:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800487a:	2300      	movs	r3, #0
 800487c:	9303      	str	r3, [sp, #12]
 800487e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004880:	9302      	str	r3, [sp, #8]
 8004882:	f107 0314 	add.w	r3, r7, #20
 8004886:	9301      	str	r3, [sp, #4]
 8004888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488a:	9300      	str	r3, [sp, #0]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	68b9      	ldr	r1, [r7, #8]
 8004892:	68f8      	ldr	r0, [r7, #12]
 8004894:	f000 f850 	bl	8004938 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004898:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800489a:	f000 f8d3 	bl	8004a44 <prvAddNewTaskToReadyList>
 800489e:	e001      	b.n	80048a4 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80048a0:	2300      	movs	r3, #0
 80048a2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80048a4:	697b      	ldr	r3, [r7, #20]
	}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3728      	adds	r7, #40	; 0x28
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}

080048ae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80048ae:	b580      	push	{r7, lr}
 80048b0:	b08c      	sub	sp, #48	; 0x30
 80048b2:	af04      	add	r7, sp, #16
 80048b4:	60f8      	str	r0, [r7, #12]
 80048b6:	60b9      	str	r1, [r7, #8]
 80048b8:	603b      	str	r3, [r7, #0]
 80048ba:	4613      	mov	r3, r2
 80048bc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048be:	88fb      	ldrh	r3, [r7, #6]
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4618      	mov	r0, r3
 80048c4:	f001 fd1e 	bl	8006304 <pvPortMalloc>
 80048c8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00e      	beq.n	80048ee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80048d0:	205c      	movs	r0, #92	; 0x5c
 80048d2:	f001 fd17 	bl	8006304 <pvPortMalloc>
 80048d6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d003      	beq.n	80048e6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	631a      	str	r2, [r3, #48]	; 0x30
 80048e4:	e005      	b.n	80048f2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80048e6:	6978      	ldr	r0, [r7, #20]
 80048e8:	f001 fdce 	bl	8006488 <vPortFree>
 80048ec:	e001      	b.n	80048f2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80048ee:	2300      	movs	r3, #0
 80048f0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d017      	beq.n	8004928 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004900:	88fa      	ldrh	r2, [r7, #6]
 8004902:	2300      	movs	r3, #0
 8004904:	9303      	str	r3, [sp, #12]
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	9302      	str	r3, [sp, #8]
 800490a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800490c:	9301      	str	r3, [sp, #4]
 800490e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004910:	9300      	str	r3, [sp, #0]
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	68b9      	ldr	r1, [r7, #8]
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f000 f80e 	bl	8004938 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800491c:	69f8      	ldr	r0, [r7, #28]
 800491e:	f000 f891 	bl	8004a44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004922:	2301      	movs	r3, #1
 8004924:	61bb      	str	r3, [r7, #24]
 8004926:	e002      	b.n	800492e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004928:	f04f 33ff 	mov.w	r3, #4294967295
 800492c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800492e:	69bb      	ldr	r3, [r7, #24]
	}
 8004930:	4618      	mov	r0, r3
 8004932:	3720      	adds	r7, #32
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b088      	sub	sp, #32
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
 8004944:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004948:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	461a      	mov	r2, r3
 8004950:	21a5      	movs	r1, #165	; 0xa5
 8004952:	f001 fef4 	bl	800673e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004958:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004960:	3b01      	subs	r3, #1
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	4413      	add	r3, r2
 8004966:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	f023 0307 	bic.w	r3, r3, #7
 800496e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	f003 0307 	and.w	r3, r3, #7
 8004976:	2b00      	cmp	r3, #0
 8004978:	d009      	beq.n	800498e <prvInitialiseNewTask+0x56>
 800497a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800497e:	f383 8811 	msr	BASEPRI, r3
 8004982:	f3bf 8f6f 	isb	sy
 8004986:	f3bf 8f4f 	dsb	sy
 800498a:	617b      	str	r3, [r7, #20]
 800498c:	e7fe      	b.n	800498c <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800498e:	2300      	movs	r3, #0
 8004990:	61fb      	str	r3, [r7, #28]
 8004992:	e012      	b.n	80049ba <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004994:	68ba      	ldr	r2, [r7, #8]
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	4413      	add	r3, r2
 800499a:	7819      	ldrb	r1, [r3, #0]
 800499c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	4413      	add	r3, r2
 80049a2:	3334      	adds	r3, #52	; 0x34
 80049a4:	460a      	mov	r2, r1
 80049a6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80049a8:	68ba      	ldr	r2, [r7, #8]
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	4413      	add	r3, r2
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d006      	beq.n	80049c2 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	3301      	adds	r3, #1
 80049b8:	61fb      	str	r3, [r7, #28]
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	2b0f      	cmp	r3, #15
 80049be:	d9e9      	bls.n	8004994 <prvInitialiseNewTask+0x5c>
 80049c0:	e000      	b.n	80049c4 <prvInitialiseNewTask+0x8c>
		{
			break;
 80049c2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80049c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80049cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ce:	2b37      	cmp	r3, #55	; 0x37
 80049d0:	d901      	bls.n	80049d6 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80049d2:	2337      	movs	r3, #55	; 0x37
 80049d4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80049d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049da:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80049dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049e0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80049e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e4:	2200      	movs	r2, #0
 80049e6:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80049e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ea:	3304      	adds	r3, #4
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7ff f844 	bl	8003a7a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80049f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f4:	3318      	adds	r3, #24
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7ff f83f 	bl	8003a7a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80049fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a00:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a04:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a10:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a14:	2200      	movs	r2, #0
 8004a16:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004a20:	683a      	ldr	r2, [r7, #0]
 8004a22:	68f9      	ldr	r1, [r7, #12]
 8004a24:	69b8      	ldr	r0, [r7, #24]
 8004a26:	f001 fa8f 	bl	8005f48 <pxPortInitialiseStack>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d002      	beq.n	8004a3c <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a3a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a3c:	bf00      	nop
 8004a3e:	3720      	adds	r7, #32
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004a4c:	f001 fb64 	bl	8006118 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004a50:	4b2d      	ldr	r3, [pc, #180]	; (8004b08 <prvAddNewTaskToReadyList+0xc4>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	3301      	adds	r3, #1
 8004a56:	4a2c      	ldr	r2, [pc, #176]	; (8004b08 <prvAddNewTaskToReadyList+0xc4>)
 8004a58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004a5a:	4b2c      	ldr	r3, [pc, #176]	; (8004b0c <prvAddNewTaskToReadyList+0xc8>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d109      	bne.n	8004a76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004a62:	4a2a      	ldr	r2, [pc, #168]	; (8004b0c <prvAddNewTaskToReadyList+0xc8>)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004a68:	4b27      	ldr	r3, [pc, #156]	; (8004b08 <prvAddNewTaskToReadyList+0xc4>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d110      	bne.n	8004a92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004a70:	f000 fca6 	bl	80053c0 <prvInitialiseTaskLists>
 8004a74:	e00d      	b.n	8004a92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004a76:	4b26      	ldr	r3, [pc, #152]	; (8004b10 <prvAddNewTaskToReadyList+0xcc>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d109      	bne.n	8004a92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004a7e:	4b23      	ldr	r3, [pc, #140]	; (8004b0c <prvAddNewTaskToReadyList+0xc8>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d802      	bhi.n	8004a92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004a8c:	4a1f      	ldr	r2, [pc, #124]	; (8004b0c <prvAddNewTaskToReadyList+0xc8>)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004a92:	4b20      	ldr	r3, [pc, #128]	; (8004b14 <prvAddNewTaskToReadyList+0xd0>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	3301      	adds	r3, #1
 8004a98:	4a1e      	ldr	r2, [pc, #120]	; (8004b14 <prvAddNewTaskToReadyList+0xd0>)
 8004a9a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004a9c:	4b1d      	ldr	r3, [pc, #116]	; (8004b14 <prvAddNewTaskToReadyList+0xd0>)
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa8:	4b1b      	ldr	r3, [pc, #108]	; (8004b18 <prvAddNewTaskToReadyList+0xd4>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d903      	bls.n	8004ab8 <prvAddNewTaskToReadyList+0x74>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab4:	4a18      	ldr	r2, [pc, #96]	; (8004b18 <prvAddNewTaskToReadyList+0xd4>)
 8004ab6:	6013      	str	r3, [r2, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004abc:	4613      	mov	r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4413      	add	r3, r2
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	4a15      	ldr	r2, [pc, #84]	; (8004b1c <prvAddNewTaskToReadyList+0xd8>)
 8004ac6:	441a      	add	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	3304      	adds	r3, #4
 8004acc:	4619      	mov	r1, r3
 8004ace:	4610      	mov	r0, r2
 8004ad0:	f7fe ffdf 	bl	8003a92 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004ad4:	f001 fb4e 	bl	8006174 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004ad8:	4b0d      	ldr	r3, [pc, #52]	; (8004b10 <prvAddNewTaskToReadyList+0xcc>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00e      	beq.n	8004afe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004ae0:	4b0a      	ldr	r3, [pc, #40]	; (8004b0c <prvAddNewTaskToReadyList+0xc8>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d207      	bcs.n	8004afe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004aee:	4b0c      	ldr	r3, [pc, #48]	; (8004b20 <prvAddNewTaskToReadyList+0xdc>)
 8004af0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004af4:	601a      	str	r2, [r3, #0]
 8004af6:	f3bf 8f4f 	dsb	sy
 8004afa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004afe:	bf00      	nop
 8004b00:	3708      	adds	r7, #8
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	20000bf4 	.word	0x20000bf4
 8004b0c:	20000720 	.word	0x20000720
 8004b10:	20000c00 	.word	0x20000c00
 8004b14:	20000c10 	.word	0x20000c10
 8004b18:	20000bfc 	.word	0x20000bfc
 8004b1c:	20000724 	.word	0x20000724
 8004b20:	e000ed04 	.word	0xe000ed04

08004b24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d016      	beq.n	8004b64 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004b36:	4b13      	ldr	r3, [pc, #76]	; (8004b84 <vTaskDelay+0x60>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d009      	beq.n	8004b52 <vTaskDelay+0x2e>
 8004b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b42:	f383 8811 	msr	BASEPRI, r3
 8004b46:	f3bf 8f6f 	isb	sy
 8004b4a:	f3bf 8f4f 	dsb	sy
 8004b4e:	60bb      	str	r3, [r7, #8]
 8004b50:	e7fe      	b.n	8004b50 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004b52:	f000 f87f 	bl	8004c54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004b56:	2100      	movs	r1, #0
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 fe97 	bl	800588c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004b5e:	f000 f887 	bl	8004c70 <xTaskResumeAll>
 8004b62:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d107      	bne.n	8004b7a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004b6a:	4b07      	ldr	r3, [pc, #28]	; (8004b88 <vTaskDelay+0x64>)
 8004b6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b70:	601a      	str	r2, [r3, #0]
 8004b72:	f3bf 8f4f 	dsb	sy
 8004b76:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004b7a:	bf00      	nop
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	20000c1c 	.word	0x20000c1c
 8004b88:	e000ed04 	.word	0xe000ed04

08004b8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b08a      	sub	sp, #40	; 0x28
 8004b90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004b92:	2300      	movs	r3, #0
 8004b94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004b96:	2300      	movs	r3, #0
 8004b98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004b9a:	463a      	mov	r2, r7
 8004b9c:	1d39      	adds	r1, r7, #4
 8004b9e:	f107 0308 	add.w	r3, r7, #8
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7fe fd54 	bl	8003650 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004ba8:	6839      	ldr	r1, [r7, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	68ba      	ldr	r2, [r7, #8]
 8004bae:	9202      	str	r2, [sp, #8]
 8004bb0:	9301      	str	r3, [sp, #4]
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	9300      	str	r3, [sp, #0]
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	460a      	mov	r2, r1
 8004bba:	4920      	ldr	r1, [pc, #128]	; (8004c3c <vTaskStartScheduler+0xb0>)
 8004bbc:	4820      	ldr	r0, [pc, #128]	; (8004c40 <vTaskStartScheduler+0xb4>)
 8004bbe:	f7ff fe1d 	bl	80047fc <xTaskCreateStatic>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	4b1f      	ldr	r3, [pc, #124]	; (8004c44 <vTaskStartScheduler+0xb8>)
 8004bc6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004bc8:	4b1e      	ldr	r3, [pc, #120]	; (8004c44 <vTaskStartScheduler+0xb8>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d002      	beq.n	8004bd6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	617b      	str	r3, [r7, #20]
 8004bd4:	e001      	b.n	8004bda <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d102      	bne.n	8004be6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004be0:	f000 fea8 	bl	8005934 <xTimerCreateTimerTask>
 8004be4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d115      	bne.n	8004c18 <vTaskStartScheduler+0x8c>
 8004bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf0:	f383 8811 	msr	BASEPRI, r3
 8004bf4:	f3bf 8f6f 	isb	sy
 8004bf8:	f3bf 8f4f 	dsb	sy
 8004bfc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004bfe:	4b12      	ldr	r3, [pc, #72]	; (8004c48 <vTaskStartScheduler+0xbc>)
 8004c00:	f04f 32ff 	mov.w	r2, #4294967295
 8004c04:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004c06:	4b11      	ldr	r3, [pc, #68]	; (8004c4c <vTaskStartScheduler+0xc0>)
 8004c08:	2201      	movs	r2, #1
 8004c0a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004c0c:	4b10      	ldr	r3, [pc, #64]	; (8004c50 <vTaskStartScheduler+0xc4>)
 8004c0e:	2200      	movs	r2, #0
 8004c10:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004c12:	f001 fa11 	bl	8006038 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004c16:	e00d      	b.n	8004c34 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c1e:	d109      	bne.n	8004c34 <vTaskStartScheduler+0xa8>
 8004c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c24:	f383 8811 	msr	BASEPRI, r3
 8004c28:	f3bf 8f6f 	isb	sy
 8004c2c:	f3bf 8f4f 	dsb	sy
 8004c30:	60fb      	str	r3, [r7, #12]
 8004c32:	e7fe      	b.n	8004c32 <vTaskStartScheduler+0xa6>
}
 8004c34:	bf00      	nop
 8004c36:	3718      	adds	r7, #24
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	080069dc 	.word	0x080069dc
 8004c40:	08005391 	.word	0x08005391
 8004c44:	20000c18 	.word	0x20000c18
 8004c48:	20000c14 	.word	0x20000c14
 8004c4c:	20000c00 	.word	0x20000c00
 8004c50:	20000bf8 	.word	0x20000bf8

08004c54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004c54:	b480      	push	{r7}
 8004c56:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004c58:	4b04      	ldr	r3, [pc, #16]	; (8004c6c <vTaskSuspendAll+0x18>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	4a03      	ldr	r2, [pc, #12]	; (8004c6c <vTaskSuspendAll+0x18>)
 8004c60:	6013      	str	r3, [r2, #0]
}
 8004c62:	bf00      	nop
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bc80      	pop	{r7}
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	20000c1c 	.word	0x20000c1c

08004c70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004c76:	2300      	movs	r3, #0
 8004c78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004c7e:	4b41      	ldr	r3, [pc, #260]	; (8004d84 <xTaskResumeAll+0x114>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d109      	bne.n	8004c9a <xTaskResumeAll+0x2a>
 8004c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8a:	f383 8811 	msr	BASEPRI, r3
 8004c8e:	f3bf 8f6f 	isb	sy
 8004c92:	f3bf 8f4f 	dsb	sy
 8004c96:	603b      	str	r3, [r7, #0]
 8004c98:	e7fe      	b.n	8004c98 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004c9a:	f001 fa3d 	bl	8006118 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004c9e:	4b39      	ldr	r3, [pc, #228]	; (8004d84 <xTaskResumeAll+0x114>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	4a37      	ldr	r2, [pc, #220]	; (8004d84 <xTaskResumeAll+0x114>)
 8004ca6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ca8:	4b36      	ldr	r3, [pc, #216]	; (8004d84 <xTaskResumeAll+0x114>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d162      	bne.n	8004d76 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004cb0:	4b35      	ldr	r3, [pc, #212]	; (8004d88 <xTaskResumeAll+0x118>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d05e      	beq.n	8004d76 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004cb8:	e02f      	b.n	8004d1a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004cba:	4b34      	ldr	r3, [pc, #208]	; (8004d8c <xTaskResumeAll+0x11c>)
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	3318      	adds	r3, #24
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7fe ff3e 	bl	8003b48 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	3304      	adds	r3, #4
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7fe ff39 	bl	8003b48 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cda:	4b2d      	ldr	r3, [pc, #180]	; (8004d90 <xTaskResumeAll+0x120>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d903      	bls.n	8004cea <xTaskResumeAll+0x7a>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce6:	4a2a      	ldr	r2, [pc, #168]	; (8004d90 <xTaskResumeAll+0x120>)
 8004ce8:	6013      	str	r3, [r2, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cee:	4613      	mov	r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	4413      	add	r3, r2
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	4a27      	ldr	r2, [pc, #156]	; (8004d94 <xTaskResumeAll+0x124>)
 8004cf8:	441a      	add	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	3304      	adds	r3, #4
 8004cfe:	4619      	mov	r1, r3
 8004d00:	4610      	mov	r0, r2
 8004d02:	f7fe fec6 	bl	8003a92 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d0a:	4b23      	ldr	r3, [pc, #140]	; (8004d98 <xTaskResumeAll+0x128>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d302      	bcc.n	8004d1a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004d14:	4b21      	ldr	r3, [pc, #132]	; (8004d9c <xTaskResumeAll+0x12c>)
 8004d16:	2201      	movs	r2, #1
 8004d18:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d1a:	4b1c      	ldr	r3, [pc, #112]	; (8004d8c <xTaskResumeAll+0x11c>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1cb      	bne.n	8004cba <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d001      	beq.n	8004d2c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004d28:	f000 fbe4 	bl	80054f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004d2c:	4b1c      	ldr	r3, [pc, #112]	; (8004da0 <xTaskResumeAll+0x130>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d010      	beq.n	8004d5a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004d38:	f000 f844 	bl	8004dc4 <xTaskIncrementTick>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d002      	beq.n	8004d48 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004d42:	4b16      	ldr	r3, [pc, #88]	; (8004d9c <xTaskResumeAll+0x12c>)
 8004d44:	2201      	movs	r2, #1
 8004d46:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1f1      	bne.n	8004d38 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004d54:	4b12      	ldr	r3, [pc, #72]	; (8004da0 <xTaskResumeAll+0x130>)
 8004d56:	2200      	movs	r2, #0
 8004d58:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004d5a:	4b10      	ldr	r3, [pc, #64]	; (8004d9c <xTaskResumeAll+0x12c>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d009      	beq.n	8004d76 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004d62:	2301      	movs	r3, #1
 8004d64:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004d66:	4b0f      	ldr	r3, [pc, #60]	; (8004da4 <xTaskResumeAll+0x134>)
 8004d68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d6c:	601a      	str	r2, [r3, #0]
 8004d6e:	f3bf 8f4f 	dsb	sy
 8004d72:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004d76:	f001 f9fd 	bl	8006174 <vPortExitCritical>

	return xAlreadyYielded;
 8004d7a:	68bb      	ldr	r3, [r7, #8]
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3710      	adds	r7, #16
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	20000c1c 	.word	0x20000c1c
 8004d88:	20000bf4 	.word	0x20000bf4
 8004d8c:	20000bb4 	.word	0x20000bb4
 8004d90:	20000bfc 	.word	0x20000bfc
 8004d94:	20000724 	.word	0x20000724
 8004d98:	20000720 	.word	0x20000720
 8004d9c:	20000c08 	.word	0x20000c08
 8004da0:	20000c04 	.word	0x20000c04
 8004da4:	e000ed04 	.word	0xe000ed04

08004da8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004dae:	4b04      	ldr	r3, [pc, #16]	; (8004dc0 <xTaskGetTickCount+0x18>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004db4:	687b      	ldr	r3, [r7, #4]
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	370c      	adds	r7, #12
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bc80      	pop	{r7}
 8004dbe:	4770      	bx	lr
 8004dc0:	20000bf8 	.word	0x20000bf8

08004dc4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b086      	sub	sp, #24
 8004dc8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004dce:	4b51      	ldr	r3, [pc, #324]	; (8004f14 <xTaskIncrementTick+0x150>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f040 808d 	bne.w	8004ef2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004dd8:	4b4f      	ldr	r3, [pc, #316]	; (8004f18 <xTaskIncrementTick+0x154>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	3301      	adds	r3, #1
 8004dde:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004de0:	4a4d      	ldr	r2, [pc, #308]	; (8004f18 <xTaskIncrementTick+0x154>)
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d11f      	bne.n	8004e2c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004dec:	4b4b      	ldr	r3, [pc, #300]	; (8004f1c <xTaskIncrementTick+0x158>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d009      	beq.n	8004e0a <xTaskIncrementTick+0x46>
 8004df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfa:	f383 8811 	msr	BASEPRI, r3
 8004dfe:	f3bf 8f6f 	isb	sy
 8004e02:	f3bf 8f4f 	dsb	sy
 8004e06:	603b      	str	r3, [r7, #0]
 8004e08:	e7fe      	b.n	8004e08 <xTaskIncrementTick+0x44>
 8004e0a:	4b44      	ldr	r3, [pc, #272]	; (8004f1c <xTaskIncrementTick+0x158>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	60fb      	str	r3, [r7, #12]
 8004e10:	4b43      	ldr	r3, [pc, #268]	; (8004f20 <xTaskIncrementTick+0x15c>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a41      	ldr	r2, [pc, #260]	; (8004f1c <xTaskIncrementTick+0x158>)
 8004e16:	6013      	str	r3, [r2, #0]
 8004e18:	4a41      	ldr	r2, [pc, #260]	; (8004f20 <xTaskIncrementTick+0x15c>)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6013      	str	r3, [r2, #0]
 8004e1e:	4b41      	ldr	r3, [pc, #260]	; (8004f24 <xTaskIncrementTick+0x160>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	3301      	adds	r3, #1
 8004e24:	4a3f      	ldr	r2, [pc, #252]	; (8004f24 <xTaskIncrementTick+0x160>)
 8004e26:	6013      	str	r3, [r2, #0]
 8004e28:	f000 fb64 	bl	80054f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004e2c:	4b3e      	ldr	r3, [pc, #248]	; (8004f28 <xTaskIncrementTick+0x164>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d34e      	bcc.n	8004ed4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e36:	4b39      	ldr	r3, [pc, #228]	; (8004f1c <xTaskIncrementTick+0x158>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d101      	bne.n	8004e44 <xTaskIncrementTick+0x80>
 8004e40:	2301      	movs	r3, #1
 8004e42:	e000      	b.n	8004e46 <xTaskIncrementTick+0x82>
 8004e44:	2300      	movs	r3, #0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d004      	beq.n	8004e54 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e4a:	4b37      	ldr	r3, [pc, #220]	; (8004f28 <xTaskIncrementTick+0x164>)
 8004e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e50:	601a      	str	r2, [r3, #0]
					break;
 8004e52:	e03f      	b.n	8004ed4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004e54:	4b31      	ldr	r3, [pc, #196]	; (8004f1c <xTaskIncrementTick+0x158>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004e64:	693a      	ldr	r2, [r7, #16]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d203      	bcs.n	8004e74 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004e6c:	4a2e      	ldr	r2, [pc, #184]	; (8004f28 <xTaskIncrementTick+0x164>)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6013      	str	r3, [r2, #0]
						break;
 8004e72:	e02f      	b.n	8004ed4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	3304      	adds	r3, #4
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f7fe fe65 	bl	8003b48 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d004      	beq.n	8004e90 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	3318      	adds	r3, #24
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7fe fe5c 	bl	8003b48 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e94:	4b25      	ldr	r3, [pc, #148]	; (8004f2c <xTaskIncrementTick+0x168>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d903      	bls.n	8004ea4 <xTaskIncrementTick+0xe0>
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea0:	4a22      	ldr	r2, [pc, #136]	; (8004f2c <xTaskIncrementTick+0x168>)
 8004ea2:	6013      	str	r3, [r2, #0]
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	4413      	add	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4a1f      	ldr	r2, [pc, #124]	; (8004f30 <xTaskIncrementTick+0x16c>)
 8004eb2:	441a      	add	r2, r3
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	3304      	adds	r3, #4
 8004eb8:	4619      	mov	r1, r3
 8004eba:	4610      	mov	r0, r2
 8004ebc:	f7fe fde9 	bl	8003a92 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec4:	4b1b      	ldr	r3, [pc, #108]	; (8004f34 <xTaskIncrementTick+0x170>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d3b3      	bcc.n	8004e36 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ed2:	e7b0      	b.n	8004e36 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004ed4:	4b17      	ldr	r3, [pc, #92]	; (8004f34 <xTaskIncrementTick+0x170>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eda:	4915      	ldr	r1, [pc, #84]	; (8004f30 <xTaskIncrementTick+0x16c>)
 8004edc:	4613      	mov	r3, r2
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	4413      	add	r3, r2
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	440b      	add	r3, r1
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d907      	bls.n	8004efc <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004eec:	2301      	movs	r3, #1
 8004eee:	617b      	str	r3, [r7, #20]
 8004ef0:	e004      	b.n	8004efc <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004ef2:	4b11      	ldr	r3, [pc, #68]	; (8004f38 <xTaskIncrementTick+0x174>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	4a0f      	ldr	r2, [pc, #60]	; (8004f38 <xTaskIncrementTick+0x174>)
 8004efa:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004efc:	4b0f      	ldr	r3, [pc, #60]	; (8004f3c <xTaskIncrementTick+0x178>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d001      	beq.n	8004f08 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004f04:	2301      	movs	r3, #1
 8004f06:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004f08:	697b      	ldr	r3, [r7, #20]
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3718      	adds	r7, #24
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	20000c1c 	.word	0x20000c1c
 8004f18:	20000bf8 	.word	0x20000bf8
 8004f1c:	20000bac 	.word	0x20000bac
 8004f20:	20000bb0 	.word	0x20000bb0
 8004f24:	20000c0c 	.word	0x20000c0c
 8004f28:	20000c14 	.word	0x20000c14
 8004f2c:	20000bfc 	.word	0x20000bfc
 8004f30:	20000724 	.word	0x20000724
 8004f34:	20000720 	.word	0x20000720
 8004f38:	20000c04 	.word	0x20000c04
 8004f3c:	20000c08 	.word	0x20000c08

08004f40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004f46:	4b27      	ldr	r3, [pc, #156]	; (8004fe4 <vTaskSwitchContext+0xa4>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d003      	beq.n	8004f56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004f4e:	4b26      	ldr	r3, [pc, #152]	; (8004fe8 <vTaskSwitchContext+0xa8>)
 8004f50:	2201      	movs	r2, #1
 8004f52:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004f54:	e040      	b.n	8004fd8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004f56:	4b24      	ldr	r3, [pc, #144]	; (8004fe8 <vTaskSwitchContext+0xa8>)
 8004f58:	2200      	movs	r2, #0
 8004f5a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004f5c:	4b23      	ldr	r3, [pc, #140]	; (8004fec <vTaskSwitchContext+0xac>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	60fb      	str	r3, [r7, #12]
 8004f62:	e00f      	b.n	8004f84 <vTaskSwitchContext+0x44>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d109      	bne.n	8004f7e <vTaskSwitchContext+0x3e>
 8004f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6e:	f383 8811 	msr	BASEPRI, r3
 8004f72:	f3bf 8f6f 	isb	sy
 8004f76:	f3bf 8f4f 	dsb	sy
 8004f7a:	607b      	str	r3, [r7, #4]
 8004f7c:	e7fe      	b.n	8004f7c <vTaskSwitchContext+0x3c>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	3b01      	subs	r3, #1
 8004f82:	60fb      	str	r3, [r7, #12]
 8004f84:	491a      	ldr	r1, [pc, #104]	; (8004ff0 <vTaskSwitchContext+0xb0>)
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	4613      	mov	r3, r2
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4413      	add	r3, r2
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	440b      	add	r3, r1
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d0e5      	beq.n	8004f64 <vTaskSwitchContext+0x24>
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	4413      	add	r3, r2
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	4a13      	ldr	r2, [pc, #76]	; (8004ff0 <vTaskSwitchContext+0xb0>)
 8004fa4:	4413      	add	r3, r2
 8004fa6:	60bb      	str	r3, [r7, #8]
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	685a      	ldr	r2, [r3, #4]
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	605a      	str	r2, [r3, #4]
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	685a      	ldr	r2, [r3, #4]
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	3308      	adds	r3, #8
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d104      	bne.n	8004fc8 <vTaskSwitchContext+0x88>
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	685a      	ldr	r2, [r3, #4]
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	605a      	str	r2, [r3, #4]
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	4a09      	ldr	r2, [pc, #36]	; (8004ff4 <vTaskSwitchContext+0xb4>)
 8004fd0:	6013      	str	r3, [r2, #0]
 8004fd2:	4a06      	ldr	r2, [pc, #24]	; (8004fec <vTaskSwitchContext+0xac>)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6013      	str	r3, [r2, #0]
}
 8004fd8:	bf00      	nop
 8004fda:	3714      	adds	r7, #20
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bc80      	pop	{r7}
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	20000c1c 	.word	0x20000c1c
 8004fe8:	20000c08 	.word	0x20000c08
 8004fec:	20000bfc 	.word	0x20000bfc
 8004ff0:	20000724 	.word	0x20000724
 8004ff4:	20000720 	.word	0x20000720

08004ff8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d109      	bne.n	800501c <vTaskPlaceOnEventList+0x24>
 8005008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500c:	f383 8811 	msr	BASEPRI, r3
 8005010:	f3bf 8f6f 	isb	sy
 8005014:	f3bf 8f4f 	dsb	sy
 8005018:	60fb      	str	r3, [r7, #12]
 800501a:	e7fe      	b.n	800501a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800501c:	4b07      	ldr	r3, [pc, #28]	; (800503c <vTaskPlaceOnEventList+0x44>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	3318      	adds	r3, #24
 8005022:	4619      	mov	r1, r3
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f7fe fd57 	bl	8003ad8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800502a:	2101      	movs	r1, #1
 800502c:	6838      	ldr	r0, [r7, #0]
 800502e:	f000 fc2d 	bl	800588c <prvAddCurrentTaskToDelayedList>
}
 8005032:	bf00      	nop
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	20000720 	.word	0x20000720

08005040 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d109      	bne.n	8005066 <vTaskPlaceOnUnorderedEventList+0x26>
 8005052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005056:	f383 8811 	msr	BASEPRI, r3
 800505a:	f3bf 8f6f 	isb	sy
 800505e:	f3bf 8f4f 	dsb	sy
 8005062:	617b      	str	r3, [r7, #20]
 8005064:	e7fe      	b.n	8005064 <vTaskPlaceOnUnorderedEventList+0x24>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8005066:	4b11      	ldr	r3, [pc, #68]	; (80050ac <vTaskPlaceOnUnorderedEventList+0x6c>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d109      	bne.n	8005082 <vTaskPlaceOnUnorderedEventList+0x42>
 800506e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005072:	f383 8811 	msr	BASEPRI, r3
 8005076:	f3bf 8f6f 	isb	sy
 800507a:	f3bf 8f4f 	dsb	sy
 800507e:	613b      	str	r3, [r7, #16]
 8005080:	e7fe      	b.n	8005080 <vTaskPlaceOnUnorderedEventList+0x40>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8005082:	4b0b      	ldr	r3, [pc, #44]	; (80050b0 <vTaskPlaceOnUnorderedEventList+0x70>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800508c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800508e:	4b08      	ldr	r3, [pc, #32]	; (80050b0 <vTaskPlaceOnUnorderedEventList+0x70>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	3318      	adds	r3, #24
 8005094:	4619      	mov	r1, r3
 8005096:	68f8      	ldr	r0, [r7, #12]
 8005098:	f7fe fcfb 	bl	8003a92 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800509c:	2101      	movs	r1, #1
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 fbf4 	bl	800588c <prvAddCurrentTaskToDelayedList>
}
 80050a4:	bf00      	nop
 80050a6:	3718      	adds	r7, #24
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	20000c1c 	.word	0x20000c1c
 80050b0:	20000720 	.word	0x20000720

080050b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b086      	sub	sp, #24
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d109      	bne.n	80050da <vTaskPlaceOnEventListRestricted+0x26>
 80050c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ca:	f383 8811 	msr	BASEPRI, r3
 80050ce:	f3bf 8f6f 	isb	sy
 80050d2:	f3bf 8f4f 	dsb	sy
 80050d6:	617b      	str	r3, [r7, #20]
 80050d8:	e7fe      	b.n	80050d8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80050da:	4b0a      	ldr	r3, [pc, #40]	; (8005104 <vTaskPlaceOnEventListRestricted+0x50>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	3318      	adds	r3, #24
 80050e0:	4619      	mov	r1, r3
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f7fe fcd5 	bl	8003a92 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d002      	beq.n	80050f4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80050ee:	f04f 33ff 	mov.w	r3, #4294967295
 80050f2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80050f4:	6879      	ldr	r1, [r7, #4]
 80050f6:	68b8      	ldr	r0, [r7, #8]
 80050f8:	f000 fbc8 	bl	800588c <prvAddCurrentTaskToDelayedList>
	}
 80050fc:	bf00      	nop
 80050fe:	3718      	adds	r7, #24
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	20000720 	.word	0x20000720

08005108 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b086      	sub	sp, #24
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d109      	bne.n	8005132 <xTaskRemoveFromEventList+0x2a>
 800511e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005122:	f383 8811 	msr	BASEPRI, r3
 8005126:	f3bf 8f6f 	isb	sy
 800512a:	f3bf 8f4f 	dsb	sy
 800512e:	60fb      	str	r3, [r7, #12]
 8005130:	e7fe      	b.n	8005130 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	3318      	adds	r3, #24
 8005136:	4618      	mov	r0, r3
 8005138:	f7fe fd06 	bl	8003b48 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800513c:	4b1d      	ldr	r3, [pc, #116]	; (80051b4 <xTaskRemoveFromEventList+0xac>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d11d      	bne.n	8005180 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	3304      	adds	r3, #4
 8005148:	4618      	mov	r0, r3
 800514a:	f7fe fcfd 	bl	8003b48 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005152:	4b19      	ldr	r3, [pc, #100]	; (80051b8 <xTaskRemoveFromEventList+0xb0>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	429a      	cmp	r2, r3
 8005158:	d903      	bls.n	8005162 <xTaskRemoveFromEventList+0x5a>
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515e:	4a16      	ldr	r2, [pc, #88]	; (80051b8 <xTaskRemoveFromEventList+0xb0>)
 8005160:	6013      	str	r3, [r2, #0]
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005166:	4613      	mov	r3, r2
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	4413      	add	r3, r2
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	4a13      	ldr	r2, [pc, #76]	; (80051bc <xTaskRemoveFromEventList+0xb4>)
 8005170:	441a      	add	r2, r3
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	3304      	adds	r3, #4
 8005176:	4619      	mov	r1, r3
 8005178:	4610      	mov	r0, r2
 800517a:	f7fe fc8a 	bl	8003a92 <vListInsertEnd>
 800517e:	e005      	b.n	800518c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	3318      	adds	r3, #24
 8005184:	4619      	mov	r1, r3
 8005186:	480e      	ldr	r0, [pc, #56]	; (80051c0 <xTaskRemoveFromEventList+0xb8>)
 8005188:	f7fe fc83 	bl	8003a92 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005190:	4b0c      	ldr	r3, [pc, #48]	; (80051c4 <xTaskRemoveFromEventList+0xbc>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005196:	429a      	cmp	r2, r3
 8005198:	d905      	bls.n	80051a6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800519a:	2301      	movs	r3, #1
 800519c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800519e:	4b0a      	ldr	r3, [pc, #40]	; (80051c8 <xTaskRemoveFromEventList+0xc0>)
 80051a0:	2201      	movs	r2, #1
 80051a2:	601a      	str	r2, [r3, #0]
 80051a4:	e001      	b.n	80051aa <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80051a6:	2300      	movs	r3, #0
 80051a8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80051aa:	697b      	ldr	r3, [r7, #20]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3718      	adds	r7, #24
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	20000c1c 	.word	0x20000c1c
 80051b8:	20000bfc 	.word	0x20000bfc
 80051bc:	20000724 	.word	0x20000724
 80051c0:	20000bb4 	.word	0x20000bb4
 80051c4:	20000720 	.word	0x20000720
 80051c8:	20000c08 	.word	0x20000c08

080051cc <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b086      	sub	sp, #24
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80051d6:	4b28      	ldr	r3, [pc, #160]	; (8005278 <vTaskRemoveFromUnorderedEventList+0xac>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d109      	bne.n	80051f2 <vTaskRemoveFromUnorderedEventList+0x26>
 80051de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e2:	f383 8811 	msr	BASEPRI, r3
 80051e6:	f3bf 8f6f 	isb	sy
 80051ea:	f3bf 8f4f 	dsb	sy
 80051ee:	613b      	str	r3, [r7, #16]
 80051f0:	e7fe      	b.n	80051f0 <vTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d109      	bne.n	800521c <vTaskRemoveFromUnorderedEventList+0x50>
 8005208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800520c:	f383 8811 	msr	BASEPRI, r3
 8005210:	f3bf 8f6f 	isb	sy
 8005214:	f3bf 8f4f 	dsb	sy
 8005218:	60fb      	str	r3, [r7, #12]
 800521a:	e7fe      	b.n	800521a <vTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f7fe fc93 	bl	8003b48 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	3304      	adds	r3, #4
 8005226:	4618      	mov	r0, r3
 8005228:	f7fe fc8e 	bl	8003b48 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005230:	4b12      	ldr	r3, [pc, #72]	; (800527c <vTaskRemoveFromUnorderedEventList+0xb0>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	429a      	cmp	r2, r3
 8005236:	d903      	bls.n	8005240 <vTaskRemoveFromUnorderedEventList+0x74>
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523c:	4a0f      	ldr	r2, [pc, #60]	; (800527c <vTaskRemoveFromUnorderedEventList+0xb0>)
 800523e:	6013      	str	r3, [r2, #0]
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005244:	4613      	mov	r3, r2
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	4413      	add	r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	4a0c      	ldr	r2, [pc, #48]	; (8005280 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800524e:	441a      	add	r2, r3
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	3304      	adds	r3, #4
 8005254:	4619      	mov	r1, r3
 8005256:	4610      	mov	r0, r2
 8005258:	f7fe fc1b 	bl	8003a92 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005260:	4b08      	ldr	r3, [pc, #32]	; (8005284 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005266:	429a      	cmp	r2, r3
 8005268:	d902      	bls.n	8005270 <vTaskRemoveFromUnorderedEventList+0xa4>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800526a:	4b07      	ldr	r3, [pc, #28]	; (8005288 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800526c:	2201      	movs	r2, #1
 800526e:	601a      	str	r2, [r3, #0]
	}
}
 8005270:	bf00      	nop
 8005272:	3718      	adds	r7, #24
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	20000c1c 	.word	0x20000c1c
 800527c:	20000bfc 	.word	0x20000bfc
 8005280:	20000724 	.word	0x20000724
 8005284:	20000720 	.word	0x20000720
 8005288:	20000c08 	.word	0x20000c08

0800528c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005294:	4b06      	ldr	r3, [pc, #24]	; (80052b0 <vTaskInternalSetTimeOutState+0x24>)
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800529c:	4b05      	ldr	r3, [pc, #20]	; (80052b4 <vTaskInternalSetTimeOutState+0x28>)
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	605a      	str	r2, [r3, #4]
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bc80      	pop	{r7}
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	20000c0c 	.word	0x20000c0c
 80052b4:	20000bf8 	.word	0x20000bf8

080052b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b088      	sub	sp, #32
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d109      	bne.n	80052dc <xTaskCheckForTimeOut+0x24>
 80052c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052cc:	f383 8811 	msr	BASEPRI, r3
 80052d0:	f3bf 8f6f 	isb	sy
 80052d4:	f3bf 8f4f 	dsb	sy
 80052d8:	613b      	str	r3, [r7, #16]
 80052da:	e7fe      	b.n	80052da <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d109      	bne.n	80052f6 <xTaskCheckForTimeOut+0x3e>
 80052e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e6:	f383 8811 	msr	BASEPRI, r3
 80052ea:	f3bf 8f6f 	isb	sy
 80052ee:	f3bf 8f4f 	dsb	sy
 80052f2:	60fb      	str	r3, [r7, #12]
 80052f4:	e7fe      	b.n	80052f4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80052f6:	f000 ff0f 	bl	8006118 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80052fa:	4b1d      	ldr	r3, [pc, #116]	; (8005370 <xTaskCheckForTimeOut+0xb8>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	69ba      	ldr	r2, [r7, #24]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005312:	d102      	bne.n	800531a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005314:	2300      	movs	r3, #0
 8005316:	61fb      	str	r3, [r7, #28]
 8005318:	e023      	b.n	8005362 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	4b15      	ldr	r3, [pc, #84]	; (8005374 <xTaskCheckForTimeOut+0xbc>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	429a      	cmp	r2, r3
 8005324:	d007      	beq.n	8005336 <xTaskCheckForTimeOut+0x7e>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	69ba      	ldr	r2, [r7, #24]
 800532c:	429a      	cmp	r2, r3
 800532e:	d302      	bcc.n	8005336 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005330:	2301      	movs	r3, #1
 8005332:	61fb      	str	r3, [r7, #28]
 8005334:	e015      	b.n	8005362 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	429a      	cmp	r2, r3
 800533e:	d20b      	bcs.n	8005358 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	1ad2      	subs	r2, r2, r3
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f7ff ff9d 	bl	800528c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005352:	2300      	movs	r3, #0
 8005354:	61fb      	str	r3, [r7, #28]
 8005356:	e004      	b.n	8005362 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	2200      	movs	r2, #0
 800535c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800535e:	2301      	movs	r3, #1
 8005360:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005362:	f000 ff07 	bl	8006174 <vPortExitCritical>

	return xReturn;
 8005366:	69fb      	ldr	r3, [r7, #28]
}
 8005368:	4618      	mov	r0, r3
 800536a:	3720      	adds	r7, #32
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	20000bf8 	.word	0x20000bf8
 8005374:	20000c0c 	.word	0x20000c0c

08005378 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005378:	b480      	push	{r7}
 800537a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800537c:	4b03      	ldr	r3, [pc, #12]	; (800538c <vTaskMissedYield+0x14>)
 800537e:	2201      	movs	r2, #1
 8005380:	601a      	str	r2, [r3, #0]
}
 8005382:	bf00      	nop
 8005384:	46bd      	mov	sp, r7
 8005386:	bc80      	pop	{r7}
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	20000c08 	.word	0x20000c08

08005390 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005398:	f000 f852 	bl	8005440 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800539c:	4b06      	ldr	r3, [pc, #24]	; (80053b8 <prvIdleTask+0x28>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d9f9      	bls.n	8005398 <prvIdleTask+0x8>
			{
				taskYIELD();
 80053a4:	4b05      	ldr	r3, [pc, #20]	; (80053bc <prvIdleTask+0x2c>)
 80053a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053aa:	601a      	str	r2, [r3, #0]
 80053ac:	f3bf 8f4f 	dsb	sy
 80053b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80053b4:	e7f0      	b.n	8005398 <prvIdleTask+0x8>
 80053b6:	bf00      	nop
 80053b8:	20000724 	.word	0x20000724
 80053bc:	e000ed04 	.word	0xe000ed04

080053c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80053c6:	2300      	movs	r3, #0
 80053c8:	607b      	str	r3, [r7, #4]
 80053ca:	e00c      	b.n	80053e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	4613      	mov	r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4413      	add	r3, r2
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	4a12      	ldr	r2, [pc, #72]	; (8005420 <prvInitialiseTaskLists+0x60>)
 80053d8:	4413      	add	r3, r2
 80053da:	4618      	mov	r0, r3
 80053dc:	f7fe fb2e 	bl	8003a3c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	3301      	adds	r3, #1
 80053e4:	607b      	str	r3, [r7, #4]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2b37      	cmp	r3, #55	; 0x37
 80053ea:	d9ef      	bls.n	80053cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80053ec:	480d      	ldr	r0, [pc, #52]	; (8005424 <prvInitialiseTaskLists+0x64>)
 80053ee:	f7fe fb25 	bl	8003a3c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80053f2:	480d      	ldr	r0, [pc, #52]	; (8005428 <prvInitialiseTaskLists+0x68>)
 80053f4:	f7fe fb22 	bl	8003a3c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80053f8:	480c      	ldr	r0, [pc, #48]	; (800542c <prvInitialiseTaskLists+0x6c>)
 80053fa:	f7fe fb1f 	bl	8003a3c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80053fe:	480c      	ldr	r0, [pc, #48]	; (8005430 <prvInitialiseTaskLists+0x70>)
 8005400:	f7fe fb1c 	bl	8003a3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005404:	480b      	ldr	r0, [pc, #44]	; (8005434 <prvInitialiseTaskLists+0x74>)
 8005406:	f7fe fb19 	bl	8003a3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800540a:	4b0b      	ldr	r3, [pc, #44]	; (8005438 <prvInitialiseTaskLists+0x78>)
 800540c:	4a05      	ldr	r2, [pc, #20]	; (8005424 <prvInitialiseTaskLists+0x64>)
 800540e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005410:	4b0a      	ldr	r3, [pc, #40]	; (800543c <prvInitialiseTaskLists+0x7c>)
 8005412:	4a05      	ldr	r2, [pc, #20]	; (8005428 <prvInitialiseTaskLists+0x68>)
 8005414:	601a      	str	r2, [r3, #0]
}
 8005416:	bf00      	nop
 8005418:	3708      	adds	r7, #8
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	20000724 	.word	0x20000724
 8005424:	20000b84 	.word	0x20000b84
 8005428:	20000b98 	.word	0x20000b98
 800542c:	20000bb4 	.word	0x20000bb4
 8005430:	20000bc8 	.word	0x20000bc8
 8005434:	20000be0 	.word	0x20000be0
 8005438:	20000bac 	.word	0x20000bac
 800543c:	20000bb0 	.word	0x20000bb0

08005440 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005446:	e019      	b.n	800547c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005448:	f000 fe66 	bl	8006118 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800544c:	4b0f      	ldr	r3, [pc, #60]	; (800548c <prvCheckTasksWaitingTermination+0x4c>)
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	3304      	adds	r3, #4
 8005458:	4618      	mov	r0, r3
 800545a:	f7fe fb75 	bl	8003b48 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800545e:	4b0c      	ldr	r3, [pc, #48]	; (8005490 <prvCheckTasksWaitingTermination+0x50>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	3b01      	subs	r3, #1
 8005464:	4a0a      	ldr	r2, [pc, #40]	; (8005490 <prvCheckTasksWaitingTermination+0x50>)
 8005466:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005468:	4b0a      	ldr	r3, [pc, #40]	; (8005494 <prvCheckTasksWaitingTermination+0x54>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	3b01      	subs	r3, #1
 800546e:	4a09      	ldr	r2, [pc, #36]	; (8005494 <prvCheckTasksWaitingTermination+0x54>)
 8005470:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005472:	f000 fe7f 	bl	8006174 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 f80e 	bl	8005498 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800547c:	4b05      	ldr	r3, [pc, #20]	; (8005494 <prvCheckTasksWaitingTermination+0x54>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d1e1      	bne.n	8005448 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005484:	bf00      	nop
 8005486:	3708      	adds	r7, #8
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	20000bc8 	.word	0x20000bc8
 8005490:	20000bf4 	.word	0x20000bf4
 8005494:	20000bdc 	.word	0x20000bdc

08005498 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d108      	bne.n	80054bc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ae:	4618      	mov	r0, r3
 80054b0:	f000 ffea 	bl	8006488 <vPortFree>
				vPortFree( pxTCB );
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 ffe7 	bl	8006488 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80054ba:	e017      	b.n	80054ec <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d103      	bne.n	80054ce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 ffde 	bl	8006488 <vPortFree>
	}
 80054cc:	e00e      	b.n	80054ec <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d009      	beq.n	80054ec <prvDeleteTCB+0x54>
 80054d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054dc:	f383 8811 	msr	BASEPRI, r3
 80054e0:	f3bf 8f6f 	isb	sy
 80054e4:	f3bf 8f4f 	dsb	sy
 80054e8:	60fb      	str	r3, [r7, #12]
 80054ea:	e7fe      	b.n	80054ea <prvDeleteTCB+0x52>
	}
 80054ec:	bf00      	nop
 80054ee:	3710      	adds	r7, #16
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054fa:	4b0e      	ldr	r3, [pc, #56]	; (8005534 <prvResetNextTaskUnblockTime+0x40>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d101      	bne.n	8005508 <prvResetNextTaskUnblockTime+0x14>
 8005504:	2301      	movs	r3, #1
 8005506:	e000      	b.n	800550a <prvResetNextTaskUnblockTime+0x16>
 8005508:	2300      	movs	r3, #0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d004      	beq.n	8005518 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800550e:	4b0a      	ldr	r3, [pc, #40]	; (8005538 <prvResetNextTaskUnblockTime+0x44>)
 8005510:	f04f 32ff 	mov.w	r2, #4294967295
 8005514:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005516:	e008      	b.n	800552a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005518:	4b06      	ldr	r3, [pc, #24]	; (8005534 <prvResetNextTaskUnblockTime+0x40>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	4a04      	ldr	r2, [pc, #16]	; (8005538 <prvResetNextTaskUnblockTime+0x44>)
 8005528:	6013      	str	r3, [r2, #0]
}
 800552a:	bf00      	nop
 800552c:	370c      	adds	r7, #12
 800552e:	46bd      	mov	sp, r7
 8005530:	bc80      	pop	{r7}
 8005532:	4770      	bx	lr
 8005534:	20000bac 	.word	0x20000bac
 8005538:	20000c14 	.word	0x20000c14

0800553c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005542:	4b0b      	ldr	r3, [pc, #44]	; (8005570 <xTaskGetSchedulerState+0x34>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d102      	bne.n	8005550 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800554a:	2301      	movs	r3, #1
 800554c:	607b      	str	r3, [r7, #4]
 800554e:	e008      	b.n	8005562 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005550:	4b08      	ldr	r3, [pc, #32]	; (8005574 <xTaskGetSchedulerState+0x38>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d102      	bne.n	800555e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005558:	2302      	movs	r3, #2
 800555a:	607b      	str	r3, [r7, #4]
 800555c:	e001      	b.n	8005562 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800555e:	2300      	movs	r3, #0
 8005560:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005562:	687b      	ldr	r3, [r7, #4]
	}
 8005564:	4618      	mov	r0, r3
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	bc80      	pop	{r7}
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	20000c00 	.word	0x20000c00
 8005574:	20000c1c 	.word	0x20000c1c

08005578 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005584:	2300      	movs	r3, #0
 8005586:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d056      	beq.n	800563c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005592:	4b2d      	ldr	r3, [pc, #180]	; (8005648 <xTaskPriorityInherit+0xd0>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005598:	429a      	cmp	r2, r3
 800559a:	d246      	bcs.n	800562a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	db06      	blt.n	80055b2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055a4:	4b28      	ldr	r3, [pc, #160]	; (8005648 <xTaskPriorityInherit+0xd0>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	6959      	ldr	r1, [r3, #20]
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ba:	4613      	mov	r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	4413      	add	r3, r2
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	4a22      	ldr	r2, [pc, #136]	; (800564c <xTaskPriorityInherit+0xd4>)
 80055c4:	4413      	add	r3, r2
 80055c6:	4299      	cmp	r1, r3
 80055c8:	d101      	bne.n	80055ce <xTaskPriorityInherit+0x56>
 80055ca:	2301      	movs	r3, #1
 80055cc:	e000      	b.n	80055d0 <xTaskPriorityInherit+0x58>
 80055ce:	2300      	movs	r3, #0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d022      	beq.n	800561a <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	3304      	adds	r3, #4
 80055d8:	4618      	mov	r0, r3
 80055da:	f7fe fab5 	bl	8003b48 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80055de:	4b1a      	ldr	r3, [pc, #104]	; (8005648 <xTaskPriorityInherit+0xd0>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ec:	4b18      	ldr	r3, [pc, #96]	; (8005650 <xTaskPriorityInherit+0xd8>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d903      	bls.n	80055fc <xTaskPriorityInherit+0x84>
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f8:	4a15      	ldr	r2, [pc, #84]	; (8005650 <xTaskPriorityInherit+0xd8>)
 80055fa:	6013      	str	r3, [r2, #0]
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005600:	4613      	mov	r3, r2
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	4413      	add	r3, r2
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	4a10      	ldr	r2, [pc, #64]	; (800564c <xTaskPriorityInherit+0xd4>)
 800560a:	441a      	add	r2, r3
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	3304      	adds	r3, #4
 8005610:	4619      	mov	r1, r3
 8005612:	4610      	mov	r0, r2
 8005614:	f7fe fa3d 	bl	8003a92 <vListInsertEnd>
 8005618:	e004      	b.n	8005624 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800561a:	4b0b      	ldr	r3, [pc, #44]	; (8005648 <xTaskPriorityInherit+0xd0>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005624:	2301      	movs	r3, #1
 8005626:	60fb      	str	r3, [r7, #12]
 8005628:	e008      	b.n	800563c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800562e:	4b06      	ldr	r3, [pc, #24]	; (8005648 <xTaskPriorityInherit+0xd0>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005634:	429a      	cmp	r2, r3
 8005636:	d201      	bcs.n	800563c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005638:	2301      	movs	r3, #1
 800563a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800563c:	68fb      	ldr	r3, [r7, #12]
	}
 800563e:	4618      	mov	r0, r3
 8005640:	3710      	adds	r7, #16
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	20000720 	.word	0x20000720
 800564c:	20000724 	.word	0x20000724
 8005650:	20000bfc 	.word	0x20000bfc

08005654 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005654:	b580      	push	{r7, lr}
 8005656:	b086      	sub	sp, #24
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005660:	2300      	movs	r3, #0
 8005662:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d054      	beq.n	8005714 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800566a:	4b2d      	ldr	r3, [pc, #180]	; (8005720 <xTaskPriorityDisinherit+0xcc>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	693a      	ldr	r2, [r7, #16]
 8005670:	429a      	cmp	r2, r3
 8005672:	d009      	beq.n	8005688 <xTaskPriorityDisinherit+0x34>
 8005674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005678:	f383 8811 	msr	BASEPRI, r3
 800567c:	f3bf 8f6f 	isb	sy
 8005680:	f3bf 8f4f 	dsb	sy
 8005684:	60fb      	str	r3, [r7, #12]
 8005686:	e7fe      	b.n	8005686 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800568c:	2b00      	cmp	r3, #0
 800568e:	d109      	bne.n	80056a4 <xTaskPriorityDisinherit+0x50>
 8005690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005694:	f383 8811 	msr	BASEPRI, r3
 8005698:	f3bf 8f6f 	isb	sy
 800569c:	f3bf 8f4f 	dsb	sy
 80056a0:	60bb      	str	r3, [r7, #8]
 80056a2:	e7fe      	b.n	80056a2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056a8:	1e5a      	subs	r2, r3, #1
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d02c      	beq.n	8005714 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d128      	bne.n	8005714 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	3304      	adds	r3, #4
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7fe fa3e 	bl	8003b48 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056e4:	4b0f      	ldr	r3, [pc, #60]	; (8005724 <xTaskPriorityDisinherit+0xd0>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d903      	bls.n	80056f4 <xTaskPriorityDisinherit+0xa0>
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f0:	4a0c      	ldr	r2, [pc, #48]	; (8005724 <xTaskPriorityDisinherit+0xd0>)
 80056f2:	6013      	str	r3, [r2, #0]
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056f8:	4613      	mov	r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4413      	add	r3, r2
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	4a09      	ldr	r2, [pc, #36]	; (8005728 <xTaskPriorityDisinherit+0xd4>)
 8005702:	441a      	add	r2, r3
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	3304      	adds	r3, #4
 8005708:	4619      	mov	r1, r3
 800570a:	4610      	mov	r0, r2
 800570c:	f7fe f9c1 	bl	8003a92 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005710:	2301      	movs	r3, #1
 8005712:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005714:	697b      	ldr	r3, [r7, #20]
	}
 8005716:	4618      	mov	r0, r3
 8005718:	3718      	adds	r7, #24
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	20000720 	.word	0x20000720
 8005724:	20000bfc 	.word	0x20000bfc
 8005728:	20000724 	.word	0x20000724

0800572c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800572c:	b580      	push	{r7, lr}
 800572e:	b088      	sub	sp, #32
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800573a:	2301      	movs	r3, #1
 800573c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d06d      	beq.n	8005820 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005748:	2b00      	cmp	r3, #0
 800574a:	d109      	bne.n	8005760 <vTaskPriorityDisinheritAfterTimeout+0x34>
 800574c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005750:	f383 8811 	msr	BASEPRI, r3
 8005754:	f3bf 8f6f 	isb	sy
 8005758:	f3bf 8f4f 	dsb	sy
 800575c:	60fb      	str	r3, [r7, #12]
 800575e:	e7fe      	b.n	800575e <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005764:	683a      	ldr	r2, [r7, #0]
 8005766:	429a      	cmp	r2, r3
 8005768:	d902      	bls.n	8005770 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	61fb      	str	r3, [r7, #28]
 800576e:	e002      	b.n	8005776 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005774:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577a:	69fa      	ldr	r2, [r7, #28]
 800577c:	429a      	cmp	r2, r3
 800577e:	d04f      	beq.n	8005820 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	429a      	cmp	r2, r3
 8005788:	d14a      	bne.n	8005820 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800578a:	4b27      	ldr	r3, [pc, #156]	; (8005828 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	69ba      	ldr	r2, [r7, #24]
 8005790:	429a      	cmp	r2, r3
 8005792:	d109      	bne.n	80057a8 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8005794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005798:	f383 8811 	msr	BASEPRI, r3
 800579c:	f3bf 8f6f 	isb	sy
 80057a0:	f3bf 8f4f 	dsb	sy
 80057a4:	60bb      	str	r3, [r7, #8]
 80057a6:	e7fe      	b.n	80057a6 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ac:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	69fa      	ldr	r2, [r7, #28]
 80057b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	699b      	ldr	r3, [r3, #24]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	db04      	blt.n	80057c6 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	6959      	ldr	r1, [r3, #20]
 80057ca:	693a      	ldr	r2, [r7, #16]
 80057cc:	4613      	mov	r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	4413      	add	r3, r2
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	4a15      	ldr	r2, [pc, #84]	; (800582c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80057d6:	4413      	add	r3, r2
 80057d8:	4299      	cmp	r1, r3
 80057da:	d101      	bne.n	80057e0 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 80057dc:	2301      	movs	r3, #1
 80057de:	e000      	b.n	80057e2 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 80057e0:	2300      	movs	r3, #0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d01c      	beq.n	8005820 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	3304      	adds	r3, #4
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7fe f9ac 	bl	8003b48 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f4:	4b0e      	ldr	r3, [pc, #56]	; (8005830 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d903      	bls.n	8005804 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005800:	4a0b      	ldr	r2, [pc, #44]	; (8005830 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005802:	6013      	str	r3, [r2, #0]
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005808:	4613      	mov	r3, r2
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	4413      	add	r3, r2
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	4a06      	ldr	r2, [pc, #24]	; (800582c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005812:	441a      	add	r2, r3
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	3304      	adds	r3, #4
 8005818:	4619      	mov	r1, r3
 800581a:	4610      	mov	r0, r2
 800581c:	f7fe f939 	bl	8003a92 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005820:	bf00      	nop
 8005822:	3720      	adds	r7, #32
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	20000720 	.word	0x20000720
 800582c:	20000724 	.word	0x20000724
 8005830:	20000bfc 	.word	0x20000bfc

08005834 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800583a:	4b09      	ldr	r3, [pc, #36]	; (8005860 <uxTaskResetEventItemValue+0x2c>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005842:	4b07      	ldr	r3, [pc, #28]	; (8005860 <uxTaskResetEventItemValue+0x2c>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005848:	4b05      	ldr	r3, [pc, #20]	; (8005860 <uxTaskResetEventItemValue+0x2c>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8005850:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8005852:	687b      	ldr	r3, [r7, #4]
}
 8005854:	4618      	mov	r0, r3
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	bc80      	pop	{r7}
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop
 8005860:	20000720 	.word	0x20000720

08005864 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8005864:	b480      	push	{r7}
 8005866:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005868:	4b07      	ldr	r3, [pc, #28]	; (8005888 <pvTaskIncrementMutexHeldCount+0x24>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d004      	beq.n	800587a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005870:	4b05      	ldr	r3, [pc, #20]	; (8005888 <pvTaskIncrementMutexHeldCount+0x24>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005876:	3201      	adds	r2, #1
 8005878:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800587a:	4b03      	ldr	r3, [pc, #12]	; (8005888 <pvTaskIncrementMutexHeldCount+0x24>)
 800587c:	681b      	ldr	r3, [r3, #0]
	}
 800587e:	4618      	mov	r0, r3
 8005880:	46bd      	mov	sp, r7
 8005882:	bc80      	pop	{r7}
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	20000720 	.word	0x20000720

0800588c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005896:	4b21      	ldr	r3, [pc, #132]	; (800591c <prvAddCurrentTaskToDelayedList+0x90>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800589c:	4b20      	ldr	r3, [pc, #128]	; (8005920 <prvAddCurrentTaskToDelayedList+0x94>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	3304      	adds	r3, #4
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7fe f950 	bl	8003b48 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ae:	d10a      	bne.n	80058c6 <prvAddCurrentTaskToDelayedList+0x3a>
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d007      	beq.n	80058c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058b6:	4b1a      	ldr	r3, [pc, #104]	; (8005920 <prvAddCurrentTaskToDelayedList+0x94>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	3304      	adds	r3, #4
 80058bc:	4619      	mov	r1, r3
 80058be:	4819      	ldr	r0, [pc, #100]	; (8005924 <prvAddCurrentTaskToDelayedList+0x98>)
 80058c0:	f7fe f8e7 	bl	8003a92 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80058c4:	e026      	b.n	8005914 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4413      	add	r3, r2
 80058cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80058ce:	4b14      	ldr	r3, [pc, #80]	; (8005920 <prvAddCurrentTaskToDelayedList+0x94>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68ba      	ldr	r2, [r7, #8]
 80058d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80058d6:	68ba      	ldr	r2, [r7, #8]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d209      	bcs.n	80058f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058de:	4b12      	ldr	r3, [pc, #72]	; (8005928 <prvAddCurrentTaskToDelayedList+0x9c>)
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	4b0f      	ldr	r3, [pc, #60]	; (8005920 <prvAddCurrentTaskToDelayedList+0x94>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	3304      	adds	r3, #4
 80058e8:	4619      	mov	r1, r3
 80058ea:	4610      	mov	r0, r2
 80058ec:	f7fe f8f4 	bl	8003ad8 <vListInsert>
}
 80058f0:	e010      	b.n	8005914 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058f2:	4b0e      	ldr	r3, [pc, #56]	; (800592c <prvAddCurrentTaskToDelayedList+0xa0>)
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	4b0a      	ldr	r3, [pc, #40]	; (8005920 <prvAddCurrentTaskToDelayedList+0x94>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	3304      	adds	r3, #4
 80058fc:	4619      	mov	r1, r3
 80058fe:	4610      	mov	r0, r2
 8005900:	f7fe f8ea 	bl	8003ad8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005904:	4b0a      	ldr	r3, [pc, #40]	; (8005930 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68ba      	ldr	r2, [r7, #8]
 800590a:	429a      	cmp	r2, r3
 800590c:	d202      	bcs.n	8005914 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800590e:	4a08      	ldr	r2, [pc, #32]	; (8005930 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	6013      	str	r3, [r2, #0]
}
 8005914:	bf00      	nop
 8005916:	3710      	adds	r7, #16
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}
 800591c:	20000bf8 	.word	0x20000bf8
 8005920:	20000720 	.word	0x20000720
 8005924:	20000be0 	.word	0x20000be0
 8005928:	20000bb0 	.word	0x20000bb0
 800592c:	20000bac 	.word	0x20000bac
 8005930:	20000c14 	.word	0x20000c14

08005934 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b08a      	sub	sp, #40	; 0x28
 8005938:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800593a:	2300      	movs	r3, #0
 800593c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800593e:	f000 fac3 	bl	8005ec8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005942:	4b1c      	ldr	r3, [pc, #112]	; (80059b4 <xTimerCreateTimerTask+0x80>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d021      	beq.n	800598e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800594a:	2300      	movs	r3, #0
 800594c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800594e:	2300      	movs	r3, #0
 8005950:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005952:	1d3a      	adds	r2, r7, #4
 8005954:	f107 0108 	add.w	r1, r7, #8
 8005958:	f107 030c 	add.w	r3, r7, #12
 800595c:	4618      	mov	r0, r3
 800595e:	f7fd fe8f 	bl	8003680 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005962:	6879      	ldr	r1, [r7, #4]
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	9202      	str	r2, [sp, #8]
 800596a:	9301      	str	r3, [sp, #4]
 800596c:	2302      	movs	r3, #2
 800596e:	9300      	str	r3, [sp, #0]
 8005970:	2300      	movs	r3, #0
 8005972:	460a      	mov	r2, r1
 8005974:	4910      	ldr	r1, [pc, #64]	; (80059b8 <xTimerCreateTimerTask+0x84>)
 8005976:	4811      	ldr	r0, [pc, #68]	; (80059bc <xTimerCreateTimerTask+0x88>)
 8005978:	f7fe ff40 	bl	80047fc <xTaskCreateStatic>
 800597c:	4602      	mov	r2, r0
 800597e:	4b10      	ldr	r3, [pc, #64]	; (80059c0 <xTimerCreateTimerTask+0x8c>)
 8005980:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005982:	4b0f      	ldr	r3, [pc, #60]	; (80059c0 <xTimerCreateTimerTask+0x8c>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d001      	beq.n	800598e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800598a:	2301      	movs	r3, #1
 800598c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d109      	bne.n	80059a8 <xTimerCreateTimerTask+0x74>
 8005994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005998:	f383 8811 	msr	BASEPRI, r3
 800599c:	f3bf 8f6f 	isb	sy
 80059a0:	f3bf 8f4f 	dsb	sy
 80059a4:	613b      	str	r3, [r7, #16]
 80059a6:	e7fe      	b.n	80059a6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80059a8:	697b      	ldr	r3, [r7, #20]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3718      	adds	r7, #24
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	20000c50 	.word	0x20000c50
 80059b8:	080069e4 	.word	0x080069e4
 80059bc:	08005add 	.word	0x08005add
 80059c0:	20000c54 	.word	0x20000c54

080059c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b08a      	sub	sp, #40	; 0x28
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	607a      	str	r2, [r7, #4]
 80059d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80059d2:	2300      	movs	r3, #0
 80059d4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d109      	bne.n	80059f0 <xTimerGenericCommand+0x2c>
 80059dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e0:	f383 8811 	msr	BASEPRI, r3
 80059e4:	f3bf 8f6f 	isb	sy
 80059e8:	f3bf 8f4f 	dsb	sy
 80059ec:	623b      	str	r3, [r7, #32]
 80059ee:	e7fe      	b.n	80059ee <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80059f0:	4b19      	ldr	r3, [pc, #100]	; (8005a58 <xTimerGenericCommand+0x94>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d02a      	beq.n	8005a4e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	2b05      	cmp	r3, #5
 8005a08:	dc18      	bgt.n	8005a3c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005a0a:	f7ff fd97 	bl	800553c <xTaskGetSchedulerState>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d109      	bne.n	8005a28 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005a14:	4b10      	ldr	r3, [pc, #64]	; (8005a58 <xTimerGenericCommand+0x94>)
 8005a16:	6818      	ldr	r0, [r3, #0]
 8005a18:	f107 0110 	add.w	r1, r7, #16
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a20:	f7fe f9f6 	bl	8003e10 <xQueueGenericSend>
 8005a24:	6278      	str	r0, [r7, #36]	; 0x24
 8005a26:	e012      	b.n	8005a4e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005a28:	4b0b      	ldr	r3, [pc, #44]	; (8005a58 <xTimerGenericCommand+0x94>)
 8005a2a:	6818      	ldr	r0, [r3, #0]
 8005a2c:	f107 0110 	add.w	r1, r7, #16
 8005a30:	2300      	movs	r3, #0
 8005a32:	2200      	movs	r2, #0
 8005a34:	f7fe f9ec 	bl	8003e10 <xQueueGenericSend>
 8005a38:	6278      	str	r0, [r7, #36]	; 0x24
 8005a3a:	e008      	b.n	8005a4e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005a3c:	4b06      	ldr	r3, [pc, #24]	; (8005a58 <xTimerGenericCommand+0x94>)
 8005a3e:	6818      	ldr	r0, [r3, #0]
 8005a40:	f107 0110 	add.w	r1, r7, #16
 8005a44:	2300      	movs	r3, #0
 8005a46:	683a      	ldr	r2, [r7, #0]
 8005a48:	f7fe fadc 	bl	8004004 <xQueueGenericSendFromISR>
 8005a4c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3728      	adds	r7, #40	; 0x28
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	20000c50 	.word	0x20000c50

08005a5c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b088      	sub	sp, #32
 8005a60:	af02      	add	r7, sp, #8
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a66:	4b1c      	ldr	r3, [pc, #112]	; (8005ad8 <prvProcessExpiredTimer+0x7c>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	3304      	adds	r3, #4
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7fe f867 	bl	8003b48 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	69db      	ldr	r3, [r3, #28]
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d121      	bne.n	8005ac6 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	699a      	ldr	r2, [r3, #24]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	18d1      	adds	r1, r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	683a      	ldr	r2, [r7, #0]
 8005a8e:	6978      	ldr	r0, [r7, #20]
 8005a90:	f000 f8c8 	bl	8005c24 <prvInsertTimerInActiveList>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d015      	beq.n	8005ac6 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	9300      	str	r3, [sp, #0]
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	2100      	movs	r1, #0
 8005aa4:	6978      	ldr	r0, [r7, #20]
 8005aa6:	f7ff ff8d 	bl	80059c4 <xTimerGenericCommand>
 8005aaa:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d109      	bne.n	8005ac6 <prvProcessExpiredTimer+0x6a>
 8005ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab6:	f383 8811 	msr	BASEPRI, r3
 8005aba:	f3bf 8f6f 	isb	sy
 8005abe:	f3bf 8f4f 	dsb	sy
 8005ac2:	60fb      	str	r3, [r7, #12]
 8005ac4:	e7fe      	b.n	8005ac4 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aca:	6978      	ldr	r0, [r7, #20]
 8005acc:	4798      	blx	r3
}
 8005ace:	bf00      	nop
 8005ad0:	3718      	adds	r7, #24
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	20000c48 	.word	0x20000c48

08005adc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ae4:	f107 0308 	add.w	r3, r7, #8
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f000 f857 	bl	8005b9c <prvGetNextExpireTime>
 8005aee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	4619      	mov	r1, r3
 8005af4:	68f8      	ldr	r0, [r7, #12]
 8005af6:	f000 f803 	bl	8005b00 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005afa:	f000 f8d5 	bl	8005ca8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005afe:	e7f1      	b.n	8005ae4 <prvTimerTask+0x8>

08005b00 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005b0a:	f7ff f8a3 	bl	8004c54 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005b0e:	f107 0308 	add.w	r3, r7, #8
 8005b12:	4618      	mov	r0, r3
 8005b14:	f000 f866 	bl	8005be4 <prvSampleTimeNow>
 8005b18:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d130      	bne.n	8005b82 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d10a      	bne.n	8005b3c <prvProcessTimerOrBlockTask+0x3c>
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d806      	bhi.n	8005b3c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005b2e:	f7ff f89f 	bl	8004c70 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005b32:	68f9      	ldr	r1, [r7, #12]
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f7ff ff91 	bl	8005a5c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005b3a:	e024      	b.n	8005b86 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d008      	beq.n	8005b54 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005b42:	4b13      	ldr	r3, [pc, #76]	; (8005b90 <prvProcessTimerOrBlockTask+0x90>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	bf0c      	ite	eq
 8005b4c:	2301      	moveq	r3, #1
 8005b4e:	2300      	movne	r3, #0
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005b54:	4b0f      	ldr	r3, [pc, #60]	; (8005b94 <prvProcessTimerOrBlockTask+0x94>)
 8005b56:	6818      	ldr	r0, [r3, #0]
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	4619      	mov	r1, r3
 8005b62:	f7fe fe17 	bl	8004794 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005b66:	f7ff f883 	bl	8004c70 <xTaskResumeAll>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10a      	bne.n	8005b86 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005b70:	4b09      	ldr	r3, [pc, #36]	; (8005b98 <prvProcessTimerOrBlockTask+0x98>)
 8005b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b76:	601a      	str	r2, [r3, #0]
 8005b78:	f3bf 8f4f 	dsb	sy
 8005b7c:	f3bf 8f6f 	isb	sy
}
 8005b80:	e001      	b.n	8005b86 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005b82:	f7ff f875 	bl	8004c70 <xTaskResumeAll>
}
 8005b86:	bf00      	nop
 8005b88:	3710      	adds	r7, #16
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	20000c4c 	.word	0x20000c4c
 8005b94:	20000c50 	.word	0x20000c50
 8005b98:	e000ed04 	.word	0xe000ed04

08005b9c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b085      	sub	sp, #20
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005ba4:	4b0e      	ldr	r3, [pc, #56]	; (8005be0 <prvGetNextExpireTime+0x44>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	bf0c      	ite	eq
 8005bae:	2301      	moveq	r3, #1
 8005bb0:	2300      	movne	r3, #0
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d105      	bne.n	8005bce <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005bc2:	4b07      	ldr	r3, [pc, #28]	; (8005be0 <prvGetNextExpireTime+0x44>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	60fb      	str	r3, [r7, #12]
 8005bcc:	e001      	b.n	8005bd2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3714      	adds	r7, #20
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bc80      	pop	{r7}
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	20000c48 	.word	0x20000c48

08005be4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005bec:	f7ff f8dc 	bl	8004da8 <xTaskGetTickCount>
 8005bf0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005bf2:	4b0b      	ldr	r3, [pc, #44]	; (8005c20 <prvSampleTimeNow+0x3c>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d205      	bcs.n	8005c08 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005bfc:	f000 f904 	bl	8005e08 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	601a      	str	r2, [r3, #0]
 8005c06:	e002      	b.n	8005c0e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005c0e:	4a04      	ldr	r2, [pc, #16]	; (8005c20 <prvSampleTimeNow+0x3c>)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005c14:	68fb      	ldr	r3, [r7, #12]
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3710      	adds	r7, #16
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	20000c58 	.word	0x20000c58

08005c24 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b086      	sub	sp, #24
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
 8005c30:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005c32:	2300      	movs	r3, #0
 8005c34:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005c42:	68ba      	ldr	r2, [r7, #8]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d812      	bhi.n	8005c70 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	1ad2      	subs	r2, r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	699b      	ldr	r3, [r3, #24]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d302      	bcc.n	8005c5e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	617b      	str	r3, [r7, #20]
 8005c5c:	e01b      	b.n	8005c96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005c5e:	4b10      	ldr	r3, [pc, #64]	; (8005ca0 <prvInsertTimerInActiveList+0x7c>)
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	3304      	adds	r3, #4
 8005c66:	4619      	mov	r1, r3
 8005c68:	4610      	mov	r0, r2
 8005c6a:	f7fd ff35 	bl	8003ad8 <vListInsert>
 8005c6e:	e012      	b.n	8005c96 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d206      	bcs.n	8005c86 <prvInsertTimerInActiveList+0x62>
 8005c78:	68ba      	ldr	r2, [r7, #8]
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d302      	bcc.n	8005c86 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005c80:	2301      	movs	r3, #1
 8005c82:	617b      	str	r3, [r7, #20]
 8005c84:	e007      	b.n	8005c96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005c86:	4b07      	ldr	r3, [pc, #28]	; (8005ca4 <prvInsertTimerInActiveList+0x80>)
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	3304      	adds	r3, #4
 8005c8e:	4619      	mov	r1, r3
 8005c90:	4610      	mov	r0, r2
 8005c92:	f7fd ff21 	bl	8003ad8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005c96:	697b      	ldr	r3, [r7, #20]
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3718      	adds	r7, #24
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	20000c4c 	.word	0x20000c4c
 8005ca4:	20000c48 	.word	0x20000c48

08005ca8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b08e      	sub	sp, #56	; 0x38
 8005cac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005cae:	e099      	b.n	8005de4 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	da17      	bge.n	8005ce6 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005cb6:	1d3b      	adds	r3, r7, #4
 8005cb8:	3304      	adds	r3, #4
 8005cba:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d109      	bne.n	8005cd6 <prvProcessReceivedCommands+0x2e>
 8005cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc6:	f383 8811 	msr	BASEPRI, r3
 8005cca:	f3bf 8f6f 	isb	sy
 8005cce:	f3bf 8f4f 	dsb	sy
 8005cd2:	61fb      	str	r3, [r7, #28]
 8005cd4:	e7fe      	b.n	8005cd4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cdc:	6850      	ldr	r0, [r2, #4]
 8005cde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ce0:	6892      	ldr	r2, [r2, #8]
 8005ce2:	4611      	mov	r1, r2
 8005ce4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	db7a      	blt.n	8005de2 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf2:	695b      	ldr	r3, [r3, #20]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d004      	beq.n	8005d02 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfa:	3304      	adds	r3, #4
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f7fd ff23 	bl	8003b48 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d02:	463b      	mov	r3, r7
 8005d04:	4618      	mov	r0, r3
 8005d06:	f7ff ff6d 	bl	8005be4 <prvSampleTimeNow>
 8005d0a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2b09      	cmp	r3, #9
 8005d10:	d868      	bhi.n	8005de4 <prvProcessReceivedCommands+0x13c>
 8005d12:	a201      	add	r2, pc, #4	; (adr r2, 8005d18 <prvProcessReceivedCommands+0x70>)
 8005d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d18:	08005d41 	.word	0x08005d41
 8005d1c:	08005d41 	.word	0x08005d41
 8005d20:	08005d41 	.word	0x08005d41
 8005d24:	08005de5 	.word	0x08005de5
 8005d28:	08005d9b 	.word	0x08005d9b
 8005d2c:	08005dd1 	.word	0x08005dd1
 8005d30:	08005d41 	.word	0x08005d41
 8005d34:	08005d41 	.word	0x08005d41
 8005d38:	08005de5 	.word	0x08005de5
 8005d3c:	08005d9b 	.word	0x08005d9b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005d40:	68ba      	ldr	r2, [r7, #8]
 8005d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d44:	699b      	ldr	r3, [r3, #24]
 8005d46:	18d1      	adds	r1, r2, r3
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d4e:	f7ff ff69 	bl	8005c24 <prvInsertTimerInActiveList>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d045      	beq.n	8005de4 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d5e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d62:	69db      	ldr	r3, [r3, #28]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d13d      	bne.n	8005de4 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005d68:	68ba      	ldr	r2, [r7, #8]
 8005d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	441a      	add	r2, r3
 8005d70:	2300      	movs	r3, #0
 8005d72:	9300      	str	r3, [sp, #0]
 8005d74:	2300      	movs	r3, #0
 8005d76:	2100      	movs	r1, #0
 8005d78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d7a:	f7ff fe23 	bl	80059c4 <xTimerGenericCommand>
 8005d7e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005d80:	6a3b      	ldr	r3, [r7, #32]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d12e      	bne.n	8005de4 <prvProcessReceivedCommands+0x13c>
 8005d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d8a:	f383 8811 	msr	BASEPRI, r3
 8005d8e:	f3bf 8f6f 	isb	sy
 8005d92:	f3bf 8f4f 	dsb	sy
 8005d96:	61bb      	str	r3, [r7, #24]
 8005d98:	e7fe      	b.n	8005d98 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da2:	699b      	ldr	r3, [r3, #24]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d109      	bne.n	8005dbc <prvProcessReceivedCommands+0x114>
 8005da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dac:	f383 8811 	msr	BASEPRI, r3
 8005db0:	f3bf 8f6f 	isb	sy
 8005db4:	f3bf 8f4f 	dsb	sy
 8005db8:	617b      	str	r3, [r7, #20]
 8005dba:	e7fe      	b.n	8005dba <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dbe:	699a      	ldr	r2, [r3, #24]
 8005dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc2:	18d1      	adds	r1, r2, r3
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dca:	f7ff ff2b 	bl	8005c24 <prvInsertTimerInActiveList>
					break;
 8005dce:	e009      	b.n	8005de4 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d104      	bne.n	8005de4 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8005dda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ddc:	f000 fb54 	bl	8006488 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005de0:	e000      	b.n	8005de4 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005de2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005de4:	4b07      	ldr	r3, [pc, #28]	; (8005e04 <prvProcessReceivedCommands+0x15c>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	1d39      	adds	r1, r7, #4
 8005dea:	2200      	movs	r2, #0
 8005dec:	4618      	mov	r0, r3
 8005dee:	f7fe f99d 	bl	800412c <xQueueReceive>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f47f af5b 	bne.w	8005cb0 <prvProcessReceivedCommands+0x8>
	}
}
 8005dfa:	bf00      	nop
 8005dfc:	3730      	adds	r7, #48	; 0x30
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	20000c50 	.word	0x20000c50

08005e08 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b088      	sub	sp, #32
 8005e0c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e0e:	e044      	b.n	8005e9a <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e10:	4b2b      	ldr	r3, [pc, #172]	; (8005ec0 <prvSwitchTimerLists+0xb8>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e1a:	4b29      	ldr	r3, [pc, #164]	; (8005ec0 <prvSwitchTimerLists+0xb8>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	3304      	adds	r3, #4
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f7fd fe8d 	bl	8003b48 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	69db      	ldr	r3, [r3, #28]
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d12d      	bne.n	8005e9a <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	699b      	ldr	r3, [r3, #24]
 8005e42:	693a      	ldr	r2, [r7, #16]
 8005e44:	4413      	add	r3, r2
 8005e46:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005e48:	68ba      	ldr	r2, [r7, #8]
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d90e      	bls.n	8005e6e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	68ba      	ldr	r2, [r7, #8]
 8005e54:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005e5c:	4b18      	ldr	r3, [pc, #96]	; (8005ec0 <prvSwitchTimerLists+0xb8>)
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	3304      	adds	r3, #4
 8005e64:	4619      	mov	r1, r3
 8005e66:	4610      	mov	r0, r2
 8005e68:	f7fd fe36 	bl	8003ad8 <vListInsert>
 8005e6c:	e015      	b.n	8005e9a <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e6e:	2300      	movs	r3, #0
 8005e70:	9300      	str	r3, [sp, #0]
 8005e72:	2300      	movs	r3, #0
 8005e74:	693a      	ldr	r2, [r7, #16]
 8005e76:	2100      	movs	r1, #0
 8005e78:	68f8      	ldr	r0, [r7, #12]
 8005e7a:	f7ff fda3 	bl	80059c4 <xTimerGenericCommand>
 8005e7e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d109      	bne.n	8005e9a <prvSwitchTimerLists+0x92>
 8005e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8a:	f383 8811 	msr	BASEPRI, r3
 8005e8e:	f3bf 8f6f 	isb	sy
 8005e92:	f3bf 8f4f 	dsb	sy
 8005e96:	603b      	str	r3, [r7, #0]
 8005e98:	e7fe      	b.n	8005e98 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e9a:	4b09      	ldr	r3, [pc, #36]	; (8005ec0 <prvSwitchTimerLists+0xb8>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d1b5      	bne.n	8005e10 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005ea4:	4b06      	ldr	r3, [pc, #24]	; (8005ec0 <prvSwitchTimerLists+0xb8>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005eaa:	4b06      	ldr	r3, [pc, #24]	; (8005ec4 <prvSwitchTimerLists+0xbc>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a04      	ldr	r2, [pc, #16]	; (8005ec0 <prvSwitchTimerLists+0xb8>)
 8005eb0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005eb2:	4a04      	ldr	r2, [pc, #16]	; (8005ec4 <prvSwitchTimerLists+0xbc>)
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	6013      	str	r3, [r2, #0]
}
 8005eb8:	bf00      	nop
 8005eba:	3718      	adds	r7, #24
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	20000c48 	.word	0x20000c48
 8005ec4:	20000c4c 	.word	0x20000c4c

08005ec8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005ece:	f000 f923 	bl	8006118 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005ed2:	4b15      	ldr	r3, [pc, #84]	; (8005f28 <prvCheckForValidListAndQueue+0x60>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d120      	bne.n	8005f1c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005eda:	4814      	ldr	r0, [pc, #80]	; (8005f2c <prvCheckForValidListAndQueue+0x64>)
 8005edc:	f7fd fdae 	bl	8003a3c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005ee0:	4813      	ldr	r0, [pc, #76]	; (8005f30 <prvCheckForValidListAndQueue+0x68>)
 8005ee2:	f7fd fdab 	bl	8003a3c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005ee6:	4b13      	ldr	r3, [pc, #76]	; (8005f34 <prvCheckForValidListAndQueue+0x6c>)
 8005ee8:	4a10      	ldr	r2, [pc, #64]	; (8005f2c <prvCheckForValidListAndQueue+0x64>)
 8005eea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005eec:	4b12      	ldr	r3, [pc, #72]	; (8005f38 <prvCheckForValidListAndQueue+0x70>)
 8005eee:	4a10      	ldr	r2, [pc, #64]	; (8005f30 <prvCheckForValidListAndQueue+0x68>)
 8005ef0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	9300      	str	r3, [sp, #0]
 8005ef6:	4b11      	ldr	r3, [pc, #68]	; (8005f3c <prvCheckForValidListAndQueue+0x74>)
 8005ef8:	4a11      	ldr	r2, [pc, #68]	; (8005f40 <prvCheckForValidListAndQueue+0x78>)
 8005efa:	2110      	movs	r1, #16
 8005efc:	200a      	movs	r0, #10
 8005efe:	f7fd feb5 	bl	8003c6c <xQueueGenericCreateStatic>
 8005f02:	4602      	mov	r2, r0
 8005f04:	4b08      	ldr	r3, [pc, #32]	; (8005f28 <prvCheckForValidListAndQueue+0x60>)
 8005f06:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005f08:	4b07      	ldr	r3, [pc, #28]	; (8005f28 <prvCheckForValidListAndQueue+0x60>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d005      	beq.n	8005f1c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005f10:	4b05      	ldr	r3, [pc, #20]	; (8005f28 <prvCheckForValidListAndQueue+0x60>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	490b      	ldr	r1, [pc, #44]	; (8005f44 <prvCheckForValidListAndQueue+0x7c>)
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7fe fc14 	bl	8004744 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f1c:	f000 f92a 	bl	8006174 <vPortExitCritical>
}
 8005f20:	bf00      	nop
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	20000c50 	.word	0x20000c50
 8005f2c:	20000c20 	.word	0x20000c20
 8005f30:	20000c34 	.word	0x20000c34
 8005f34:	20000c48 	.word	0x20000c48
 8005f38:	20000c4c 	.word	0x20000c4c
 8005f3c:	20000cfc 	.word	0x20000cfc
 8005f40:	20000c5c 	.word	0x20000c5c
 8005f44:	080069ec 	.word	0x080069ec

08005f48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	3b04      	subs	r3, #4
 8005f58:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005f60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	3b04      	subs	r3, #4
 8005f66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	f023 0201 	bic.w	r2, r3, #1
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	3b04      	subs	r3, #4
 8005f76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005f78:	4a08      	ldr	r2, [pc, #32]	; (8005f9c <pxPortInitialiseStack+0x54>)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	3b14      	subs	r3, #20
 8005f82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	3b20      	subs	r3, #32
 8005f8e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005f90:	68fb      	ldr	r3, [r7, #12]
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3714      	adds	r7, #20
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bc80      	pop	{r7}
 8005f9a:	4770      	bx	lr
 8005f9c:	08005fa1 	.word	0x08005fa1

08005fa0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005faa:	4b10      	ldr	r3, [pc, #64]	; (8005fec <prvTaskExitError+0x4c>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb2:	d009      	beq.n	8005fc8 <prvTaskExitError+0x28>
 8005fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb8:	f383 8811 	msr	BASEPRI, r3
 8005fbc:	f3bf 8f6f 	isb	sy
 8005fc0:	f3bf 8f4f 	dsb	sy
 8005fc4:	60fb      	str	r3, [r7, #12]
 8005fc6:	e7fe      	b.n	8005fc6 <prvTaskExitError+0x26>
 8005fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fcc:	f383 8811 	msr	BASEPRI, r3
 8005fd0:	f3bf 8f6f 	isb	sy
 8005fd4:	f3bf 8f4f 	dsb	sy
 8005fd8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005fda:	bf00      	nop
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d0fc      	beq.n	8005fdc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005fe2:	bf00      	nop
 8005fe4:	3714      	adds	r7, #20
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bc80      	pop	{r7}
 8005fea:	4770      	bx	lr
 8005fec:	2000000c 	.word	0x2000000c

08005ff0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005ff0:	4b07      	ldr	r3, [pc, #28]	; (8006010 <pxCurrentTCBConst2>)
 8005ff2:	6819      	ldr	r1, [r3, #0]
 8005ff4:	6808      	ldr	r0, [r1, #0]
 8005ff6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005ffa:	f380 8809 	msr	PSP, r0
 8005ffe:	f3bf 8f6f 	isb	sy
 8006002:	f04f 0000 	mov.w	r0, #0
 8006006:	f380 8811 	msr	BASEPRI, r0
 800600a:	f04e 0e0d 	orr.w	lr, lr, #13
 800600e:	4770      	bx	lr

08006010 <pxCurrentTCBConst2>:
 8006010:	20000720 	.word	0x20000720
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006014:	bf00      	nop
 8006016:	bf00      	nop

08006018 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006018:	4806      	ldr	r0, [pc, #24]	; (8006034 <prvPortStartFirstTask+0x1c>)
 800601a:	6800      	ldr	r0, [r0, #0]
 800601c:	6800      	ldr	r0, [r0, #0]
 800601e:	f380 8808 	msr	MSP, r0
 8006022:	b662      	cpsie	i
 8006024:	b661      	cpsie	f
 8006026:	f3bf 8f4f 	dsb	sy
 800602a:	f3bf 8f6f 	isb	sy
 800602e:	df00      	svc	0
 8006030:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006032:	bf00      	nop
 8006034:	e000ed08 	.word	0xe000ed08

08006038 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800603e:	4b31      	ldr	r3, [pc, #196]	; (8006104 <xPortStartScheduler+0xcc>)
 8006040:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	b2db      	uxtb	r3, r3
 8006048:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	22ff      	movs	r2, #255	; 0xff
 800604e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	b2db      	uxtb	r3, r3
 8006056:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006058:	78fb      	ldrb	r3, [r7, #3]
 800605a:	b2db      	uxtb	r3, r3
 800605c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006060:	b2da      	uxtb	r2, r3
 8006062:	4b29      	ldr	r3, [pc, #164]	; (8006108 <xPortStartScheduler+0xd0>)
 8006064:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006066:	4b29      	ldr	r3, [pc, #164]	; (800610c <xPortStartScheduler+0xd4>)
 8006068:	2207      	movs	r2, #7
 800606a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800606c:	e009      	b.n	8006082 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800606e:	4b27      	ldr	r3, [pc, #156]	; (800610c <xPortStartScheduler+0xd4>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	3b01      	subs	r3, #1
 8006074:	4a25      	ldr	r2, [pc, #148]	; (800610c <xPortStartScheduler+0xd4>)
 8006076:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006078:	78fb      	ldrb	r3, [r7, #3]
 800607a:	b2db      	uxtb	r3, r3
 800607c:	005b      	lsls	r3, r3, #1
 800607e:	b2db      	uxtb	r3, r3
 8006080:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006082:	78fb      	ldrb	r3, [r7, #3]
 8006084:	b2db      	uxtb	r3, r3
 8006086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800608a:	2b80      	cmp	r3, #128	; 0x80
 800608c:	d0ef      	beq.n	800606e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800608e:	4b1f      	ldr	r3, [pc, #124]	; (800610c <xPortStartScheduler+0xd4>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f1c3 0307 	rsb	r3, r3, #7
 8006096:	2b04      	cmp	r3, #4
 8006098:	d009      	beq.n	80060ae <xPortStartScheduler+0x76>
 800609a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800609e:	f383 8811 	msr	BASEPRI, r3
 80060a2:	f3bf 8f6f 	isb	sy
 80060a6:	f3bf 8f4f 	dsb	sy
 80060aa:	60bb      	str	r3, [r7, #8]
 80060ac:	e7fe      	b.n	80060ac <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80060ae:	4b17      	ldr	r3, [pc, #92]	; (800610c <xPortStartScheduler+0xd4>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	021b      	lsls	r3, r3, #8
 80060b4:	4a15      	ldr	r2, [pc, #84]	; (800610c <xPortStartScheduler+0xd4>)
 80060b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80060b8:	4b14      	ldr	r3, [pc, #80]	; (800610c <xPortStartScheduler+0xd4>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80060c0:	4a12      	ldr	r2, [pc, #72]	; (800610c <xPortStartScheduler+0xd4>)
 80060c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	b2da      	uxtb	r2, r3
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80060cc:	4b10      	ldr	r3, [pc, #64]	; (8006110 <xPortStartScheduler+0xd8>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a0f      	ldr	r2, [pc, #60]	; (8006110 <xPortStartScheduler+0xd8>)
 80060d2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80060d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80060d8:	4b0d      	ldr	r3, [pc, #52]	; (8006110 <xPortStartScheduler+0xd8>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a0c      	ldr	r2, [pc, #48]	; (8006110 <xPortStartScheduler+0xd8>)
 80060de:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80060e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80060e4:	f000 f8b0 	bl	8006248 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80060e8:	4b0a      	ldr	r3, [pc, #40]	; (8006114 <xPortStartScheduler+0xdc>)
 80060ea:	2200      	movs	r2, #0
 80060ec:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80060ee:	f7ff ff93 	bl	8006018 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80060f2:	f7fe ff25 	bl	8004f40 <vTaskSwitchContext>
	prvTaskExitError();
 80060f6:	f7ff ff53 	bl	8005fa0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3710      	adds	r7, #16
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}
 8006104:	e000e400 	.word	0xe000e400
 8006108:	20000d4c 	.word	0x20000d4c
 800610c:	20000d50 	.word	0x20000d50
 8006110:	e000ed20 	.word	0xe000ed20
 8006114:	2000000c 	.word	0x2000000c

08006118 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006122:	f383 8811 	msr	BASEPRI, r3
 8006126:	f3bf 8f6f 	isb	sy
 800612a:	f3bf 8f4f 	dsb	sy
 800612e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006130:	4b0e      	ldr	r3, [pc, #56]	; (800616c <vPortEnterCritical+0x54>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	3301      	adds	r3, #1
 8006136:	4a0d      	ldr	r2, [pc, #52]	; (800616c <vPortEnterCritical+0x54>)
 8006138:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800613a:	4b0c      	ldr	r3, [pc, #48]	; (800616c <vPortEnterCritical+0x54>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2b01      	cmp	r3, #1
 8006140:	d10e      	bne.n	8006160 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006142:	4b0b      	ldr	r3, [pc, #44]	; (8006170 <vPortEnterCritical+0x58>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	b2db      	uxtb	r3, r3
 8006148:	2b00      	cmp	r3, #0
 800614a:	d009      	beq.n	8006160 <vPortEnterCritical+0x48>
 800614c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006150:	f383 8811 	msr	BASEPRI, r3
 8006154:	f3bf 8f6f 	isb	sy
 8006158:	f3bf 8f4f 	dsb	sy
 800615c:	603b      	str	r3, [r7, #0]
 800615e:	e7fe      	b.n	800615e <vPortEnterCritical+0x46>
	}
}
 8006160:	bf00      	nop
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	bc80      	pop	{r7}
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	2000000c 	.word	0x2000000c
 8006170:	e000ed04 	.word	0xe000ed04

08006174 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800617a:	4b10      	ldr	r3, [pc, #64]	; (80061bc <vPortExitCritical+0x48>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d109      	bne.n	8006196 <vPortExitCritical+0x22>
 8006182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006186:	f383 8811 	msr	BASEPRI, r3
 800618a:	f3bf 8f6f 	isb	sy
 800618e:	f3bf 8f4f 	dsb	sy
 8006192:	607b      	str	r3, [r7, #4]
 8006194:	e7fe      	b.n	8006194 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006196:	4b09      	ldr	r3, [pc, #36]	; (80061bc <vPortExitCritical+0x48>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	3b01      	subs	r3, #1
 800619c:	4a07      	ldr	r2, [pc, #28]	; (80061bc <vPortExitCritical+0x48>)
 800619e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80061a0:	4b06      	ldr	r3, [pc, #24]	; (80061bc <vPortExitCritical+0x48>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d104      	bne.n	80061b2 <vPortExitCritical+0x3e>
 80061a8:	2300      	movs	r3, #0
 80061aa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80061b2:	bf00      	nop
 80061b4:	370c      	adds	r7, #12
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bc80      	pop	{r7}
 80061ba:	4770      	bx	lr
 80061bc:	2000000c 	.word	0x2000000c

080061c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80061c0:	f3ef 8009 	mrs	r0, PSP
 80061c4:	f3bf 8f6f 	isb	sy
 80061c8:	4b0d      	ldr	r3, [pc, #52]	; (8006200 <pxCurrentTCBConst>)
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80061d0:	6010      	str	r0, [r2, #0]
 80061d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80061d6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80061da:	f380 8811 	msr	BASEPRI, r0
 80061de:	f7fe feaf 	bl	8004f40 <vTaskSwitchContext>
 80061e2:	f04f 0000 	mov.w	r0, #0
 80061e6:	f380 8811 	msr	BASEPRI, r0
 80061ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80061ee:	6819      	ldr	r1, [r3, #0]
 80061f0:	6808      	ldr	r0, [r1, #0]
 80061f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80061f6:	f380 8809 	msr	PSP, r0
 80061fa:	f3bf 8f6f 	isb	sy
 80061fe:	4770      	bx	lr

08006200 <pxCurrentTCBConst>:
 8006200:	20000720 	.word	0x20000720
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006204:	bf00      	nop
 8006206:	bf00      	nop

08006208 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
	__asm volatile
 800620e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006212:	f383 8811 	msr	BASEPRI, r3
 8006216:	f3bf 8f6f 	isb	sy
 800621a:	f3bf 8f4f 	dsb	sy
 800621e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006220:	f7fe fdd0 	bl	8004dc4 <xTaskIncrementTick>
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d003      	beq.n	8006232 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800622a:	4b06      	ldr	r3, [pc, #24]	; (8006244 <SysTick_Handler+0x3c>)
 800622c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006230:	601a      	str	r2, [r3, #0]
 8006232:	2300      	movs	r3, #0
 8006234:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800623c:	bf00      	nop
 800623e:	3708      	adds	r7, #8
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	e000ed04 	.word	0xe000ed04

08006248 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006248:	b480      	push	{r7}
 800624a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800624c:	4b0a      	ldr	r3, [pc, #40]	; (8006278 <vPortSetupTimerInterrupt+0x30>)
 800624e:	2200      	movs	r2, #0
 8006250:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006252:	4b0a      	ldr	r3, [pc, #40]	; (800627c <vPortSetupTimerInterrupt+0x34>)
 8006254:	2200      	movs	r2, #0
 8006256:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006258:	4b09      	ldr	r3, [pc, #36]	; (8006280 <vPortSetupTimerInterrupt+0x38>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a09      	ldr	r2, [pc, #36]	; (8006284 <vPortSetupTimerInterrupt+0x3c>)
 800625e:	fba2 2303 	umull	r2, r3, r2, r3
 8006262:	099b      	lsrs	r3, r3, #6
 8006264:	4a08      	ldr	r2, [pc, #32]	; (8006288 <vPortSetupTimerInterrupt+0x40>)
 8006266:	3b01      	subs	r3, #1
 8006268:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800626a:	4b03      	ldr	r3, [pc, #12]	; (8006278 <vPortSetupTimerInterrupt+0x30>)
 800626c:	2207      	movs	r2, #7
 800626e:	601a      	str	r2, [r3, #0]
}
 8006270:	bf00      	nop
 8006272:	46bd      	mov	sp, r7
 8006274:	bc80      	pop	{r7}
 8006276:	4770      	bx	lr
 8006278:	e000e010 	.word	0xe000e010
 800627c:	e000e018 	.word	0xe000e018
 8006280:	20000000 	.word	0x20000000
 8006284:	10624dd3 	.word	0x10624dd3
 8006288:	e000e014 	.word	0xe000e014

0800628c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006292:	f3ef 8305 	mrs	r3, IPSR
 8006296:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2b0f      	cmp	r3, #15
 800629c:	d913      	bls.n	80062c6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800629e:	4a15      	ldr	r2, [pc, #84]	; (80062f4 <vPortValidateInterruptPriority+0x68>)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	4413      	add	r3, r2
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80062a8:	4b13      	ldr	r3, [pc, #76]	; (80062f8 <vPortValidateInterruptPriority+0x6c>)
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	7afa      	ldrb	r2, [r7, #11]
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d209      	bcs.n	80062c6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80062b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b6:	f383 8811 	msr	BASEPRI, r3
 80062ba:	f3bf 8f6f 	isb	sy
 80062be:	f3bf 8f4f 	dsb	sy
 80062c2:	607b      	str	r3, [r7, #4]
 80062c4:	e7fe      	b.n	80062c4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80062c6:	4b0d      	ldr	r3, [pc, #52]	; (80062fc <vPortValidateInterruptPriority+0x70>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80062ce:	4b0c      	ldr	r3, [pc, #48]	; (8006300 <vPortValidateInterruptPriority+0x74>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d909      	bls.n	80062ea <vPortValidateInterruptPriority+0x5e>
 80062d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062da:	f383 8811 	msr	BASEPRI, r3
 80062de:	f3bf 8f6f 	isb	sy
 80062e2:	f3bf 8f4f 	dsb	sy
 80062e6:	603b      	str	r3, [r7, #0]
 80062e8:	e7fe      	b.n	80062e8 <vPortValidateInterruptPriority+0x5c>
	}
 80062ea:	bf00      	nop
 80062ec:	3714      	adds	r7, #20
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bc80      	pop	{r7}
 80062f2:	4770      	bx	lr
 80062f4:	e000e3f0 	.word	0xe000e3f0
 80062f8:	20000d4c 	.word	0x20000d4c
 80062fc:	e000ed0c 	.word	0xe000ed0c
 8006300:	20000d50 	.word	0x20000d50

08006304 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b08a      	sub	sp, #40	; 0x28
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800630c:	2300      	movs	r3, #0
 800630e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006310:	f7fe fca0 	bl	8004c54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006314:	4b57      	ldr	r3, [pc, #348]	; (8006474 <pvPortMalloc+0x170>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d101      	bne.n	8006320 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800631c:	f000 f90c 	bl	8006538 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006320:	4b55      	ldr	r3, [pc, #340]	; (8006478 <pvPortMalloc+0x174>)
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4013      	ands	r3, r2
 8006328:	2b00      	cmp	r3, #0
 800632a:	f040 808c 	bne.w	8006446 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d01c      	beq.n	800636e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006334:	2208      	movs	r2, #8
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4413      	add	r3, r2
 800633a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f003 0307 	and.w	r3, r3, #7
 8006342:	2b00      	cmp	r3, #0
 8006344:	d013      	beq.n	800636e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f023 0307 	bic.w	r3, r3, #7
 800634c:	3308      	adds	r3, #8
 800634e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f003 0307 	and.w	r3, r3, #7
 8006356:	2b00      	cmp	r3, #0
 8006358:	d009      	beq.n	800636e <pvPortMalloc+0x6a>
 800635a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635e:	f383 8811 	msr	BASEPRI, r3
 8006362:	f3bf 8f6f 	isb	sy
 8006366:	f3bf 8f4f 	dsb	sy
 800636a:	617b      	str	r3, [r7, #20]
 800636c:	e7fe      	b.n	800636c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d068      	beq.n	8006446 <pvPortMalloc+0x142>
 8006374:	4b41      	ldr	r3, [pc, #260]	; (800647c <pvPortMalloc+0x178>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	429a      	cmp	r2, r3
 800637c:	d863      	bhi.n	8006446 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800637e:	4b40      	ldr	r3, [pc, #256]	; (8006480 <pvPortMalloc+0x17c>)
 8006380:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006382:	4b3f      	ldr	r3, [pc, #252]	; (8006480 <pvPortMalloc+0x17c>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006388:	e004      	b.n	8006394 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800638a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800638e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	429a      	cmp	r2, r3
 800639c:	d903      	bls.n	80063a6 <pvPortMalloc+0xa2>
 800639e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d1f1      	bne.n	800638a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80063a6:	4b33      	ldr	r3, [pc, #204]	; (8006474 <pvPortMalloc+0x170>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d04a      	beq.n	8006446 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80063b0:	6a3b      	ldr	r3, [r7, #32]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2208      	movs	r2, #8
 80063b6:	4413      	add	r3, r2
 80063b8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80063ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	6a3b      	ldr	r3, [r7, #32]
 80063c0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80063c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c4:	685a      	ldr	r2, [r3, #4]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	1ad2      	subs	r2, r2, r3
 80063ca:	2308      	movs	r3, #8
 80063cc:	005b      	lsls	r3, r3, #1
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d91e      	bls.n	8006410 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80063d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4413      	add	r3, r2
 80063d8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	f003 0307 	and.w	r3, r3, #7
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d009      	beq.n	80063f8 <pvPortMalloc+0xf4>
 80063e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e8:	f383 8811 	msr	BASEPRI, r3
 80063ec:	f3bf 8f6f 	isb	sy
 80063f0:	f3bf 8f4f 	dsb	sy
 80063f4:	613b      	str	r3, [r7, #16]
 80063f6:	e7fe      	b.n	80063f6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80063f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fa:	685a      	ldr	r2, [r3, #4]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	1ad2      	subs	r2, r2, r3
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800640a:	69b8      	ldr	r0, [r7, #24]
 800640c:	f000 f8f6 	bl	80065fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006410:	4b1a      	ldr	r3, [pc, #104]	; (800647c <pvPortMalloc+0x178>)
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	4a18      	ldr	r2, [pc, #96]	; (800647c <pvPortMalloc+0x178>)
 800641c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800641e:	4b17      	ldr	r3, [pc, #92]	; (800647c <pvPortMalloc+0x178>)
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	4b18      	ldr	r3, [pc, #96]	; (8006484 <pvPortMalloc+0x180>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	429a      	cmp	r2, r3
 8006428:	d203      	bcs.n	8006432 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800642a:	4b14      	ldr	r3, [pc, #80]	; (800647c <pvPortMalloc+0x178>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a15      	ldr	r2, [pc, #84]	; (8006484 <pvPortMalloc+0x180>)
 8006430:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006434:	685a      	ldr	r2, [r3, #4]
 8006436:	4b10      	ldr	r3, [pc, #64]	; (8006478 <pvPortMalloc+0x174>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	431a      	orrs	r2, r3
 800643c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006442:	2200      	movs	r2, #0
 8006444:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006446:	f7fe fc13 	bl	8004c70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	f003 0307 	and.w	r3, r3, #7
 8006450:	2b00      	cmp	r3, #0
 8006452:	d009      	beq.n	8006468 <pvPortMalloc+0x164>
 8006454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006458:	f383 8811 	msr	BASEPRI, r3
 800645c:	f3bf 8f6f 	isb	sy
 8006460:	f3bf 8f4f 	dsb	sy
 8006464:	60fb      	str	r3, [r7, #12]
 8006466:	e7fe      	b.n	8006466 <pvPortMalloc+0x162>
	return pvReturn;
 8006468:	69fb      	ldr	r3, [r7, #28]
}
 800646a:	4618      	mov	r0, r3
 800646c:	3728      	adds	r7, #40	; 0x28
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	2000195c 	.word	0x2000195c
 8006478:	20001968 	.word	0x20001968
 800647c:	20001960 	.word	0x20001960
 8006480:	20001954 	.word	0x20001954
 8006484:	20001964 	.word	0x20001964

08006488 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b086      	sub	sp, #24
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d046      	beq.n	8006528 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800649a:	2308      	movs	r3, #8
 800649c:	425b      	negs	r3, r3
 800649e:	697a      	ldr	r2, [r7, #20]
 80064a0:	4413      	add	r3, r2
 80064a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	685a      	ldr	r2, [r3, #4]
 80064ac:	4b20      	ldr	r3, [pc, #128]	; (8006530 <vPortFree+0xa8>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4013      	ands	r3, r2
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d109      	bne.n	80064ca <vPortFree+0x42>
 80064b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ba:	f383 8811 	msr	BASEPRI, r3
 80064be:	f3bf 8f6f 	isb	sy
 80064c2:	f3bf 8f4f 	dsb	sy
 80064c6:	60fb      	str	r3, [r7, #12]
 80064c8:	e7fe      	b.n	80064c8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d009      	beq.n	80064e6 <vPortFree+0x5e>
 80064d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d6:	f383 8811 	msr	BASEPRI, r3
 80064da:	f3bf 8f6f 	isb	sy
 80064de:	f3bf 8f4f 	dsb	sy
 80064e2:	60bb      	str	r3, [r7, #8]
 80064e4:	e7fe      	b.n	80064e4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	685a      	ldr	r2, [r3, #4]
 80064ea:	4b11      	ldr	r3, [pc, #68]	; (8006530 <vPortFree+0xa8>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4013      	ands	r3, r2
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d019      	beq.n	8006528 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d115      	bne.n	8006528 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	685a      	ldr	r2, [r3, #4]
 8006500:	4b0b      	ldr	r3, [pc, #44]	; (8006530 <vPortFree+0xa8>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	43db      	mvns	r3, r3
 8006506:	401a      	ands	r2, r3
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800650c:	f7fe fba2 	bl	8004c54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	685a      	ldr	r2, [r3, #4]
 8006514:	4b07      	ldr	r3, [pc, #28]	; (8006534 <vPortFree+0xac>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4413      	add	r3, r2
 800651a:	4a06      	ldr	r2, [pc, #24]	; (8006534 <vPortFree+0xac>)
 800651c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800651e:	6938      	ldr	r0, [r7, #16]
 8006520:	f000 f86c 	bl	80065fc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006524:	f7fe fba4 	bl	8004c70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006528:	bf00      	nop
 800652a:	3718      	adds	r7, #24
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}
 8006530:	20001968 	.word	0x20001968
 8006534:	20001960 	.word	0x20001960

08006538 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800653e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006542:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006544:	4b27      	ldr	r3, [pc, #156]	; (80065e4 <prvHeapInit+0xac>)
 8006546:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f003 0307 	and.w	r3, r3, #7
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00c      	beq.n	800656c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	3307      	adds	r3, #7
 8006556:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f023 0307 	bic.w	r3, r3, #7
 800655e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006560:	68ba      	ldr	r2, [r7, #8]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	4a1f      	ldr	r2, [pc, #124]	; (80065e4 <prvHeapInit+0xac>)
 8006568:	4413      	add	r3, r2
 800656a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006570:	4a1d      	ldr	r2, [pc, #116]	; (80065e8 <prvHeapInit+0xb0>)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006576:	4b1c      	ldr	r3, [pc, #112]	; (80065e8 <prvHeapInit+0xb0>)
 8006578:	2200      	movs	r2, #0
 800657a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	68ba      	ldr	r2, [r7, #8]
 8006580:	4413      	add	r3, r2
 8006582:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006584:	2208      	movs	r2, #8
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	1a9b      	subs	r3, r3, r2
 800658a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f023 0307 	bic.w	r3, r3, #7
 8006592:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	4a15      	ldr	r2, [pc, #84]	; (80065ec <prvHeapInit+0xb4>)
 8006598:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800659a:	4b14      	ldr	r3, [pc, #80]	; (80065ec <prvHeapInit+0xb4>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	2200      	movs	r2, #0
 80065a0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80065a2:	4b12      	ldr	r3, [pc, #72]	; (80065ec <prvHeapInit+0xb4>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2200      	movs	r2, #0
 80065a8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	1ad2      	subs	r2, r2, r3
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80065b8:	4b0c      	ldr	r3, [pc, #48]	; (80065ec <prvHeapInit+0xb4>)
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	4a0a      	ldr	r2, [pc, #40]	; (80065f0 <prvHeapInit+0xb8>)
 80065c6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	4a09      	ldr	r2, [pc, #36]	; (80065f4 <prvHeapInit+0xbc>)
 80065ce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80065d0:	4b09      	ldr	r3, [pc, #36]	; (80065f8 <prvHeapInit+0xc0>)
 80065d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80065d6:	601a      	str	r2, [r3, #0]
}
 80065d8:	bf00      	nop
 80065da:	3714      	adds	r7, #20
 80065dc:	46bd      	mov	sp, r7
 80065de:	bc80      	pop	{r7}
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	20000d54 	.word	0x20000d54
 80065e8:	20001954 	.word	0x20001954
 80065ec:	2000195c 	.word	0x2000195c
 80065f0:	20001964 	.word	0x20001964
 80065f4:	20001960 	.word	0x20001960
 80065f8:	20001968 	.word	0x20001968

080065fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80065fc:	b480      	push	{r7}
 80065fe:	b085      	sub	sp, #20
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006604:	4b27      	ldr	r3, [pc, #156]	; (80066a4 <prvInsertBlockIntoFreeList+0xa8>)
 8006606:	60fb      	str	r3, [r7, #12]
 8006608:	e002      	b.n	8006610 <prvInsertBlockIntoFreeList+0x14>
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	60fb      	str	r3, [r7, #12]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	429a      	cmp	r2, r3
 8006618:	d8f7      	bhi.n	800660a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	68ba      	ldr	r2, [r7, #8]
 8006624:	4413      	add	r3, r2
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	429a      	cmp	r2, r3
 800662a:	d108      	bne.n	800663e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	685a      	ldr	r2, [r3, #4]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	441a      	add	r2, r3
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	68ba      	ldr	r2, [r7, #8]
 8006648:	441a      	add	r2, r3
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	429a      	cmp	r2, r3
 8006650:	d118      	bne.n	8006684 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	4b14      	ldr	r3, [pc, #80]	; (80066a8 <prvInsertBlockIntoFreeList+0xac>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	429a      	cmp	r2, r3
 800665c:	d00d      	beq.n	800667a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	685a      	ldr	r2, [r3, #4]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	441a      	add	r2, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	601a      	str	r2, [r3, #0]
 8006678:	e008      	b.n	800668c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800667a:	4b0b      	ldr	r3, [pc, #44]	; (80066a8 <prvInsertBlockIntoFreeList+0xac>)
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	601a      	str	r2, [r3, #0]
 8006682:	e003      	b.n	800668c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	429a      	cmp	r2, r3
 8006692:	d002      	beq.n	800669a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800669a:	bf00      	nop
 800669c:	3714      	adds	r7, #20
 800669e:	46bd      	mov	sp, r7
 80066a0:	bc80      	pop	{r7}
 80066a2:	4770      	bx	lr
 80066a4:	20001954 	.word	0x20001954
 80066a8:	2000195c 	.word	0x2000195c

080066ac <__libc_init_array>:
 80066ac:	b570      	push	{r4, r5, r6, lr}
 80066ae:	2500      	movs	r5, #0
 80066b0:	4e0c      	ldr	r6, [pc, #48]	; (80066e4 <__libc_init_array+0x38>)
 80066b2:	4c0d      	ldr	r4, [pc, #52]	; (80066e8 <__libc_init_array+0x3c>)
 80066b4:	1ba4      	subs	r4, r4, r6
 80066b6:	10a4      	asrs	r4, r4, #2
 80066b8:	42a5      	cmp	r5, r4
 80066ba:	d109      	bne.n	80066d0 <__libc_init_array+0x24>
 80066bc:	f000 f886 	bl	80067cc <_init>
 80066c0:	2500      	movs	r5, #0
 80066c2:	4e0a      	ldr	r6, [pc, #40]	; (80066ec <__libc_init_array+0x40>)
 80066c4:	4c0a      	ldr	r4, [pc, #40]	; (80066f0 <__libc_init_array+0x44>)
 80066c6:	1ba4      	subs	r4, r4, r6
 80066c8:	10a4      	asrs	r4, r4, #2
 80066ca:	42a5      	cmp	r5, r4
 80066cc:	d105      	bne.n	80066da <__libc_init_array+0x2e>
 80066ce:	bd70      	pop	{r4, r5, r6, pc}
 80066d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80066d4:	4798      	blx	r3
 80066d6:	3501      	adds	r5, #1
 80066d8:	e7ee      	b.n	80066b8 <__libc_init_array+0xc>
 80066da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80066de:	4798      	blx	r3
 80066e0:	3501      	adds	r5, #1
 80066e2:	e7f2      	b.n	80066ca <__libc_init_array+0x1e>
 80066e4:	08006a34 	.word	0x08006a34
 80066e8:	08006a34 	.word	0x08006a34
 80066ec:	08006a34 	.word	0x08006a34
 80066f0:	08006a38 	.word	0x08006a38

080066f4 <__itoa>:
 80066f4:	1e93      	subs	r3, r2, #2
 80066f6:	2b22      	cmp	r3, #34	; 0x22
 80066f8:	b510      	push	{r4, lr}
 80066fa:	460c      	mov	r4, r1
 80066fc:	d904      	bls.n	8006708 <__itoa+0x14>
 80066fe:	2300      	movs	r3, #0
 8006700:	461c      	mov	r4, r3
 8006702:	700b      	strb	r3, [r1, #0]
 8006704:	4620      	mov	r0, r4
 8006706:	bd10      	pop	{r4, pc}
 8006708:	2a0a      	cmp	r2, #10
 800670a:	d109      	bne.n	8006720 <__itoa+0x2c>
 800670c:	2800      	cmp	r0, #0
 800670e:	da07      	bge.n	8006720 <__itoa+0x2c>
 8006710:	232d      	movs	r3, #45	; 0x2d
 8006712:	700b      	strb	r3, [r1, #0]
 8006714:	2101      	movs	r1, #1
 8006716:	4240      	negs	r0, r0
 8006718:	4421      	add	r1, r4
 800671a:	f000 f819 	bl	8006750 <__utoa>
 800671e:	e7f1      	b.n	8006704 <__itoa+0x10>
 8006720:	2100      	movs	r1, #0
 8006722:	e7f9      	b.n	8006718 <__itoa+0x24>

08006724 <itoa>:
 8006724:	f7ff bfe6 	b.w	80066f4 <__itoa>

08006728 <memcpy>:
 8006728:	b510      	push	{r4, lr}
 800672a:	1e43      	subs	r3, r0, #1
 800672c:	440a      	add	r2, r1
 800672e:	4291      	cmp	r1, r2
 8006730:	d100      	bne.n	8006734 <memcpy+0xc>
 8006732:	bd10      	pop	{r4, pc}
 8006734:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006738:	f803 4f01 	strb.w	r4, [r3, #1]!
 800673c:	e7f7      	b.n	800672e <memcpy+0x6>

0800673e <memset>:
 800673e:	4603      	mov	r3, r0
 8006740:	4402      	add	r2, r0
 8006742:	4293      	cmp	r3, r2
 8006744:	d100      	bne.n	8006748 <memset+0xa>
 8006746:	4770      	bx	lr
 8006748:	f803 1b01 	strb.w	r1, [r3], #1
 800674c:	e7f9      	b.n	8006742 <memset+0x4>
	...

08006750 <__utoa>:
 8006750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006752:	b08b      	sub	sp, #44	; 0x2c
 8006754:	4605      	mov	r5, r0
 8006756:	460c      	mov	r4, r1
 8006758:	466e      	mov	r6, sp
 800675a:	4b1b      	ldr	r3, [pc, #108]	; (80067c8 <__utoa+0x78>)
 800675c:	f103 0c20 	add.w	ip, r3, #32
 8006760:	4637      	mov	r7, r6
 8006762:	6818      	ldr	r0, [r3, #0]
 8006764:	6859      	ldr	r1, [r3, #4]
 8006766:	3308      	adds	r3, #8
 8006768:	c703      	stmia	r7!, {r0, r1}
 800676a:	4563      	cmp	r3, ip
 800676c:	463e      	mov	r6, r7
 800676e:	d1f7      	bne.n	8006760 <__utoa+0x10>
 8006770:	6818      	ldr	r0, [r3, #0]
 8006772:	791b      	ldrb	r3, [r3, #4]
 8006774:	6038      	str	r0, [r7, #0]
 8006776:	713b      	strb	r3, [r7, #4]
 8006778:	1e93      	subs	r3, r2, #2
 800677a:	2b22      	cmp	r3, #34	; 0x22
 800677c:	f04f 0300 	mov.w	r3, #0
 8006780:	d904      	bls.n	800678c <__utoa+0x3c>
 8006782:	7023      	strb	r3, [r4, #0]
 8006784:	461c      	mov	r4, r3
 8006786:	4620      	mov	r0, r4
 8006788:	b00b      	add	sp, #44	; 0x2c
 800678a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800678c:	1e66      	subs	r6, r4, #1
 800678e:	fbb5 f0f2 	udiv	r0, r5, r2
 8006792:	fb02 5510 	mls	r5, r2, r0, r5
 8006796:	af0a      	add	r7, sp, #40	; 0x28
 8006798:	443d      	add	r5, r7
 800679a:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 800679e:	1c59      	adds	r1, r3, #1
 80067a0:	f806 5f01 	strb.w	r5, [r6, #1]!
 80067a4:	4605      	mov	r5, r0
 80067a6:	b968      	cbnz	r0, 80067c4 <__utoa+0x74>
 80067a8:	4622      	mov	r2, r4
 80067aa:	5460      	strb	r0, [r4, r1]
 80067ac:	4423      	add	r3, r4
 80067ae:	1b19      	subs	r1, r3, r4
 80067b0:	1b10      	subs	r0, r2, r4
 80067b2:	4281      	cmp	r1, r0
 80067b4:	dde7      	ble.n	8006786 <__utoa+0x36>
 80067b6:	7811      	ldrb	r1, [r2, #0]
 80067b8:	7818      	ldrb	r0, [r3, #0]
 80067ba:	f802 0b01 	strb.w	r0, [r2], #1
 80067be:	f803 1901 	strb.w	r1, [r3], #-1
 80067c2:	e7f4      	b.n	80067ae <__utoa+0x5e>
 80067c4:	460b      	mov	r3, r1
 80067c6:	e7e2      	b.n	800678e <__utoa+0x3e>
 80067c8:	08006a0c 	.word	0x08006a0c

080067cc <_init>:
 80067cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ce:	bf00      	nop
 80067d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067d2:	bc08      	pop	{r3}
 80067d4:	469e      	mov	lr, r3
 80067d6:	4770      	bx	lr

080067d8 <_fini>:
 80067d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067da:	bf00      	nop
 80067dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067de:	bc08      	pop	{r3}
 80067e0:	469e      	mov	lr, r3
 80067e2:	4770      	bx	lr
